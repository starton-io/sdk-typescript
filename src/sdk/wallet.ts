/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { dlv } from "../lib/dlv.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as errors from "./models/errors/index.js";
import { SDKError } from "./models/errors/sdkerror.js";
import { SDKValidationError } from "./models/errors/sdkvalidationerror.js";
import * as operations from "./models/operations/index.js";
import * as shared from "./models/shared/index.js";
import { unwrap as unwrap$ } from "./types/fp.js";
import { createPageIterator, PageIterator, Paginator } from "./types/operations.js";

export class Wallet extends ClientSDK {
    /**
     * Create a new wallet
     *
     * @remarks
     * Create a new wallet for the project.
     */
    async create(
        request: shared.CreateWalletDto,
        options?: RequestOptions
    ): Promise<operations.CreateWalletResponse> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => shared.CreateWalletDto$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const path$ = pathToFunc("/v3/kms/wallet")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "createWallet",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "412", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await m$.match<
            operations.CreateWalletResponse,
            | errors.CreateWalletResponseBody
            | errors.CreateWalletWalletResponseBody
            | SDKError
            | SDKValidationError
        >(
            m$.json(201, operations.CreateWalletResponse$inboundSchema, { key: "Wallet" }),
            m$.jsonErr(400, errors.CreateWalletResponseBody$inboundSchema),
            m$.jsonErr(412, errors.CreateWalletWalletResponseBody$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }

    /**
     * Delete a wallet
     *
     * @remarks
     * Removes a wallet from the Key Management System.
     */
    async delete(
        request: operations.DeleteWalletRequest,
        options?: RequestOptions
    ): Promise<operations.DeleteWalletResponse> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.DeleteWalletRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const pathParams$ = {
            address: encodeSimple$("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = pathToFunc("/v3/kms/wallet/{address}")(pathParams$);

        const query$ = encodeFormQuery$({
            deleteKeyOnKms: payload$.deleteKeyOnKms,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "deleteWallet",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "DELETE",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await m$.match<
            operations.DeleteWalletResponse,
            | errors.DeleteWalletResponseBody
            | errors.DeleteWalletWalletResponseBody
            | SDKError
            | SDKValidationError
        >(
            m$.json(200, operations.DeleteWalletResponse$inboundSchema, { key: "number" }),
            m$.jsonErr(400, errors.DeleteWalletResponseBody$inboundSchema),
            m$.jsonErr(404, errors.DeleteWalletWalletResponseBody$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }

    /**
     * Retrieve the list of Wallets
     *
     * @remarks
     * Fetches the list of wallets of the project
     */
    async getAll(
        request: operations.GetAllWalletRequest,
        options?: RequestOptions
    ): Promise<PageIterator<operations.GetAllWalletResponse>> {
        const input$ = typeof request === "undefined" ? {} : request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.GetAllWalletRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const path$ = pathToFunc("/v3/kms/wallet")();

        const query$ = encodeFormQuery$({
            limit: payload$.limit,
            name: payload$.name,
            page: payload$.page,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "getAllWallet",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$, raw$] = await m$.match<
            operations.GetAllWalletResponse,
            errors.GetAllWalletResponseBody | SDKError | SDKValidationError
        >(
            m$.json(200, operations.GetAllWalletResponse$inboundSchema, { key: "WalletPaginated" }),
            m$.jsonErr(400, errors.GetAllWalletResponseBody$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        const nextFunc = (responseData: unknown): Paginator<operations.GetAllWalletResponse> => {
            const page = input$.page || 0;
            const nextPage = page + 1;
            const numPages = dlv(responseData, "meta.totalPages");
            if (numPages == null || numPages <= page) {
                return () => null;
            }

            if (!responseData) {
                return () => null;
            }
            const results = dlv(responseData, "items");
            if (!Array.isArray(results) || !results.length) {
                return () => null;
            }
            const limit = input$.limit || 0;
            if (results.length < limit) {
                return () => null;
            }

            return () =>
                this.getAll(
                    {
                        ...input$,
                        page: nextPage,
                    },
                    options
                );
        };

        const page$ = { ...unwrap$(result$), next: nextFunc(raw$) };
        return { ...page$, ...createPageIterator(page$, !result$.ok) };
    }

    /**
     * Fetch Wallet Details
     *
     * @remarks
     * Retrieves information about a specific wallet.
     */
    async getOne(
        request: operations.GetOneWalletRequest,
        options?: RequestOptions
    ): Promise<operations.GetOneWalletResponse> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.GetOneWalletRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const pathParams$ = {
            address: encodeSimple$("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = pathToFunc("/v3/kms/wallet/{address}")(pathParams$);

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "getOneWallet",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await m$.match<
            operations.GetOneWalletResponse,
            | errors.GetOneWalletResponseBody
            | errors.GetOneWalletWalletResponseBody
            | SDKError
            | SDKValidationError
        >(
            m$.json(200, operations.GetOneWalletResponse$inboundSchema, { key: "Wallet" }),
            m$.jsonErr(400, errors.GetOneWalletResponseBody$inboundSchema),
            m$.jsonErr(404, errors.GetOneWalletWalletResponseBody$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }

    /**
     * Import Wallet from Provider Key
     *
     * @remarks
     * Imports a wallet using a Key Management System.
     */
    async import(
        request: shared.ImportProviderKeyDto,
        options?: RequestOptions
    ): Promise<operations.ImportProviderKeyWalletResponse> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => shared.ImportProviderKeyDto$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const path$ = pathToFunc("/v3/kms/wallet/import-provider-key")();

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "importProviderKeyWallet",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await m$.match<
            operations.ImportProviderKeyWalletResponse,
            errors.ImportProviderKeyWalletResponseBody | SDKError | SDKValidationError
        >(
            m$.json(201, operations.ImportProviderKeyWalletResponse$inboundSchema, {
                key: "Wallet",
            }),
            m$.jsonErr(400, errors.ImportProviderKeyWalletResponseBody$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }

    /**
     * Request tokens from faucet
     *
     * @remarks
     * Request tokens from the faucet, which can be used for testing and development purposes on testnet networks. Each user is limited to one request per day.
     */
    async requestFaucet(
        request: operations.ClaimFaucetRequest,
        options?: RequestOptions
    ): Promise<operations.ClaimFaucetResponse> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.ClaimFaucetRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$.RequireFaucetDto, { explode: true });

        const pathParams$ = {
            network: encodeSimple$("network", payload$.network, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = pathToFunc("/v3/faucet/{network}")(pathParams$);

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "claimFaucet",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "4XX", "500", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await m$.match<
            operations.ClaimFaucetResponse,
            | errors.ClaimFaucetResponseBody
            | errors.ClaimFaucetWalletResponseBody
            | SDKError
            | SDKValidationError
        >(
            m$.json(201, operations.ClaimFaucetResponse$inboundSchema, { key: "Faucet" }),
            m$.jsonErr(400, errors.ClaimFaucetResponseBody$inboundSchema),
            m$.jsonErr(500, errors.ClaimFaucetWalletResponseBody$inboundSchema),
            m$.fail(["4XX", "5XX"]),
            m$.json("default", operations.ClaimFaucetResponse$inboundSchema, { key: "oneOf" })
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }

    /**
     * Synchronize Nonces for a wallet
     *
     * @remarks
     * Updates the stored nonce values for a wallet, synchronizing them with the current blockchain state.
     */
    async resyncNonce(
        request: operations.ResyncNoncesWalletRequest,
        options?: RequestOptions
    ): Promise<operations.ResyncNoncesWalletResponse> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.ResyncNoncesWalletRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const pathParams$ = {
            address: encodeSimple$("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
            network: encodeSimple$("network", payload$.network, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = pathToFunc("/v3/kms/wallet/{address}/{network}/nonce/resync")(pathParams$);

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "resyncNoncesWallet",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "404", "422", "4XX", "500", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await m$.match<
            operations.ResyncNoncesWalletResponse,
            | errors.ResyncNoncesWalletResponseBody
            | errors.ResyncNoncesWalletWalletResponseBody
            | errors.ResyncNoncesWalletWalletTransactionManagerResponseBody
            | errors.ResyncNoncesWalletWalletTransactionManagerResponseResponseBody
            | SDKError
            | SDKValidationError
        >(
            m$.json(201, operations.ResyncNoncesWalletResponse$inboundSchema, {
                key: "resyncNonce",
            }),
            m$.jsonErr(400, errors.ResyncNoncesWalletResponseBody$inboundSchema),
            m$.jsonErr(404, errors.ResyncNoncesWalletWalletResponseBody$inboundSchema),
            m$.jsonErr(
                422,
                errors.ResyncNoncesWalletWalletTransactionManagerResponseBody$inboundSchema
            ),
            m$.jsonErr(
                500,
                errors.ResyncNoncesWalletWalletTransactionManagerResponseResponseBody$inboundSchema
            ),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }

    /**
     * Sign a message
     *
     * @remarks
     * Generates a cryptographic signature for a given message using a specified wallet.
     */
    async sign(
        request: operations.SignMessageWalletRequest,
        options?: RequestOptions
    ): Promise<operations.SignMessageWalletResponse> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.SignMessageWalletRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$.SignMessageDto, { explode: true });

        const pathParams$ = {
            address: encodeSimple$("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = pathToFunc("/v3/kms/wallet/{address}/sign-message")(pathParams$);

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "signMessageWallet",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "403", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await m$.match<
            operations.SignMessageWalletResponse,
            | errors.SignMessageWalletResponseBody
            | errors.SignMessageWalletWalletResponseBody
            | errors.SignMessageWalletWalletResponseResponseBody
            | SDKError
            | SDKValidationError
        >(
            m$.json(201, operations.SignMessageWalletResponse$inboundSchema, {
                key: "SignMessageResponse",
            }),
            m$.jsonErr(400, errors.SignMessageWalletResponseBody$inboundSchema),
            m$.jsonErr(403, errors.SignMessageWalletWalletResponseBody$inboundSchema),
            m$.jsonErr(404, errors.SignMessageWalletWalletResponseResponseBody$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }

    /**
     * Update Wallet Information
     *
     * @remarks
     * Modifies details of an existing wallet using its address.
     */
    async update(
        request: operations.UpdateWalletRequest,
        options?: RequestOptions
    ): Promise<operations.UpdateWalletResponse> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.UpdateWalletRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$.UpdateWalletDto, { explode: true });

        const pathParams$ = {
            address: encodeSimple$("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = pathToFunc("/v3/kms/wallet/{address}")(pathParams$);

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "updateWallet",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "PATCH",
                path: path$,
                headers: headers$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await m$.match<
            operations.UpdateWalletResponse,
            | errors.UpdateWalletResponseBody
            | errors.UpdateWalletWalletResponseBody
            | SDKError
            | SDKValidationError
        >(
            m$.json(200, operations.UpdateWalletResponse$inboundSchema, { key: "Wallet" }),
            m$.jsonErr(400, errors.UpdateWalletResponseBody$inboundSchema),
            m$.jsonErr(404, errors.UpdateWalletWalletResponseBody$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }
}
