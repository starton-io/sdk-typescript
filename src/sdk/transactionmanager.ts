/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { dlv } from "../lib/dlv.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeJSON as encodeJSON$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as errors from "./models/errors/index.js";
import { SDKError } from "./models/errors/sdkerror.js";
import { SDKValidationError } from "./models/errors/sdkvalidationerror.js";
import * as operations from "./models/operations/index.js";
import { Setting } from "./setting.js";
import { unwrap as unwrap$ } from "./types/fp.js";
import { createPageIterator, PageIterator, Paginator } from "./types/operations.js";

export class TransactionManager extends ClientSDK {
    private _setting?: Setting;
    get setting(): Setting {
        return (this._setting ??= new Setting(this.options$));
    }

    /**
     * Create a new transaction
     *
     * @remarks
     * Create a new blockchain transaction
     */
    async create(
        request: operations.CreateTransactionRequest,
        options?: RequestOptions
    ): Promise<operations.CreateTransactionResponse> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.CreateTransactionRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = encodeJSON$("body", payload$.CreateTransactionDto, { explode: true });

        const path$ = pathToFunc("/v3/transaction")();

        const query$ = encodeFormQuery$({
            simulate: payload$.simulate,
        });

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "createTransaction",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "404", "422", "4XX", "500", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await m$.match<
            operations.CreateTransactionResponse,
            | errors.CreateTransactionResponseBody
            | errors.CreateTransactionTransactionManagerResponseBody
            | errors.CreateTransactionTransactionManagerResponseResponseBody
            | errors.CreateTransactionTransactionManagerResponse500ResponseBody
            | SDKError
            | SDKValidationError
        >(
            m$.json(201, operations.CreateTransactionResponse$inboundSchema, {
                key: "Transaction",
            }),
            m$.jsonErr(400, errors.CreateTransactionResponseBody$inboundSchema),
            m$.jsonErr(404, errors.CreateTransactionTransactionManagerResponseBody$inboundSchema),
            m$.jsonErr(
                422,
                errors.CreateTransactionTransactionManagerResponseResponseBody$inboundSchema
            ),
            m$.jsonErr(
                500,
                errors.CreateTransactionTransactionManagerResponse500ResponseBody$inboundSchema
            ),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }

    /**
     * Retrieve a List of Transactions
     *
     * @remarks
     * Retrieves a list of transactions.
     */
    async getAll(
        request: operations.GetAllTransactionRequest,
        options?: RequestOptions
    ): Promise<PageIterator<operations.GetAllTransactionResponse>> {
        const input$ = typeof request === "undefined" ? {} : request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.GetAllTransactionRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const path$ = pathToFunc("/v3/transaction")();

        const query$ = encodeFormQuery$({
            from: payload$.from,
            fromDate: payload$.fromDate,
            limit: payload$.limit,
            network: payload$.network,
            page: payload$.page,
            to: payload$.to,
            transactionHash: payload$.transactionHash,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "getAllTransaction",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$, raw$] = await m$.match<
            operations.GetAllTransactionResponse,
            errors.GetAllTransactionResponseBody | SDKError | SDKValidationError
        >(
            m$.json(200, operations.GetAllTransactionResponse$inboundSchema, {
                key: "TransactionPaginated",
            }),
            m$.jsonErr(400, errors.GetAllTransactionResponseBody$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.GetAllTransactionResponse> => {
            const page = input$.page || 0;
            const nextPage = page + 1;
            const numPages = dlv(responseData, "meta.totalPages");
            if (numPages == null || numPages <= page) {
                return () => null;
            }

            if (!responseData) {
                return () => null;
            }
            const results = dlv(responseData, "items");
            if (!Array.isArray(results) || !results.length) {
                return () => null;
            }
            const limit = input$.limit || 0;
            if (results.length < limit) {
                return () => null;
            }

            return () =>
                this.getAll(
                    {
                        ...input$,
                        page: nextPage,
                    },
                    options
                );
        };

        const page$ = { ...unwrap$(result$), next: nextFunc(raw$) };
        return { ...page$, ...createPageIterator(page$, !result$.ok) };
    }

    /**
     * Retrieve Available Nonces for a wallet
     *
     * @remarks
     * Gets all available nonces for a wallet, ensuring transaction integrity on the blockchain.
     */
    async getAvailableNonces(
        request: operations.GetAvailableNoncesWalletRequest,
        options?: RequestOptions
    ): Promise<operations.GetAvailableNoncesWalletResponse> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.GetAvailableNoncesWalletRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const pathParams$ = {
            address: encodeSimple$("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
            network: encodeSimple$("network", payload$.network, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = pathToFunc("/v3/kms/wallet/{address}/{network}/nonce/available")(pathParams$);

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "getAvailableNoncesWallet",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "404", "422", "4XX", "500", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await m$.match<
            operations.GetAvailableNoncesWalletResponse,
            | errors.GetAvailableNoncesWalletResponseBody
            | errors.GetAvailableNoncesWalletTransactionManagerResponseBody
            | errors.GetAvailableNoncesWalletTransactionManagerResponseResponseBody
            | errors.GetAvailableNoncesWalletTransactionManagerResponse500ResponseBody
            | SDKError
            | SDKValidationError
        >(
            m$.json(200, operations.GetAvailableNoncesWalletResponse$inboundSchema, {
                key: "NoncesAvailable",
            }),
            m$.jsonErr(400, errors.GetAvailableNoncesWalletResponseBody$inboundSchema),
            m$.jsonErr(
                404,
                errors.GetAvailableNoncesWalletTransactionManagerResponseBody$inboundSchema
            ),
            m$.jsonErr(
                422,
                errors.GetAvailableNoncesWalletTransactionManagerResponseResponseBody$inboundSchema
            ),
            m$.jsonErr(
                500,
                errors.GetAvailableNoncesWalletTransactionManagerResponse500ResponseBody$inboundSchema
            ),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }

    /**
     * Get a Specific Transaction
     *
     * @remarks
     * Retrieves the details of a specific transaction using its unique identifier.
     */
    async getOne(
        request: operations.GetOneTransactionRequest,
        options?: RequestOptions
    ): Promise<operations.GetOneTransactionResponse> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.GetOneTransactionRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = pathToFunc("/v3/transaction/{id}")(pathParams$);

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "getOneTransaction",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await m$.match<
            operations.GetOneTransactionResponse,
            | errors.GetOneTransactionResponseBody
            | errors.GetOneTransactionTransactionManagerResponseBody
            | SDKError
            | SDKValidationError
        >(
            m$.json(200, operations.GetOneTransactionResponse$inboundSchema, {
                key: "Transaction",
            }),
            m$.jsonErr(400, errors.GetOneTransactionResponseBody$inboundSchema),
            m$.jsonErr(404, errors.GetOneTransactionTransactionManagerResponseBody$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }

    /**
     * Synchronize Nonces for a wallet
     *
     * @remarks
     * Updates the stored nonce values for a wallet, synchronizing them with the current blockchain state.
     */
    async resyncNonce(
        request: operations.ResyncNoncesWalletRequest,
        options?: RequestOptions
    ): Promise<operations.ResyncNoncesWalletResponse> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.ResyncNoncesWalletRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const pathParams$ = {
            address: encodeSimple$("address", payload$.address, {
                explode: false,
                charEncoding: "percent",
            }),
            network: encodeSimple$("network", payload$.network, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = pathToFunc("/v3/kms/wallet/{address}/{network}/nonce/resync")(pathParams$);

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "resyncNoncesWallet",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "404", "422", "4XX", "500", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await m$.match<
            operations.ResyncNoncesWalletResponse,
            | errors.ResyncNoncesWalletResponseBody
            | errors.ResyncNoncesWalletWalletResponseBody
            | errors.ResyncNoncesWalletWalletTransactionManagerResponseBody
            | errors.ResyncNoncesWalletWalletTransactionManagerResponseResponseBody
            | SDKError
            | SDKValidationError
        >(
            m$.json(201, operations.ResyncNoncesWalletResponse$inboundSchema, {
                key: "resyncNonce",
            }),
            m$.jsonErr(400, errors.ResyncNoncesWalletResponseBody$inboundSchema),
            m$.jsonErr(404, errors.ResyncNoncesWalletWalletResponseBody$inboundSchema),
            m$.jsonErr(
                422,
                errors.ResyncNoncesWalletWalletTransactionManagerResponseBody$inboundSchema
            ),
            m$.jsonErr(
                500,
                errors.ResyncNoncesWalletWalletTransactionManagerResponseResponseBody$inboundSchema
            ),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }
}
