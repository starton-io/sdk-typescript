/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetBalanceAddressRequest = {
  /**
   * Your address.
   */
  address: string;
  /**
   * The blockchain network you are checking data on.
   */
  network: string;
};

export type GetBalanceAddressResponse = {
  addressNativeBalanceResponse?:
    | shared.AddressNativeBalanceResponse
    | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetBalanceAddressRequest$inboundSchema: z.ZodType<
  GetBalanceAddressRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.string(),
  network: z.string(),
});

/** @internal */
export type GetBalanceAddressRequest$Outbound = {
  address: string;
  network: string;
};

/** @internal */
export const GetBalanceAddressRequest$outboundSchema: z.ZodType<
  GetBalanceAddressRequest$Outbound,
  z.ZodTypeDef,
  GetBalanceAddressRequest
> = z.object({
  address: z.string(),
  network: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceAddressRequest$ {
  /** @deprecated use `GetBalanceAddressRequest$inboundSchema` instead. */
  export const inboundSchema = GetBalanceAddressRequest$inboundSchema;
  /** @deprecated use `GetBalanceAddressRequest$outboundSchema` instead. */
  export const outboundSchema = GetBalanceAddressRequest$outboundSchema;
  /** @deprecated use `GetBalanceAddressRequest$Outbound` instead. */
  export type Outbound = GetBalanceAddressRequest$Outbound;
}

export function getBalanceAddressRequestToJSON(
  getBalanceAddressRequest: GetBalanceAddressRequest,
): string {
  return JSON.stringify(
    GetBalanceAddressRequest$outboundSchema.parse(getBalanceAddressRequest),
  );
}

export function getBalanceAddressRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceAddressRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceAddressRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceAddressRequest' from JSON`,
  );
}

/** @internal */
export const GetBalanceAddressResponse$inboundSchema: z.ZodType<
  GetBalanceAddressResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  AddressNativeBalanceResponse: shared
    .AddressNativeBalanceResponse$inboundSchema.optional(),
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "AddressNativeBalanceResponse": "addressNativeBalanceResponse",
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetBalanceAddressResponse$Outbound = {
  AddressNativeBalanceResponse?:
    | shared.AddressNativeBalanceResponse$Outbound
    | undefined;
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetBalanceAddressResponse$outboundSchema: z.ZodType<
  GetBalanceAddressResponse$Outbound,
  z.ZodTypeDef,
  GetBalanceAddressResponse
> = z.object({
  addressNativeBalanceResponse: shared
    .AddressNativeBalanceResponse$outboundSchema.optional(),
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    addressNativeBalanceResponse: "AddressNativeBalanceResponse",
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBalanceAddressResponse$ {
  /** @deprecated use `GetBalanceAddressResponse$inboundSchema` instead. */
  export const inboundSchema = GetBalanceAddressResponse$inboundSchema;
  /** @deprecated use `GetBalanceAddressResponse$outboundSchema` instead. */
  export const outboundSchema = GetBalanceAddressResponse$outboundSchema;
  /** @deprecated use `GetBalanceAddressResponse$Outbound` instead. */
  export type Outbound = GetBalanceAddressResponse$Outbound;
}

export function getBalanceAddressResponseToJSON(
  getBalanceAddressResponse: GetBalanceAddressResponse,
): string {
  return JSON.stringify(
    GetBalanceAddressResponse$outboundSchema.parse(getBalanceAddressResponse),
  );
}

export function getBalanceAddressResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetBalanceAddressResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBalanceAddressResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBalanceAddressResponse' from JSON`,
  );
}
