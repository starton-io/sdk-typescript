/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as shared from "../shared";
import * as z from "zod";

export type CallSmartContractRequest = {
    /**
     * Body to interact with a smart contract.
     */
    callDto: shared.CallDto;
    /**
     * Smart contract address.
     */
    address: string;
    /**
     * EVM starton supported network.
     */
    network: string;
    /**
     * Boolean for transaction simulation. Will estimate gas price.
     */
    simulate?: boolean | undefined;
};

export type CallSmartContractResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    transaction?: shared.Transaction | undefined;
};

/** @internal */
export namespace CallSmartContractRequest$ {
    export const inboundSchema: z.ZodType<CallSmartContractRequest, z.ZodTypeDef, unknown> = z
        .object({
            CallDto: shared.CallDto$.inboundSchema,
            address: z.string(),
            network: z.string(),
            simulate: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                CallDto: "callDto",
            });
        });

    export type Outbound = {
        CallDto: shared.CallDto$.Outbound;
        address: string;
        network: string;
        simulate?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CallSmartContractRequest> = z
        .object({
            callDto: shared.CallDto$.outboundSchema,
            address: z.string(),
            network: z.string(),
            simulate: z.boolean().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                callDto: "CallDto",
            });
        });
}

/** @internal */
export namespace CallSmartContractResponse$ {
    export const inboundSchema: z.ZodType<CallSmartContractResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            Transaction: shared.Transaction$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
                Transaction: "transaction",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        Transaction?: shared.Transaction$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CallSmartContractResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            transaction: shared.Transaction$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
                transaction: "Transaction",
            });
        });
}
