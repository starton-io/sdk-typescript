/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type CallSmartContractRequest = {
    /**
     * Body to interact with a smart contract.
     */
    callDto: shared.CallDto;
    /**
     * Smart contract address.
     */
    address: string;
    /**
     * EVM starton supported network.
     */
    network: string;
    /**
     * Boolean for transaction simulation. Will estimate gas price.
     */
    simulate?: boolean | undefined;
};

export type CallSmartContractResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    transaction?: shared.Transaction | undefined;
};

/** @internal */
export namespace CallSmartContractRequest$ {
    export type Inbound = {
        CallDto: shared.CallDto$.Inbound;
        address: string;
        network: string;
        simulate?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<CallSmartContractRequest, z.ZodTypeDef, Inbound> = z
        .object({
            CallDto: shared.CallDto$.inboundSchema,
            address: z.string(),
            network: z.string(),
            simulate: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                callDto: v.CallDto,
                address: v.address,
                network: v.network,
                ...(v.simulate === undefined ? null : { simulate: v.simulate }),
            };
        });

    export type Outbound = {
        CallDto: shared.CallDto$.Outbound;
        address: string;
        network: string;
        simulate?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CallSmartContractRequest> = z
        .object({
            callDto: shared.CallDto$.outboundSchema,
            address: z.string(),
            network: z.string(),
            simulate: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                CallDto: v.callDto,
                address: v.address,
                network: v.network,
                ...(v.simulate === undefined ? null : { simulate: v.simulate }),
            };
        });
}

/** @internal */
export namespace CallSmartContractResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        Transaction?: shared.Transaction$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CallSmartContractResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            Transaction: shared.Transaction$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.Transaction === undefined ? null : { transaction: v.Transaction }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        Transaction?: shared.Transaction$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CallSmartContractResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            transaction: shared.Transaction$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.transaction === undefined ? null : { Transaction: v.transaction }),
            };
        });
}
