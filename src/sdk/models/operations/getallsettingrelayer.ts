/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetAllSettingRelayerRequest = {
  /**
   * The blockchain network for which the Relayer settings should be retrieved.
   */
  network: string;
};

export type GetAllSettingRelayerResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  settingRelayer?: shared.SettingRelayer | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetAllSettingRelayerRequest$inboundSchema: z.ZodType<
  GetAllSettingRelayerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  network: z.string(),
});

/** @internal */
export type GetAllSettingRelayerRequest$Outbound = {
  network: string;
};

/** @internal */
export const GetAllSettingRelayerRequest$outboundSchema: z.ZodType<
  GetAllSettingRelayerRequest$Outbound,
  z.ZodTypeDef,
  GetAllSettingRelayerRequest
> = z.object({
  network: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllSettingRelayerRequest$ {
  /** @deprecated use `GetAllSettingRelayerRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllSettingRelayerRequest$inboundSchema;
  /** @deprecated use `GetAllSettingRelayerRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllSettingRelayerRequest$outboundSchema;
  /** @deprecated use `GetAllSettingRelayerRequest$Outbound` instead. */
  export type Outbound = GetAllSettingRelayerRequest$Outbound;
}

export function getAllSettingRelayerRequestToJSON(
  getAllSettingRelayerRequest: GetAllSettingRelayerRequest,
): string {
  return JSON.stringify(
    GetAllSettingRelayerRequest$outboundSchema.parse(
      getAllSettingRelayerRequest,
    ),
  );
}

export function getAllSettingRelayerRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllSettingRelayerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllSettingRelayerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllSettingRelayerRequest' from JSON`,
  );
}

/** @internal */
export const GetAllSettingRelayerResponse$inboundSchema: z.ZodType<
  GetAllSettingRelayerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  SettingRelayer: shared.SettingRelayer$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "SettingRelayer": "settingRelayer",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetAllSettingRelayerResponse$Outbound = {
  ContentType: string;
  SettingRelayer?: shared.SettingRelayer$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetAllSettingRelayerResponse$outboundSchema: z.ZodType<
  GetAllSettingRelayerResponse$Outbound,
  z.ZodTypeDef,
  GetAllSettingRelayerResponse
> = z.object({
  contentType: z.string(),
  settingRelayer: shared.SettingRelayer$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    settingRelayer: "SettingRelayer",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllSettingRelayerResponse$ {
  /** @deprecated use `GetAllSettingRelayerResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllSettingRelayerResponse$inboundSchema;
  /** @deprecated use `GetAllSettingRelayerResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllSettingRelayerResponse$outboundSchema;
  /** @deprecated use `GetAllSettingRelayerResponse$Outbound` instead. */
  export type Outbound = GetAllSettingRelayerResponse$Outbound;
}

export function getAllSettingRelayerResponseToJSON(
  getAllSettingRelayerResponse: GetAllSettingRelayerResponse,
): string {
  return JSON.stringify(
    GetAllSettingRelayerResponse$outboundSchema.parse(
      getAllSettingRelayerResponse,
    ),
  );
}

export function getAllSettingRelayerResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllSettingRelayerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllSettingRelayerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllSettingRelayerResponse' from JSON`,
  );
}
