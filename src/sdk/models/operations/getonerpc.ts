/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetOneRpcRequest = {
  id: string;
  name: string;
};

export type GetOneRpcResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  rpc?: shared.Rpc | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetOneRpcRequest$inboundSchema: z.ZodType<
  GetOneRpcRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
});

/** @internal */
export type GetOneRpcRequest$Outbound = {
  id: string;
  name: string;
};

/** @internal */
export const GetOneRpcRequest$outboundSchema: z.ZodType<
  GetOneRpcRequest$Outbound,
  z.ZodTypeDef,
  GetOneRpcRequest
> = z.object({
  id: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOneRpcRequest$ {
  /** @deprecated use `GetOneRpcRequest$inboundSchema` instead. */
  export const inboundSchema = GetOneRpcRequest$inboundSchema;
  /** @deprecated use `GetOneRpcRequest$outboundSchema` instead. */
  export const outboundSchema = GetOneRpcRequest$outboundSchema;
  /** @deprecated use `GetOneRpcRequest$Outbound` instead. */
  export type Outbound = GetOneRpcRequest$Outbound;
}

export function getOneRpcRequestToJSON(
  getOneRpcRequest: GetOneRpcRequest,
): string {
  return JSON.stringify(
    GetOneRpcRequest$outboundSchema.parse(getOneRpcRequest),
  );
}

export function getOneRpcRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOneRpcRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOneRpcRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOneRpcRequest' from JSON`,
  );
}

/** @internal */
export const GetOneRpcResponse$inboundSchema: z.ZodType<
  GetOneRpcResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Rpc: shared.Rpc$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Rpc": "rpc",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetOneRpcResponse$Outbound = {
  ContentType: string;
  Rpc?: shared.Rpc$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetOneRpcResponse$outboundSchema: z.ZodType<
  GetOneRpcResponse$Outbound,
  z.ZodTypeDef,
  GetOneRpcResponse
> = z.object({
  contentType: z.string(),
  rpc: shared.Rpc$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    rpc: "Rpc",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOneRpcResponse$ {
  /** @deprecated use `GetOneRpcResponse$inboundSchema` instead. */
  export const inboundSchema = GetOneRpcResponse$inboundSchema;
  /** @deprecated use `GetOneRpcResponse$outboundSchema` instead. */
  export const outboundSchema = GetOneRpcResponse$outboundSchema;
  /** @deprecated use `GetOneRpcResponse$Outbound` instead. */
  export type Outbound = GetOneRpcResponse$Outbound;
}

export function getOneRpcResponseToJSON(
  getOneRpcResponse: GetOneRpcResponse,
): string {
  return JSON.stringify(
    GetOneRpcResponse$outboundSchema.parse(getOneRpcResponse),
  );
}

export function getOneRpcResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetOneRpcResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOneRpcResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOneRpcResponse' from JSON`,
  );
}
