/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type Files = {
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
  fileName: string;
};

export type UploadFromFolderPinMetadata = {};

export type UploadFromFolderPinRequestBody = {
  files?: Array<Files> | undefined;
  metadata?: UploadFromFolderPinMetadata | undefined;
};

export type UploadFromFolderPinResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  pin?: shared.Pin | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const Files$inboundSchema: z.ZodType<Files, z.ZodTypeDef, unknown> = z
  .object({
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Uint8Array),
    ]),
    fileName: z.string(),
  });

/** @internal */
export type Files$Outbound = {
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
  fileName: string;
};

/** @internal */
export const Files$outboundSchema: z.ZodType<
  Files$Outbound,
  z.ZodTypeDef,
  Files
> = z.object({
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
  fileName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Files$ {
  /** @deprecated use `Files$inboundSchema` instead. */
  export const inboundSchema = Files$inboundSchema;
  /** @deprecated use `Files$outboundSchema` instead. */
  export const outboundSchema = Files$outboundSchema;
  /** @deprecated use `Files$Outbound` instead. */
  export type Outbound = Files$Outbound;
}

export function filesToJSON(files: Files): string {
  return JSON.stringify(Files$outboundSchema.parse(files));
}

export function filesFromJSON(
  jsonString: string,
): SafeParseResult<Files, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Files$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Files' from JSON`,
  );
}

/** @internal */
export const UploadFromFolderPinMetadata$inboundSchema: z.ZodType<
  UploadFromFolderPinMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UploadFromFolderPinMetadata$Outbound = {};

/** @internal */
export const UploadFromFolderPinMetadata$outboundSchema: z.ZodType<
  UploadFromFolderPinMetadata$Outbound,
  z.ZodTypeDef,
  UploadFromFolderPinMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadFromFolderPinMetadata$ {
  /** @deprecated use `UploadFromFolderPinMetadata$inboundSchema` instead. */
  export const inboundSchema = UploadFromFolderPinMetadata$inboundSchema;
  /** @deprecated use `UploadFromFolderPinMetadata$outboundSchema` instead. */
  export const outboundSchema = UploadFromFolderPinMetadata$outboundSchema;
  /** @deprecated use `UploadFromFolderPinMetadata$Outbound` instead. */
  export type Outbound = UploadFromFolderPinMetadata$Outbound;
}

export function uploadFromFolderPinMetadataToJSON(
  uploadFromFolderPinMetadata: UploadFromFolderPinMetadata,
): string {
  return JSON.stringify(
    UploadFromFolderPinMetadata$outboundSchema.parse(
      uploadFromFolderPinMetadata,
    ),
  );
}

export function uploadFromFolderPinMetadataFromJSON(
  jsonString: string,
): SafeParseResult<UploadFromFolderPinMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadFromFolderPinMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadFromFolderPinMetadata' from JSON`,
  );
}

/** @internal */
export const UploadFromFolderPinRequestBody$inboundSchema: z.ZodType<
  UploadFromFolderPinRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  files: z.array(z.lazy(() => Files$inboundSchema)).optional(),
  metadata: z.lazy(() => UploadFromFolderPinMetadata$inboundSchema).optional(),
});

/** @internal */
export type UploadFromFolderPinRequestBody$Outbound = {
  files?: Array<Files$Outbound> | undefined;
  metadata?: UploadFromFolderPinMetadata$Outbound | undefined;
};

/** @internal */
export const UploadFromFolderPinRequestBody$outboundSchema: z.ZodType<
  UploadFromFolderPinRequestBody$Outbound,
  z.ZodTypeDef,
  UploadFromFolderPinRequestBody
> = z.object({
  files: z.array(z.lazy(() => Files$outboundSchema)).optional(),
  metadata: z.lazy(() => UploadFromFolderPinMetadata$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadFromFolderPinRequestBody$ {
  /** @deprecated use `UploadFromFolderPinRequestBody$inboundSchema` instead. */
  export const inboundSchema = UploadFromFolderPinRequestBody$inboundSchema;
  /** @deprecated use `UploadFromFolderPinRequestBody$outboundSchema` instead. */
  export const outboundSchema = UploadFromFolderPinRequestBody$outboundSchema;
  /** @deprecated use `UploadFromFolderPinRequestBody$Outbound` instead. */
  export type Outbound = UploadFromFolderPinRequestBody$Outbound;
}

export function uploadFromFolderPinRequestBodyToJSON(
  uploadFromFolderPinRequestBody: UploadFromFolderPinRequestBody,
): string {
  return JSON.stringify(
    UploadFromFolderPinRequestBody$outboundSchema.parse(
      uploadFromFolderPinRequestBody,
    ),
  );
}

export function uploadFromFolderPinRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UploadFromFolderPinRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadFromFolderPinRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadFromFolderPinRequestBody' from JSON`,
  );
}

/** @internal */
export const UploadFromFolderPinResponse$inboundSchema: z.ZodType<
  UploadFromFolderPinResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Pin: shared.Pin$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "Pin": "pin",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type UploadFromFolderPinResponse$Outbound = {
  ContentType: string;
  Pin?: shared.Pin$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const UploadFromFolderPinResponse$outboundSchema: z.ZodType<
  UploadFromFolderPinResponse$Outbound,
  z.ZodTypeDef,
  UploadFromFolderPinResponse
> = z.object({
  contentType: z.string(),
  pin: shared.Pin$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    pin: "Pin",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadFromFolderPinResponse$ {
  /** @deprecated use `UploadFromFolderPinResponse$inboundSchema` instead. */
  export const inboundSchema = UploadFromFolderPinResponse$inboundSchema;
  /** @deprecated use `UploadFromFolderPinResponse$outboundSchema` instead. */
  export const outboundSchema = UploadFromFolderPinResponse$outboundSchema;
  /** @deprecated use `UploadFromFolderPinResponse$Outbound` instead. */
  export type Outbound = UploadFromFolderPinResponse$Outbound;
}

export function uploadFromFolderPinResponseToJSON(
  uploadFromFolderPinResponse: UploadFromFolderPinResponse,
): string {
  return JSON.stringify(
    UploadFromFolderPinResponse$outboundSchema.parse(
      uploadFromFolderPinResponse,
    ),
  );
}

export function uploadFromFolderPinResponseFromJSON(
  jsonString: string,
): SafeParseResult<UploadFromFolderPinResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadFromFolderPinResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadFromFolderPinResponse' from JSON`,
  );
}
