/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetAllSmartContractRequest = {
  address?: string | undefined;
  includeAbi?: boolean | undefined;
  includeCompilationDetails?: boolean | undefined;
  /**
   * Number of entities returned on each page. By default this number is set to 100.
   */
  limit?: number | undefined;
  network?: string | undefined;
  /**
   * Number of returned page. By default the returned page is the first.
   */
  page?: number | undefined;
};

export type GetAllSmartContractSmartContractPaginated = {
  items: Array<shared.SmartContract>;
  meta: shared.PaginationData;
};

export type GetAllSmartContractResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  smartContractPaginated?:
    | GetAllSmartContractSmartContractPaginated
    | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetAllSmartContractRequest$inboundSchema: z.ZodType<
  GetAllSmartContractRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.string().optional(),
  includeAbi: z.boolean().optional(),
  includeCompilationDetails: z.boolean().optional(),
  limit: z.number().int().default(100),
  network: z.string().optional(),
  page: z.number().int().optional(),
});

/** @internal */
export type GetAllSmartContractRequest$Outbound = {
  address?: string | undefined;
  includeAbi?: boolean | undefined;
  includeCompilationDetails?: boolean | undefined;
  limit: number;
  network?: string | undefined;
  page?: number | undefined;
};

/** @internal */
export const GetAllSmartContractRequest$outboundSchema: z.ZodType<
  GetAllSmartContractRequest$Outbound,
  z.ZodTypeDef,
  GetAllSmartContractRequest
> = z.object({
  address: z.string().optional(),
  includeAbi: z.boolean().optional(),
  includeCompilationDetails: z.boolean().optional(),
  limit: z.number().int().default(100),
  network: z.string().optional(),
  page: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllSmartContractRequest$ {
  /** @deprecated use `GetAllSmartContractRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllSmartContractRequest$inboundSchema;
  /** @deprecated use `GetAllSmartContractRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllSmartContractRequest$outboundSchema;
  /** @deprecated use `GetAllSmartContractRequest$Outbound` instead. */
  export type Outbound = GetAllSmartContractRequest$Outbound;
}

export function getAllSmartContractRequestToJSON(
  getAllSmartContractRequest: GetAllSmartContractRequest,
): string {
  return JSON.stringify(
    GetAllSmartContractRequest$outboundSchema.parse(getAllSmartContractRequest),
  );
}

export function getAllSmartContractRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllSmartContractRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllSmartContractRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllSmartContractRequest' from JSON`,
  );
}

/** @internal */
export const GetAllSmartContractSmartContractPaginated$inboundSchema: z.ZodType<
  GetAllSmartContractSmartContractPaginated,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(shared.SmartContract$inboundSchema),
  meta: shared.PaginationData$inboundSchema,
});

/** @internal */
export type GetAllSmartContractSmartContractPaginated$Outbound = {
  items: Array<shared.SmartContract$Outbound>;
  meta: shared.PaginationData$Outbound;
};

/** @internal */
export const GetAllSmartContractSmartContractPaginated$outboundSchema:
  z.ZodType<
    GetAllSmartContractSmartContractPaginated$Outbound,
    z.ZodTypeDef,
    GetAllSmartContractSmartContractPaginated
  > = z.object({
    items: z.array(shared.SmartContract$outboundSchema),
    meta: shared.PaginationData$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllSmartContractSmartContractPaginated$ {
  /** @deprecated use `GetAllSmartContractSmartContractPaginated$inboundSchema` instead. */
  export const inboundSchema =
    GetAllSmartContractSmartContractPaginated$inboundSchema;
  /** @deprecated use `GetAllSmartContractSmartContractPaginated$outboundSchema` instead. */
  export const outboundSchema =
    GetAllSmartContractSmartContractPaginated$outboundSchema;
  /** @deprecated use `GetAllSmartContractSmartContractPaginated$Outbound` instead. */
  export type Outbound = GetAllSmartContractSmartContractPaginated$Outbound;
}

export function getAllSmartContractSmartContractPaginatedToJSON(
  getAllSmartContractSmartContractPaginated:
    GetAllSmartContractSmartContractPaginated,
): string {
  return JSON.stringify(
    GetAllSmartContractSmartContractPaginated$outboundSchema.parse(
      getAllSmartContractSmartContractPaginated,
    ),
  );
}

export function getAllSmartContractSmartContractPaginatedFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllSmartContractSmartContractPaginated,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllSmartContractSmartContractPaginated$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllSmartContractSmartContractPaginated' from JSON`,
  );
}

/** @internal */
export const GetAllSmartContractResponse$inboundSchema: z.ZodType<
  GetAllSmartContractResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  SmartContractPaginated: z.lazy(() =>
    GetAllSmartContractSmartContractPaginated$inboundSchema
  ).optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "SmartContractPaginated": "smartContractPaginated",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetAllSmartContractResponse$Outbound = {
  ContentType: string;
  SmartContractPaginated?:
    | GetAllSmartContractSmartContractPaginated$Outbound
    | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetAllSmartContractResponse$outboundSchema: z.ZodType<
  GetAllSmartContractResponse$Outbound,
  z.ZodTypeDef,
  GetAllSmartContractResponse
> = z.object({
  contentType: z.string(),
  smartContractPaginated: z.lazy(() =>
    GetAllSmartContractSmartContractPaginated$outboundSchema
  ).optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    smartContractPaginated: "SmartContractPaginated",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllSmartContractResponse$ {
  /** @deprecated use `GetAllSmartContractResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllSmartContractResponse$inboundSchema;
  /** @deprecated use `GetAllSmartContractResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllSmartContractResponse$outboundSchema;
  /** @deprecated use `GetAllSmartContractResponse$Outbound` instead. */
  export type Outbound = GetAllSmartContractResponse$Outbound;
}

export function getAllSmartContractResponseToJSON(
  getAllSmartContractResponse: GetAllSmartContractResponse,
): string {
  return JSON.stringify(
    GetAllSmartContractResponse$outboundSchema.parse(
      getAllSmartContractResponse,
    ),
  );
}

export function getAllSmartContractResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllSmartContractResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllSmartContractResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllSmartContractResponse' from JSON`,
  );
}
