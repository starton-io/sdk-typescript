/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../shared";
import * as z from "zod";

export enum Category {
    Nft = "NFT",
    Fungible = "FUNGIBLE",
    Other = "OTHER",
    Deprecated = "DEPRECATED",
    Sale = "SALE",
    Tool = "TOOL",
}

export type GetAllSmartContractTemplateRequest = {
    blockchain?: string | undefined;
    category?: Category | undefined;
    includeCompilationDetails?: boolean | undefined;
    includeForm?: boolean | undefined;
    isActivated?: boolean | undefined;
    isAudited?: boolean | undefined;
    /**
     * Number of entities returned on each page. By default this number is set to 100.
     */
    limit?: number | undefined;
    name?: string | undefined;
    /**
     * Number of returned page. By default the returned page is the first.
     */
    page?: number | undefined;
};

export type GetAllSmartContractTemplateSmartContractTemplatePaginated = {
    items: Array<shared.SmartContractTemplate>;
    meta: shared.PaginationData;
};

export type GetAllSmartContractTemplateResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    smartContractTemplatePaginated?:
        | GetAllSmartContractTemplateSmartContractTemplatePaginated
        | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const Category$: z.ZodNativeEnum<typeof Category> = z.nativeEnum(Category);

/** @internal */
export namespace GetAllSmartContractTemplateRequest$ {
    export const inboundSchema: z.ZodType<
        GetAllSmartContractTemplateRequest,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            blockchain: z.string().optional(),
            category: Category$.optional(),
            includeCompilationDetails: z.boolean().optional(),
            includeForm: z.boolean().optional(),
            isActivated: z.boolean().optional(),
            isAudited: z.boolean().optional(),
            limit: z.number().int().optional(),
            name: z.string().optional(),
            page: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.blockchain === undefined ? null : { blockchain: v.blockchain }),
                ...(v.category === undefined ? null : { category: v.category }),
                ...(v.includeCompilationDetails === undefined
                    ? null
                    : { includeCompilationDetails: v.includeCompilationDetails }),
                ...(v.includeForm === undefined ? null : { includeForm: v.includeForm }),
                ...(v.isActivated === undefined ? null : { isActivated: v.isActivated }),
                ...(v.isAudited === undefined ? null : { isAudited: v.isAudited }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.page === undefined ? null : { page: v.page }),
            };
        });

    export type Outbound = {
        blockchain?: string | undefined;
        category?: Category | undefined;
        includeCompilationDetails?: boolean | undefined;
        includeForm?: boolean | undefined;
        isActivated?: boolean | undefined;
        isAudited?: boolean | undefined;
        limit?: number | undefined;
        name?: string | undefined;
        page?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetAllSmartContractTemplateRequest
    > = z
        .object({
            blockchain: z.string().optional(),
            category: Category$.optional(),
            includeCompilationDetails: z.boolean().optional(),
            includeForm: z.boolean().optional(),
            isActivated: z.boolean().optional(),
            isAudited: z.boolean().optional(),
            limit: z.number().int().optional(),
            name: z.string().optional(),
            page: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.blockchain === undefined ? null : { blockchain: v.blockchain }),
                ...(v.category === undefined ? null : { category: v.category }),
                ...(v.includeCompilationDetails === undefined
                    ? null
                    : { includeCompilationDetails: v.includeCompilationDetails }),
                ...(v.includeForm === undefined ? null : { includeForm: v.includeForm }),
                ...(v.isActivated === undefined ? null : { isActivated: v.isActivated }),
                ...(v.isAudited === undefined ? null : { isAudited: v.isAudited }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.page === undefined ? null : { page: v.page }),
            };
        });
}

/** @internal */
export namespace GetAllSmartContractTemplateSmartContractTemplatePaginated$ {
    export const inboundSchema: z.ZodType<
        GetAllSmartContractTemplateSmartContractTemplatePaginated,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            items: z.array(shared.SmartContractTemplate$.inboundSchema),
            meta: shared.PaginationData$.inboundSchema,
        })
        .transform((v) => {
            return {
                items: v.items,
                meta: v.meta,
            };
        });

    export type Outbound = {
        items: Array<shared.SmartContractTemplate$.Outbound>;
        meta: shared.PaginationData$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetAllSmartContractTemplateSmartContractTemplatePaginated
    > = z
        .object({
            items: z.array(shared.SmartContractTemplate$.outboundSchema),
            meta: shared.PaginationData$.outboundSchema,
        })
        .transform((v) => {
            return {
                items: v.items,
                meta: v.meta,
            };
        });
}

/** @internal */
export namespace GetAllSmartContractTemplateResponse$ {
    export const inboundSchema: z.ZodType<
        GetAllSmartContractTemplateResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            ContentType: z.string(),
            SmartContractTemplatePaginated: z
                .lazy(
                    () => GetAllSmartContractTemplateSmartContractTemplatePaginated$.inboundSchema
                )
                .optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.SmartContractTemplatePaginated === undefined
                    ? null
                    : { smartContractTemplatePaginated: v.SmartContractTemplatePaginated }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        SmartContractTemplatePaginated?:
            | GetAllSmartContractTemplateSmartContractTemplatePaginated$.Outbound
            | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetAllSmartContractTemplateResponse
    > = z
        .object({
            contentType: z.string(),
            smartContractTemplatePaginated: z
                .lazy(
                    () => GetAllSmartContractTemplateSmartContractTemplatePaginated$.outboundSchema
                )
                .optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.smartContractTemplatePaginated === undefined
                    ? null
                    : { SmartContractTemplatePaginated: v.smartContractTemplatePaginated }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
