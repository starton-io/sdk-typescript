/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export enum Category {
  Nft = "NFT",
  Fungible = "FUNGIBLE",
  Other = "OTHER",
  Deprecated = "DEPRECATED",
  Sale = "SALE",
  Tool = "TOOL",
}

export type GetAllSmartContractTemplateRequest = {
  blockchain?: string | undefined;
  category?: Category | undefined;
  includeCompilationDetails?: boolean | undefined;
  includeForm?: boolean | undefined;
  isActivated?: boolean | undefined;
  isAudited?: boolean | undefined;
  /**
   * Number of entities returned on each page. By default this number is set to 100.
   */
  limit?: number | undefined;
  name?: string | undefined;
  /**
   * Number of returned page. By default the returned page is the first.
   */
  page?: number | undefined;
};

export type GetAllSmartContractTemplateSmartContractTemplatePaginated = {
  items: Array<shared.SmartContractTemplate>;
  meta: shared.PaginationData;
};

export type GetAllSmartContractTemplateResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  smartContractTemplatePaginated?:
    | GetAllSmartContractTemplateSmartContractTemplatePaginated
    | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const Category$inboundSchema: z.ZodNativeEnum<typeof Category> = z
  .nativeEnum(Category);

/** @internal */
export const Category$outboundSchema: z.ZodNativeEnum<typeof Category> =
  Category$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Category$ {
  /** @deprecated use `Category$inboundSchema` instead. */
  export const inboundSchema = Category$inboundSchema;
  /** @deprecated use `Category$outboundSchema` instead. */
  export const outboundSchema = Category$outboundSchema;
}

/** @internal */
export const GetAllSmartContractTemplateRequest$inboundSchema: z.ZodType<
  GetAllSmartContractTemplateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  blockchain: z.string().optional(),
  category: Category$inboundSchema.optional(),
  includeCompilationDetails: z.boolean().optional(),
  includeForm: z.boolean().optional(),
  isActivated: z.boolean().optional(),
  isAudited: z.boolean().optional(),
  limit: z.number().int().default(100),
  name: z.string().optional(),
  page: z.number().int().optional(),
});

/** @internal */
export type GetAllSmartContractTemplateRequest$Outbound = {
  blockchain?: string | undefined;
  category?: string | undefined;
  includeCompilationDetails?: boolean | undefined;
  includeForm?: boolean | undefined;
  isActivated?: boolean | undefined;
  isAudited?: boolean | undefined;
  limit: number;
  name?: string | undefined;
  page?: number | undefined;
};

/** @internal */
export const GetAllSmartContractTemplateRequest$outboundSchema: z.ZodType<
  GetAllSmartContractTemplateRequest$Outbound,
  z.ZodTypeDef,
  GetAllSmartContractTemplateRequest
> = z.object({
  blockchain: z.string().optional(),
  category: Category$outboundSchema.optional(),
  includeCompilationDetails: z.boolean().optional(),
  includeForm: z.boolean().optional(),
  isActivated: z.boolean().optional(),
  isAudited: z.boolean().optional(),
  limit: z.number().int().default(100),
  name: z.string().optional(),
  page: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllSmartContractTemplateRequest$ {
  /** @deprecated use `GetAllSmartContractTemplateRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllSmartContractTemplateRequest$inboundSchema;
  /** @deprecated use `GetAllSmartContractTemplateRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetAllSmartContractTemplateRequest$outboundSchema;
  /** @deprecated use `GetAllSmartContractTemplateRequest$Outbound` instead. */
  export type Outbound = GetAllSmartContractTemplateRequest$Outbound;
}

export function getAllSmartContractTemplateRequestToJSON(
  getAllSmartContractTemplateRequest: GetAllSmartContractTemplateRequest,
): string {
  return JSON.stringify(
    GetAllSmartContractTemplateRequest$outboundSchema.parse(
      getAllSmartContractTemplateRequest,
    ),
  );
}

export function getAllSmartContractTemplateRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllSmartContractTemplateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllSmartContractTemplateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllSmartContractTemplateRequest' from JSON`,
  );
}

/** @internal */
export const GetAllSmartContractTemplateSmartContractTemplatePaginated$inboundSchema:
  z.ZodType<
    GetAllSmartContractTemplateSmartContractTemplatePaginated,
    z.ZodTypeDef,
    unknown
  > = z.object({
    items: z.array(shared.SmartContractTemplate$inboundSchema),
    meta: shared.PaginationData$inboundSchema,
  });

/** @internal */
export type GetAllSmartContractTemplateSmartContractTemplatePaginated$Outbound =
  {
    items: Array<shared.SmartContractTemplate$Outbound>;
    meta: shared.PaginationData$Outbound;
  };

/** @internal */
export const GetAllSmartContractTemplateSmartContractTemplatePaginated$outboundSchema:
  z.ZodType<
    GetAllSmartContractTemplateSmartContractTemplatePaginated$Outbound,
    z.ZodTypeDef,
    GetAllSmartContractTemplateSmartContractTemplatePaginated
  > = z.object({
    items: z.array(shared.SmartContractTemplate$outboundSchema),
    meta: shared.PaginationData$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllSmartContractTemplateSmartContractTemplatePaginated$ {
  /** @deprecated use `GetAllSmartContractTemplateSmartContractTemplatePaginated$inboundSchema` instead. */
  export const inboundSchema =
    GetAllSmartContractTemplateSmartContractTemplatePaginated$inboundSchema;
  /** @deprecated use `GetAllSmartContractTemplateSmartContractTemplatePaginated$outboundSchema` instead. */
  export const outboundSchema =
    GetAllSmartContractTemplateSmartContractTemplatePaginated$outboundSchema;
  /** @deprecated use `GetAllSmartContractTemplateSmartContractTemplatePaginated$Outbound` instead. */
  export type Outbound =
    GetAllSmartContractTemplateSmartContractTemplatePaginated$Outbound;
}

export function getAllSmartContractTemplateSmartContractTemplatePaginatedToJSON(
  getAllSmartContractTemplateSmartContractTemplatePaginated:
    GetAllSmartContractTemplateSmartContractTemplatePaginated,
): string {
  return JSON.stringify(
    GetAllSmartContractTemplateSmartContractTemplatePaginated$outboundSchema
      .parse(getAllSmartContractTemplateSmartContractTemplatePaginated),
  );
}

export function getAllSmartContractTemplateSmartContractTemplatePaginatedFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllSmartContractTemplateSmartContractTemplatePaginated,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllSmartContractTemplateSmartContractTemplatePaginated$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetAllSmartContractTemplateSmartContractTemplatePaginated' from JSON`,
  );
}

/** @internal */
export const GetAllSmartContractTemplateResponse$inboundSchema: z.ZodType<
  GetAllSmartContractTemplateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  SmartContractTemplatePaginated: z.lazy(() =>
    GetAllSmartContractTemplateSmartContractTemplatePaginated$inboundSchema
  ).optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "SmartContractTemplatePaginated": "smartContractTemplatePaginated",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type GetAllSmartContractTemplateResponse$Outbound = {
  ContentType: string;
  SmartContractTemplatePaginated?:
    | GetAllSmartContractTemplateSmartContractTemplatePaginated$Outbound
    | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const GetAllSmartContractTemplateResponse$outboundSchema: z.ZodType<
  GetAllSmartContractTemplateResponse$Outbound,
  z.ZodTypeDef,
  GetAllSmartContractTemplateResponse
> = z.object({
  contentType: z.string(),
  smartContractTemplatePaginated: z.lazy(() =>
    GetAllSmartContractTemplateSmartContractTemplatePaginated$outboundSchema
  ).optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    smartContractTemplatePaginated: "SmartContractTemplatePaginated",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllSmartContractTemplateResponse$ {
  /** @deprecated use `GetAllSmartContractTemplateResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetAllSmartContractTemplateResponse$inboundSchema;
  /** @deprecated use `GetAllSmartContractTemplateResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetAllSmartContractTemplateResponse$outboundSchema;
  /** @deprecated use `GetAllSmartContractTemplateResponse$Outbound` instead. */
  export type Outbound = GetAllSmartContractTemplateResponse$Outbound;
}

export function getAllSmartContractTemplateResponseToJSON(
  getAllSmartContractTemplateResponse: GetAllSmartContractTemplateResponse,
): string {
  return JSON.stringify(
    GetAllSmartContractTemplateResponse$outboundSchema.parse(
      getAllSmartContractTemplateResponse,
    ),
  );
}

export function getAllSmartContractTemplateResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllSmartContractTemplateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllSmartContractTemplateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllSmartContractTemplateResponse' from JSON`,
  );
}
