/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type DeployFromBytecodeSmartContractRequest = {
    deployFromBytecodeDto: shared.DeployFromBytecodeDto;
    /**
     * Boolean for transaction simulation. Will estimate gas price.
     */
    simulate?: boolean | undefined;
};

export type DeployFromBytecodeSmartContractResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    deploySmartContractResponse?: shared.DeploySmartContractResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const DeployFromBytecodeSmartContractRequest$inboundSchema: z.ZodType<
    DeployFromBytecodeSmartContractRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        DeployFromBytecodeDto: shared.DeployFromBytecodeDto$inboundSchema,
        simulate: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            DeployFromBytecodeDto: "deployFromBytecodeDto",
        });
    });

/** @internal */
export type DeployFromBytecodeSmartContractRequest$Outbound = {
    DeployFromBytecodeDto: shared.DeployFromBytecodeDto$Outbound;
    simulate?: boolean | undefined;
};

/** @internal */
export const DeployFromBytecodeSmartContractRequest$outboundSchema: z.ZodType<
    DeployFromBytecodeSmartContractRequest$Outbound,
    z.ZodTypeDef,
    DeployFromBytecodeSmartContractRequest
> = z
    .object({
        deployFromBytecodeDto: shared.DeployFromBytecodeDto$outboundSchema,
        simulate: z.boolean().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            deployFromBytecodeDto: "DeployFromBytecodeDto",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeployFromBytecodeSmartContractRequest$ {
    /** @deprecated use `DeployFromBytecodeSmartContractRequest$inboundSchema` instead. */
    export const inboundSchema = DeployFromBytecodeSmartContractRequest$inboundSchema;
    /** @deprecated use `DeployFromBytecodeSmartContractRequest$outboundSchema` instead. */
    export const outboundSchema = DeployFromBytecodeSmartContractRequest$outboundSchema;
    /** @deprecated use `DeployFromBytecodeSmartContractRequest$Outbound` instead. */
    export type Outbound = DeployFromBytecodeSmartContractRequest$Outbound;
}

/** @internal */
export const DeployFromBytecodeSmartContractResponse$inboundSchema: z.ZodType<
    DeployFromBytecodeSmartContractResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        DeploySmartContractResponse: shared.DeploySmartContractResponse$inboundSchema.optional(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            DeploySmartContractResponse: "deploySmartContractResponse",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type DeployFromBytecodeSmartContractResponse$Outbound = {
    ContentType: string;
    DeploySmartContractResponse?: shared.DeploySmartContractResponse$Outbound | undefined;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const DeployFromBytecodeSmartContractResponse$outboundSchema: z.ZodType<
    DeployFromBytecodeSmartContractResponse$Outbound,
    z.ZodTypeDef,
    DeployFromBytecodeSmartContractResponse
> = z
    .object({
        contentType: z.string(),
        deploySmartContractResponse: shared.DeploySmartContractResponse$outboundSchema.optional(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            deploySmartContractResponse: "DeploySmartContractResponse",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeployFromBytecodeSmartContractResponse$ {
    /** @deprecated use `DeployFromBytecodeSmartContractResponse$inboundSchema` instead. */
    export const inboundSchema = DeployFromBytecodeSmartContractResponse$inboundSchema;
    /** @deprecated use `DeployFromBytecodeSmartContractResponse$outboundSchema` instead. */
    export const outboundSchema = DeployFromBytecodeSmartContractResponse$outboundSchema;
    /** @deprecated use `DeployFromBytecodeSmartContractResponse$Outbound` instead. */
    export type Outbound = DeployFromBytecodeSmartContractResponse$Outbound;
}
