/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export enum Type {
    MinedTransaction = "MINED_TRANSACTION",
    AddressActivity = "ADDRESS_ACTIVITY",
    AddressReceivedNativeCurrency = "ADDRESS_RECEIVED_NATIVE_CURRENCY",
    AddressSentNativeCurrency = "ADDRESS_SENT_NATIVE_CURRENCY",
    EventTransfer = "EVENT_TRANSFER",
    Erc721EventTransfer = "ERC721_EVENT_TRANSFER",
    Erc1155EventTransferSingle = "ERC1155_EVENT_TRANSFER_SINGLE",
    Erc1155EventTransferBatch = "ERC1155_EVENT_TRANSFER_BATCH",
    EventMint = "EVENT_MINT",
    EventApproval = "EVENT_APPROVAL",
    EventCustom = "EVENT_CUSTOM",
}

export type GetAllWatcherRequest = {
    address?: string | undefined;
    confirmationsBlocks?: number | undefined;
    /**
     * Number of entities returned on each page. By default this number is set to 100.
     */
    limit?: number | undefined;
    name?: string | undefined;
    network?: string | undefined;
    /**
     * Number of returned page. By default the returned page is the first.
     */
    page?: number | undefined;
    paused?: boolean | undefined;
    type?: Type | undefined;
    webhookUrl?: string | undefined;
};

export type GetAllWatcherWatcherPaginated = {
    items: Array<shared.Watcher>;
    meta: shared.PaginationData;
};

export type GetAllWatcherResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    watcherPaginated?: GetAllWatcherWatcherPaginated | undefined;
};

/** @internal */
export namespace Type$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(Type);
    export const outboundSchema: z.ZodNativeEnum<typeof Type> = inboundSchema;
}

/** @internal */
export namespace GetAllWatcherRequest$ {
    export const inboundSchema: z.ZodType<GetAllWatcherRequest, z.ZodTypeDef, unknown> = z.object({
        address: z.string().optional(),
        confirmationsBlocks: z.number().optional(),
        limit: z.number().int().optional(),
        name: z.string().optional(),
        network: z.string().optional(),
        page: z.number().int().optional(),
        paused: z.boolean().optional(),
        type: Type$.inboundSchema.optional(),
        webhookUrl: z.string().optional(),
    });

    export type Outbound = {
        address?: string | undefined;
        confirmationsBlocks?: number | undefined;
        limit?: number | undefined;
        name?: string | undefined;
        network?: string | undefined;
        page?: number | undefined;
        paused?: boolean | undefined;
        type?: string | undefined;
        webhookUrl?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllWatcherRequest> = z.object(
        {
            address: z.string().optional(),
            confirmationsBlocks: z.number().optional(),
            limit: z.number().int().optional(),
            name: z.string().optional(),
            network: z.string().optional(),
            page: z.number().int().optional(),
            paused: z.boolean().optional(),
            type: Type$.outboundSchema.optional(),
            webhookUrl: z.string().optional(),
        }
    );
}

/** @internal */
export namespace GetAllWatcherWatcherPaginated$ {
    export const inboundSchema: z.ZodType<GetAllWatcherWatcherPaginated, z.ZodTypeDef, unknown> =
        z.object({
            items: z.array(shared.Watcher$.inboundSchema),
            meta: shared.PaginationData$.inboundSchema,
        });

    export type Outbound = {
        items: Array<shared.Watcher$.Outbound>;
        meta: shared.PaginationData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllWatcherWatcherPaginated> =
        z.object({
            items: z.array(shared.Watcher$.outboundSchema),
            meta: shared.PaginationData$.outboundSchema,
        });
}

/** @internal */
export namespace GetAllWatcherResponse$ {
    export const inboundSchema: z.ZodType<GetAllWatcherResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            WatcherPaginated: z.lazy(() => GetAllWatcherWatcherPaginated$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
                WatcherPaginated: "watcherPaginated",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        WatcherPaginated?: GetAllWatcherWatcherPaginated$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllWatcherResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            watcherPaginated: z
                .lazy(() => GetAllWatcherWatcherPaginated$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
                watcherPaginated: "WatcherPaginated",
            });
        });
}
