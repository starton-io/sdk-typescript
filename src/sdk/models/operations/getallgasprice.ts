/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type GetAllGasPriceRequest = {
    /**
     * The blockchain network you are checking gas prices on.
     */
    network: string;
};

export type GetAllGasPriceResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    gasPrices?: shared.GasPrices | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const GetAllGasPriceRequest$inboundSchema: z.ZodType<
    GetAllGasPriceRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    network: z.string(),
});

/** @internal */
export type GetAllGasPriceRequest$Outbound = {
    network: string;
};

/** @internal */
export const GetAllGasPriceRequest$outboundSchema: z.ZodType<
    GetAllGasPriceRequest$Outbound,
    z.ZodTypeDef,
    GetAllGasPriceRequest
> = z.object({
    network: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllGasPriceRequest$ {
    /** @deprecated use `GetAllGasPriceRequest$inboundSchema` instead. */
    export const inboundSchema = GetAllGasPriceRequest$inboundSchema;
    /** @deprecated use `GetAllGasPriceRequest$outboundSchema` instead. */
    export const outboundSchema = GetAllGasPriceRequest$outboundSchema;
    /** @deprecated use `GetAllGasPriceRequest$Outbound` instead. */
    export type Outbound = GetAllGasPriceRequest$Outbound;
}

/** @internal */
export const GetAllGasPriceResponse$inboundSchema: z.ZodType<
    GetAllGasPriceResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        GasPrices: shared.GasPrices$inboundSchema.optional(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            GasPrices: "gasPrices",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type GetAllGasPriceResponse$Outbound = {
    ContentType: string;
    GasPrices?: shared.GasPrices$Outbound | undefined;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const GetAllGasPriceResponse$outboundSchema: z.ZodType<
    GetAllGasPriceResponse$Outbound,
    z.ZodTypeDef,
    GetAllGasPriceResponse
> = z
    .object({
        contentType: z.string(),
        gasPrices: shared.GasPrices$outboundSchema.optional(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            gasPrices: "GasPrices",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllGasPriceResponse$ {
    /** @deprecated use `GetAllGasPriceResponse$inboundSchema` instead. */
    export const inboundSchema = GetAllGasPriceResponse$inboundSchema;
    /** @deprecated use `GetAllGasPriceResponse$outboundSchema` instead. */
    export const outboundSchema = GetAllGasPriceResponse$outboundSchema;
    /** @deprecated use `GetAllGasPriceResponse$Outbound` instead. */
    export type Outbound = GetAllGasPriceResponse$Outbound;
}
