/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type GetOneWatcherRequest = {
  /**
   * The unique identifier of the watcher to retrieve.
   */
  id: string;
};

export type GetOneWatcherResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  watcher?: shared.Watcher | undefined;
};

/** @internal */
export const GetOneWatcherRequest$inboundSchema: z.ZodType<
  GetOneWatcherRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetOneWatcherRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetOneWatcherRequest$outboundSchema: z.ZodType<
  GetOneWatcherRequest$Outbound,
  z.ZodTypeDef,
  GetOneWatcherRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOneWatcherRequest$ {
  /** @deprecated use `GetOneWatcherRequest$inboundSchema` instead. */
  export const inboundSchema = GetOneWatcherRequest$inboundSchema;
  /** @deprecated use `GetOneWatcherRequest$outboundSchema` instead. */
  export const outboundSchema = GetOneWatcherRequest$outboundSchema;
  /** @deprecated use `GetOneWatcherRequest$Outbound` instead. */
  export type Outbound = GetOneWatcherRequest$Outbound;
}

export function getOneWatcherRequestToJSON(
  getOneWatcherRequest: GetOneWatcherRequest,
): string {
  return JSON.stringify(
    GetOneWatcherRequest$outboundSchema.parse(getOneWatcherRequest),
  );
}

export function getOneWatcherRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOneWatcherRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOneWatcherRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOneWatcherRequest' from JSON`,
  );
}

/** @internal */
export const GetOneWatcherResponse$inboundSchema: z.ZodType<
  GetOneWatcherResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  Watcher: shared.Watcher$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "Watcher": "watcher",
  });
});

/** @internal */
export type GetOneWatcherResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  Watcher?: shared.Watcher$Outbound | undefined;
};

/** @internal */
export const GetOneWatcherResponse$outboundSchema: z.ZodType<
  GetOneWatcherResponse$Outbound,
  z.ZodTypeDef,
  GetOneWatcherResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  watcher: shared.Watcher$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    watcher: "Watcher",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOneWatcherResponse$ {
  /** @deprecated use `GetOneWatcherResponse$inboundSchema` instead. */
  export const inboundSchema = GetOneWatcherResponse$inboundSchema;
  /** @deprecated use `GetOneWatcherResponse$outboundSchema` instead. */
  export const outboundSchema = GetOneWatcherResponse$outboundSchema;
  /** @deprecated use `GetOneWatcherResponse$Outbound` instead. */
  export type Outbound = GetOneWatcherResponse$Outbound;
}

export function getOneWatcherResponseToJSON(
  getOneWatcherResponse: GetOneWatcherResponse,
): string {
  return JSON.stringify(
    GetOneWatcherResponse$outboundSchema.parse(getOneWatcherResponse),
  );
}

export function getOneWatcherResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetOneWatcherResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOneWatcherResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOneWatcherResponse' from JSON`,
  );
}
