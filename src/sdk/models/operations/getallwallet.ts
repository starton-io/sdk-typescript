/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as shared from "../shared";
import * as z from "zod";

export type GetAllWalletRequest = {
    /**
     * Number of entities returned on each page. By default this number is set to 100.
     */
    limit?: number | undefined;
    name?: string | undefined;
    /**
     * Number of returned page. By default the returned page is the first.
     */
    page?: number | undefined;
};

export type GetAllWalletWalletPaginated = {
    items: Array<shared.Wallet>;
    meta: shared.PaginationData;
};

export type GetAllWalletResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    walletPaginated?: GetAllWalletWalletPaginated | undefined;
};

/** @internal */
export namespace GetAllWalletRequest$ {
    export const inboundSchema: z.ZodType<GetAllWalletRequest, z.ZodTypeDef, unknown> = z.object({
        limit: z.number().int().optional(),
        name: z.string().optional(),
        page: z.number().int().optional(),
    });

    export type Outbound = {
        limit?: number | undefined;
        name?: string | undefined;
        page?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllWalletRequest> = z.object({
        limit: z.number().int().optional(),
        name: z.string().optional(),
        page: z.number().int().optional(),
    });
}

/** @internal */
export namespace GetAllWalletWalletPaginated$ {
    export const inboundSchema: z.ZodType<GetAllWalletWalletPaginated, z.ZodTypeDef, unknown> =
        z.object({
            items: z.array(shared.Wallet$.inboundSchema),
            meta: shared.PaginationData$.inboundSchema,
        });

    export type Outbound = {
        items: Array<shared.Wallet$.Outbound>;
        meta: shared.PaginationData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllWalletWalletPaginated> =
        z.object({
            items: z.array(shared.Wallet$.outboundSchema),
            meta: shared.PaginationData$.outboundSchema,
        });
}

/** @internal */
export namespace GetAllWalletResponse$ {
    export const inboundSchema: z.ZodType<GetAllWalletResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            WalletPaginated: z.lazy(() => GetAllWalletWalletPaginated$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
                WalletPaginated: "walletPaginated",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        WalletPaginated?: GetAllWalletWalletPaginated$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllWalletResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            walletPaginated: z.lazy(() => GetAllWalletWalletPaginated$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
                walletPaginated: "WalletPaginated",
            });
        });
}
