/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type GetAllWalletRequest = {
    /**
     * Number of entities returned on each page. By default this number is set to 100.
     */
    limit?: number | undefined;
    name?: string | undefined;
    /**
     * Number of returned page. By default the returned page is the first.
     */
    page?: number | undefined;
};

export type GetAllWalletWalletPaginated = {
    items: Array<shared.Wallet>;
    meta: shared.PaginationData;
};

export type GetAllWalletResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    walletPaginated?: GetAllWalletWalletPaginated | undefined;
};

/** @internal */
export namespace GetAllWalletRequest$ {
    export type Inbound = {
        limit?: number | undefined;
        name?: string | undefined;
        page?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetAllWalletRequest, z.ZodTypeDef, Inbound> = z
        .object({
            limit: z.number().int().optional(),
            name: z.string().optional(),
            page: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.page === undefined ? null : { page: v.page }),
            };
        });

    export type Outbound = {
        limit?: number | undefined;
        name?: string | undefined;
        page?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllWalletRequest> = z
        .object({
            limit: z.number().int().optional(),
            name: z.string().optional(),
            page: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.page === undefined ? null : { page: v.page }),
            };
        });
}

/** @internal */
export namespace GetAllWalletWalletPaginated$ {
    export type Inbound = {
        items: Array<shared.Wallet$.Inbound>;
        meta: shared.PaginationData$.Inbound;
    };

    export const inboundSchema: z.ZodType<GetAllWalletWalletPaginated, z.ZodTypeDef, Inbound> = z
        .object({
            items: z.array(shared.Wallet$.inboundSchema),
            meta: shared.PaginationData$.inboundSchema,
        })
        .transform((v) => {
            return {
                items: v.items,
                meta: v.meta,
            };
        });

    export type Outbound = {
        items: Array<shared.Wallet$.Outbound>;
        meta: shared.PaginationData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllWalletWalletPaginated> = z
        .object({
            items: z.array(shared.Wallet$.outboundSchema),
            meta: shared.PaginationData$.outboundSchema,
        })
        .transform((v) => {
            return {
                items: v.items,
                meta: v.meta,
            };
        });
}

/** @internal */
export namespace GetAllWalletResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        WalletPaginated?: GetAllWalletWalletPaginated$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetAllWalletResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            WalletPaginated: z.lazy(() => GetAllWalletWalletPaginated$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.WalletPaginated === undefined
                    ? null
                    : { walletPaginated: v.WalletPaginated }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        WalletPaginated?: GetAllWalletWalletPaginated$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllWalletResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            walletPaginated: z.lazy(() => GetAllWalletWalletPaginated$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.walletPaginated === undefined
                    ? null
                    : { WalletPaginated: v.walletPaginated }),
            };
        });
}
