/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type DeleteRpcRequest = {
    id: string;
    name?: any | undefined;
};

export type DeleteRpcResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    number?: number | undefined;
};

/** @internal */
export const DeleteRpcRequest$inboundSchema: z.ZodType<DeleteRpcRequest, z.ZodTypeDef, unknown> =
    z.object({
        id: z.string(),
        name: z.any().optional(),
    });

/** @internal */
export type DeleteRpcRequest$Outbound = {
    id: string;
    name?: any | undefined;
};

/** @internal */
export const DeleteRpcRequest$outboundSchema: z.ZodType<
    DeleteRpcRequest$Outbound,
    z.ZodTypeDef,
    DeleteRpcRequest
> = z.object({
    id: z.string(),
    name: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteRpcRequest$ {
    /** @deprecated use `DeleteRpcRequest$inboundSchema` instead. */
    export const inboundSchema = DeleteRpcRequest$inboundSchema;
    /** @deprecated use `DeleteRpcRequest$outboundSchema` instead. */
    export const outboundSchema = DeleteRpcRequest$outboundSchema;
    /** @deprecated use `DeleteRpcRequest$Outbound` instead. */
    export type Outbound = DeleteRpcRequest$Outbound;
}

/** @internal */
export const DeleteRpcResponse$inboundSchema: z.ZodType<DeleteRpcResponse, z.ZodTypeDef, unknown> =
    z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            number: z.number().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

/** @internal */
export type DeleteRpcResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    number?: number | undefined;
};

/** @internal */
export const DeleteRpcResponse$outboundSchema: z.ZodType<
    DeleteRpcResponse$Outbound,
    z.ZodTypeDef,
    DeleteRpcResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
        number: z.number().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteRpcResponse$ {
    /** @deprecated use `DeleteRpcResponse$inboundSchema` instead. */
    export const inboundSchema = DeleteRpcResponse$inboundSchema;
    /** @deprecated use `DeleteRpcResponse$outboundSchema` instead. */
    export const outboundSchema = DeleteRpcResponse$outboundSchema;
    /** @deprecated use `DeleteRpcResponse$Outbound` instead. */
    export type Outbound = DeleteRpcResponse$Outbound;
}
