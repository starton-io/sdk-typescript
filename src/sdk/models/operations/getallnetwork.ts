/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as shared from "../../../sdk/models/shared";
import { z } from "zod";

export type GetAllNetworkRequest = {
    id?: string | undefined;
    /**
     * Number of entities returned on each page. By default this number is set to 100.
     */
    limit?: number | undefined;
    /**
     * Number of returned page. By default the returned page is the first.
     */
    page?: number | undefined;
    testnet?: boolean | undefined;
};

export type GetAllNetworkNetworkPaginated = {
    items: Array<shared.Network>;
    meta: shared.PaginationData;
};

export type GetAllNetworkResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    networkPaginated?: GetAllNetworkNetworkPaginated | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetAllNetworkRequest$ {
    export type Inbound = {
        id?: string | undefined;
        limit?: number | undefined;
        page?: number | undefined;
        testnet?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetAllNetworkRequest, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            limit: z.number().int().optional(),
            page: z.number().int().optional(),
            testnet: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.page === undefined ? null : { page: v.page }),
                ...(v.testnet === undefined ? null : { testnet: v.testnet }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        limit?: number | undefined;
        page?: number | undefined;
        testnet?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllNetworkRequest> = z
        .object({
            id: z.string().optional(),
            limit: z.number().int().optional(),
            page: z.number().int().optional(),
            testnet: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.page === undefined ? null : { page: v.page }),
                ...(v.testnet === undefined ? null : { testnet: v.testnet }),
            };
        });
}

/** @internal */
export namespace GetAllNetworkNetworkPaginated$ {
    export type Inbound = {
        items: Array<shared.Network$.Inbound>;
        meta: shared.PaginationData$.Inbound;
    };

    export const inboundSchema: z.ZodType<GetAllNetworkNetworkPaginated, z.ZodTypeDef, Inbound> = z
        .object({
            items: z.array(shared.Network$.inboundSchema),
            meta: shared.PaginationData$.inboundSchema,
        })
        .transform((v) => {
            return {
                items: v.items,
                meta: v.meta,
            };
        });

    export type Outbound = {
        items: Array<shared.Network$.Outbound>;
        meta: shared.PaginationData$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllNetworkNetworkPaginated> =
        z
            .object({
                items: z.array(shared.Network$.outboundSchema),
                meta: shared.PaginationData$.outboundSchema,
            })
            .transform((v) => {
                return {
                    items: v.items,
                    meta: v.meta,
                };
            });
}

/** @internal */
export namespace GetAllNetworkResponse$ {
    export type Inbound = {
        ContentType: string;
        NetworkPaginated?: GetAllNetworkNetworkPaginated$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GetAllNetworkResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            NetworkPaginated: z.lazy(() => GetAllNetworkNetworkPaginated$.inboundSchema).optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                ...(v.NetworkPaginated === undefined
                    ? null
                    : { networkPaginated: v.NetworkPaginated }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            };
        });

    export type Outbound = {
        ContentType: string;
        NetworkPaginated?: GetAllNetworkNetworkPaginated$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllNetworkResponse> = z
        .object({
            contentType: z.string(),
            networkPaginated: z
                .lazy(() => GetAllNetworkNetworkPaginated$.outboundSchema)
                .optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                ...(v.networkPaginated === undefined
                    ? null
                    : { NetworkPaginated: v.networkPaginated }),
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
            };
        });
}
