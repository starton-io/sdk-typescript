/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type ResyncNoncesWalletRequest = {
  /**
   * the address of the wallet on which you need to resynchronize nonces
   */
  address: string;
  /**
   * the network on which you need to resynchronize a nonce
   */
  network: string;
};

export type ResyncNoncesWalletResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  resyncNonce?: shared.ResyncNonce | undefined;
};

/** @internal */
export const ResyncNoncesWalletRequest$inboundSchema: z.ZodType<
  ResyncNoncesWalletRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.string(),
  network: z.string(),
});

/** @internal */
export type ResyncNoncesWalletRequest$Outbound = {
  address: string;
  network: string;
};

/** @internal */
export const ResyncNoncesWalletRequest$outboundSchema: z.ZodType<
  ResyncNoncesWalletRequest$Outbound,
  z.ZodTypeDef,
  ResyncNoncesWalletRequest
> = z.object({
  address: z.string(),
  network: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResyncNoncesWalletRequest$ {
  /** @deprecated use `ResyncNoncesWalletRequest$inboundSchema` instead. */
  export const inboundSchema = ResyncNoncesWalletRequest$inboundSchema;
  /** @deprecated use `ResyncNoncesWalletRequest$outboundSchema` instead. */
  export const outboundSchema = ResyncNoncesWalletRequest$outboundSchema;
  /** @deprecated use `ResyncNoncesWalletRequest$Outbound` instead. */
  export type Outbound = ResyncNoncesWalletRequest$Outbound;
}

export function resyncNoncesWalletRequestToJSON(
  resyncNoncesWalletRequest: ResyncNoncesWalletRequest,
): string {
  return JSON.stringify(
    ResyncNoncesWalletRequest$outboundSchema.parse(resyncNoncesWalletRequest),
  );
}

export function resyncNoncesWalletRequestFromJSON(
  jsonString: string,
): SafeParseResult<ResyncNoncesWalletRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResyncNoncesWalletRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResyncNoncesWalletRequest' from JSON`,
  );
}

/** @internal */
export const ResyncNoncesWalletResponse$inboundSchema: z.ZodType<
  ResyncNoncesWalletResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  resyncNonce: shared.ResyncNonce$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type ResyncNoncesWalletResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  resyncNonce?: shared.ResyncNonce$Outbound | undefined;
};

/** @internal */
export const ResyncNoncesWalletResponse$outboundSchema: z.ZodType<
  ResyncNoncesWalletResponse$Outbound,
  z.ZodTypeDef,
  ResyncNoncesWalletResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  resyncNonce: shared.ResyncNonce$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResyncNoncesWalletResponse$ {
  /** @deprecated use `ResyncNoncesWalletResponse$inboundSchema` instead. */
  export const inboundSchema = ResyncNoncesWalletResponse$inboundSchema;
  /** @deprecated use `ResyncNoncesWalletResponse$outboundSchema` instead. */
  export const outboundSchema = ResyncNoncesWalletResponse$outboundSchema;
  /** @deprecated use `ResyncNoncesWalletResponse$Outbound` instead. */
  export type Outbound = ResyncNoncesWalletResponse$Outbound;
}

export function resyncNoncesWalletResponseToJSON(
  resyncNoncesWalletResponse: ResyncNoncesWalletResponse,
): string {
  return JSON.stringify(
    ResyncNoncesWalletResponse$outboundSchema.parse(resyncNoncesWalletResponse),
  );
}

export function resyncNoncesWalletResponseFromJSON(
  jsonString: string,
): SafeParseResult<ResyncNoncesWalletResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResyncNoncesWalletResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResyncNoncesWalletResponse' from JSON`,
  );
}
