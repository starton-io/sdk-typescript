/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as shared from "../shared/index.js";

export type UpdateSettingRelayerRequest = {
  updateSettingRelayerDto: shared.UpdateSettingRelayerDto;
  /**
   * The blockchain network for which the Relayer settings should be updated.
   */
  network: string;
};

export type UpdateSettingRelayerResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  settingRelayer?: shared.SettingRelayer | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const UpdateSettingRelayerRequest$inboundSchema: z.ZodType<
  UpdateSettingRelayerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  UpdateSettingRelayerDto: shared.UpdateSettingRelayerDto$inboundSchema,
  network: z.string(),
}).transform((v) => {
  return remap$(v, {
    "UpdateSettingRelayerDto": "updateSettingRelayerDto",
  });
});

/** @internal */
export type UpdateSettingRelayerRequest$Outbound = {
  UpdateSettingRelayerDto: shared.UpdateSettingRelayerDto$Outbound;
  network: string;
};

/** @internal */
export const UpdateSettingRelayerRequest$outboundSchema: z.ZodType<
  UpdateSettingRelayerRequest$Outbound,
  z.ZodTypeDef,
  UpdateSettingRelayerRequest
> = z.object({
  updateSettingRelayerDto: shared.UpdateSettingRelayerDto$outboundSchema,
  network: z.string(),
}).transform((v) => {
  return remap$(v, {
    updateSettingRelayerDto: "UpdateSettingRelayerDto",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSettingRelayerRequest$ {
  /** @deprecated use `UpdateSettingRelayerRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSettingRelayerRequest$inboundSchema;
  /** @deprecated use `UpdateSettingRelayerRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSettingRelayerRequest$outboundSchema;
  /** @deprecated use `UpdateSettingRelayerRequest$Outbound` instead. */
  export type Outbound = UpdateSettingRelayerRequest$Outbound;
}

export function updateSettingRelayerRequestToJSON(
  updateSettingRelayerRequest: UpdateSettingRelayerRequest,
): string {
  return JSON.stringify(
    UpdateSettingRelayerRequest$outboundSchema.parse(
      updateSettingRelayerRequest,
    ),
  );
}

export function updateSettingRelayerRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSettingRelayerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSettingRelayerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSettingRelayerRequest' from JSON`,
  );
}

/** @internal */
export const UpdateSettingRelayerResponse$inboundSchema: z.ZodType<
  UpdateSettingRelayerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  SettingRelayer: shared.SettingRelayer$inboundSchema.optional(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "SettingRelayer": "settingRelayer",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type UpdateSettingRelayerResponse$Outbound = {
  ContentType: string;
  SettingRelayer?: shared.SettingRelayer$Outbound | undefined;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const UpdateSettingRelayerResponse$outboundSchema: z.ZodType<
  UpdateSettingRelayerResponse$Outbound,
  z.ZodTypeDef,
  UpdateSettingRelayerResponse
> = z.object({
  contentType: z.string(),
  settingRelayer: shared.SettingRelayer$outboundSchema.optional(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    settingRelayer: "SettingRelayer",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSettingRelayerResponse$ {
  /** @deprecated use `UpdateSettingRelayerResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateSettingRelayerResponse$inboundSchema;
  /** @deprecated use `UpdateSettingRelayerResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateSettingRelayerResponse$outboundSchema;
  /** @deprecated use `UpdateSettingRelayerResponse$Outbound` instead. */
  export type Outbound = UpdateSettingRelayerResponse$Outbound;
}

export function updateSettingRelayerResponseToJSON(
  updateSettingRelayerResponse: UpdateSettingRelayerResponse,
): string {
  return JSON.stringify(
    UpdateSettingRelayerResponse$outboundSchema.parse(
      updateSettingRelayerResponse,
    ),
  );
}

export function updateSettingRelayerResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSettingRelayerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSettingRelayerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSettingRelayerResponse' from JSON`,
  );
}
