/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type GetAvailableFunctionsSmartContractRequest = {
    /**
     * Smart contract address.
     */
    address: string;
    /**
     * EVM starton supported network.
     */
    network: string;
};

export type GetAvailableFunctionsSmartContractResponse = {
    availableFunctions?: shared.AvailableFunctions | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetAvailableFunctionsSmartContractRequest$ {
    export const inboundSchema: z.ZodType<
        GetAvailableFunctionsSmartContractRequest,
        z.ZodTypeDef,
        unknown
    > = z.object({
        address: z.string(),
        network: z.string(),
    });

    export type Outbound = {
        address: string;
        network: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetAvailableFunctionsSmartContractRequest
    > = z.object({
        address: z.string(),
        network: z.string(),
    });
}

/** @internal */
export namespace GetAvailableFunctionsSmartContractResponse$ {
    export const inboundSchema: z.ZodType<
        GetAvailableFunctionsSmartContractResponse,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            AvailableFunctions: shared.AvailableFunctions$.inboundSchema.optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return remap$(v, {
                AvailableFunctions: "availableFunctions",
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        AvailableFunctions?: shared.AvailableFunctions$.Outbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetAvailableFunctionsSmartContractResponse
    > = z
        .object({
            availableFunctions: shared.AvailableFunctions$.outboundSchema.optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return remap$(v, {
                availableFunctions: "AvailableFunctions",
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
