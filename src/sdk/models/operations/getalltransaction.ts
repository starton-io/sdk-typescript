/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as shared from "../shared";
import * as z from "zod";

export type GetAllTransactionRequest = {
    /**
     * The wallet used to sign the transactions (filter).
     */
    from?: string | undefined;
    /**
     * Retrieves transactions executed after a specified date.
     */
    fromDate?: Date | undefined;
    /**
     * Number of entities returned on each page. By default this number is set to 100.
     */
    limit?: number | undefined;
    /**
     * Specifies the network on which the transactions are deployed (filter). See <a href='https://docs.starton.com/docs/overview#supported-networks'>supported networks</a>.
     */
    network?: string | undefined;
    /**
     * Number of returned page. By default the returned page is the first.
     */
    page?: number | undefined;
    /**
     * The address receiver of transactions, which can be a smart contract (filter).
     */
    to?: string | undefined;
    /**
     * The hash of a specific transaction (filter).
     */
    transactionHash?: string | undefined;
};

export type GetAllTransactionTransactionPaginated = {
    items: Array<shared.Transaction>;
    meta: shared.PaginationData;
};

export type GetAllTransactionResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    transactionPaginated?: GetAllTransactionTransactionPaginated | undefined;
};

/** @internal */
export namespace GetAllTransactionRequest$ {
    export const inboundSchema: z.ZodType<GetAllTransactionRequest, z.ZodTypeDef, unknown> =
        z.object({
            from: z.string().optional(),
            fromDate: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            limit: z.number().int().optional(),
            network: z.string().optional(),
            page: z.number().int().optional(),
            to: z.string().optional(),
            transactionHash: z.string().optional(),
        });

    export type Outbound = {
        from?: string | undefined;
        fromDate?: string | undefined;
        limit?: number | undefined;
        network?: string | undefined;
        page?: number | undefined;
        to?: string | undefined;
        transactionHash?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllTransactionRequest> =
        z.object({
            from: z.string().optional(),
            fromDate: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            limit: z.number().int().optional(),
            network: z.string().optional(),
            page: z.number().int().optional(),
            to: z.string().optional(),
            transactionHash: z.string().optional(),
        });
}

/** @internal */
export namespace GetAllTransactionTransactionPaginated$ {
    export const inboundSchema: z.ZodType<
        GetAllTransactionTransactionPaginated,
        z.ZodTypeDef,
        unknown
    > = z.object({
        items: z.array(shared.Transaction$.inboundSchema),
        meta: shared.PaginationData$.inboundSchema,
    });

    export type Outbound = {
        items: Array<shared.Transaction$.Outbound>;
        meta: shared.PaginationData$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetAllTransactionTransactionPaginated
    > = z.object({
        items: z.array(shared.Transaction$.outboundSchema),
        meta: shared.PaginationData$.outboundSchema,
    });
}

/** @internal */
export namespace GetAllTransactionResponse$ {
    export const inboundSchema: z.ZodType<GetAllTransactionResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            TransactionPaginated: z
                .lazy(() => GetAllTransactionTransactionPaginated$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
                TransactionPaginated: "transactionPaginated",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        TransactionPaginated?: GetAllTransactionTransactionPaginated$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAllTransactionResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            transactionPaginated: z
                .lazy(() => GetAllTransactionTransactionPaginated$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
                transactionPaginated: "TransactionPaginated",
            });
        });
}
