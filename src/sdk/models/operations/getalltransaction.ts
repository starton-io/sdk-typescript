/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class GetAllTransactionRequest extends SpeakeasyBase {
    /**
     * The wallet used to sign the transactions (filter).
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=from" })
    from?: string;

    /**
     * Retrieves transactions executed after a specified date.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=fromDate" })
    fromDate?: Date;

    /**
     * Number of entities returned on each page. By default this number is set to 100.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=limit" })
    limit?: number;

    /**
     * Specifies the network on which the transactions are deployed (filter). See <a href='https://docs.starton.com/docs/overview#supported-networks'>supported networks</a>.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=network" })
    network?: string;

    /**
     * Number of returned page. By default the returned page is the first.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=page" })
    page?: number;

    /**
     * The address receiver of transactions, which can be a smart contract (filter).
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=to" })
    to?: string;

    /**
     * The hash of a specific transaction (filter).
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=transactionHash" })
    transactionHash?: string;
}

export class GetAllTransactionTransactionPaginated extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: shared.Transaction })
    @Expose({ name: "items" })
    @Type(() => shared.Transaction)
    items: shared.Transaction[];

    @SpeakeasyMetadata()
    @Expose({ name: "meta" })
    @Type(() => shared.PaginationData)
    meta: shared.PaginationData;
}

export class GetAllTransactionResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    @SpeakeasyMetadata()
    transactionPaginated?: GetAllTransactionTransactionPaginated;

    next: () => Promise<GetAllTransactionResponse | null>;
}
