/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export enum Status {
    Queued = "queued",
    Pinning = "pinning",
    Pinned = "pinned",
    Failed = "failed",
    Deleted = "deleted",
}

export type GetAllPinRequest = {
    cid?: string | undefined;
    includeDirectoryContent?: boolean | undefined;
    /**
     * Number of entities returned on each page. By default this number is set to 100.
     */
    limit?: number | undefined;
    name?: string | undefined;
    /**
     * Number of returned page. By default the returned page is the first.
     */
    page?: number | undefined;
    status?: Status | undefined;
};

export type GetAllPinPinPaginated = {
    items: Array<shared.Pin>;
    meta: shared.PaginationData;
};

export type GetAllPinResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    pinPaginated?: GetAllPinPinPaginated | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z.nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> = Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
    /** @deprecated use `Status$inboundSchema` instead. */
    export const inboundSchema = Status$inboundSchema;
    /** @deprecated use `Status$outboundSchema` instead. */
    export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const GetAllPinRequest$inboundSchema: z.ZodType<GetAllPinRequest, z.ZodTypeDef, unknown> =
    z.object({
        cid: z.string().optional(),
        includeDirectoryContent: z.boolean().optional(),
        limit: z.number().int().default(100),
        name: z.string().optional(),
        page: z.number().int().optional(),
        status: Status$inboundSchema.optional(),
    });

/** @internal */
export type GetAllPinRequest$Outbound = {
    cid?: string | undefined;
    includeDirectoryContent?: boolean | undefined;
    limit: number;
    name?: string | undefined;
    page?: number | undefined;
    status?: string | undefined;
};

/** @internal */
export const GetAllPinRequest$outboundSchema: z.ZodType<
    GetAllPinRequest$Outbound,
    z.ZodTypeDef,
    GetAllPinRequest
> = z.object({
    cid: z.string().optional(),
    includeDirectoryContent: z.boolean().optional(),
    limit: z.number().int().default(100),
    name: z.string().optional(),
    page: z.number().int().optional(),
    status: Status$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPinRequest$ {
    /** @deprecated use `GetAllPinRequest$inboundSchema` instead. */
    export const inboundSchema = GetAllPinRequest$inboundSchema;
    /** @deprecated use `GetAllPinRequest$outboundSchema` instead. */
    export const outboundSchema = GetAllPinRequest$outboundSchema;
    /** @deprecated use `GetAllPinRequest$Outbound` instead. */
    export type Outbound = GetAllPinRequest$Outbound;
}

/** @internal */
export const GetAllPinPinPaginated$inboundSchema: z.ZodType<
    GetAllPinPinPaginated,
    z.ZodTypeDef,
    unknown
> = z.object({
    items: z.array(shared.Pin$inboundSchema),
    meta: shared.PaginationData$inboundSchema,
});

/** @internal */
export type GetAllPinPinPaginated$Outbound = {
    items: Array<shared.Pin$Outbound>;
    meta: shared.PaginationData$Outbound;
};

/** @internal */
export const GetAllPinPinPaginated$outboundSchema: z.ZodType<
    GetAllPinPinPaginated$Outbound,
    z.ZodTypeDef,
    GetAllPinPinPaginated
> = z.object({
    items: z.array(shared.Pin$outboundSchema),
    meta: shared.PaginationData$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPinPinPaginated$ {
    /** @deprecated use `GetAllPinPinPaginated$inboundSchema` instead. */
    export const inboundSchema = GetAllPinPinPaginated$inboundSchema;
    /** @deprecated use `GetAllPinPinPaginated$outboundSchema` instead. */
    export const outboundSchema = GetAllPinPinPaginated$outboundSchema;
    /** @deprecated use `GetAllPinPinPaginated$Outbound` instead. */
    export type Outbound = GetAllPinPinPaginated$Outbound;
}

/** @internal */
export const GetAllPinResponse$inboundSchema: z.ZodType<GetAllPinResponse, z.ZodTypeDef, unknown> =
    z
        .object({
            ContentType: z.string(),
            PinPaginated: z.lazy(() => GetAllPinPinPaginated$inboundSchema).optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                PinPaginated: "pinPaginated",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

/** @internal */
export type GetAllPinResponse$Outbound = {
    ContentType: string;
    PinPaginated?: GetAllPinPinPaginated$Outbound | undefined;
    StatusCode: number;
    RawResponse: never;
};

/** @internal */
export const GetAllPinResponse$outboundSchema: z.ZodType<
    GetAllPinResponse$Outbound,
    z.ZodTypeDef,
    GetAllPinResponse
> = z
    .object({
        contentType: z.string(),
        pinPaginated: z.lazy(() => GetAllPinPinPaginated$outboundSchema).optional(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            pinPaginated: "PinPaginated",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllPinResponse$ {
    /** @deprecated use `GetAllPinResponse$inboundSchema` instead. */
    export const inboundSchema = GetAllPinResponse$inboundSchema;
    /** @deprecated use `GetAllPinResponse$outboundSchema` instead. */
    export const outboundSchema = GetAllPinResponse$outboundSchema;
    /** @deprecated use `GetAllPinResponse$Outbound` instead. */
    export type Outbound = GetAllPinResponse$Outbound;
}
