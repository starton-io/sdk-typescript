/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives";
import * as shared from "../shared";
import * as z from "zod";

export type SignMessageWalletRequest = {
    signMessageDto: shared.SignMessageDto;
    address: string;
};

export type SignMessageWalletResponseBody = {};

export type SignMessageWalletResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    object?: SignMessageWalletResponseBody | undefined;
};

/** @internal */
export namespace SignMessageWalletRequest$ {
    export const inboundSchema: z.ZodType<SignMessageWalletRequest, z.ZodTypeDef, unknown> = z
        .object({
            SignMessageDto: shared.SignMessageDto$.inboundSchema,
            address: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                SignMessageDto: "signMessageDto",
            });
        });

    export type Outbound = {
        SignMessageDto: shared.SignMessageDto$.Outbound;
        address: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SignMessageWalletRequest> = z
        .object({
            signMessageDto: shared.SignMessageDto$.outboundSchema,
            address: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                signMessageDto: "SignMessageDto",
            });
        });
}

/** @internal */
export namespace SignMessageWalletResponseBody$ {
    export const inboundSchema: z.ZodType<SignMessageWalletResponseBody, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SignMessageWalletResponseBody> =
        z.object({});
}

/** @internal */
export namespace SignMessageWalletResponse$ {
    export const inboundSchema: z.ZodType<SignMessageWalletResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => SignMessageWalletResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: SignMessageWalletResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SignMessageWalletResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => SignMessageWalletResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
