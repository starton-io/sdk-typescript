/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as shared from "../shared/index.js";
import * as z from "zod";

export type UpdateSmartContractRequest = {
    updateSmartContractDto: shared.UpdateSmartContractDto;
    /**
     * Smart contract address.
     */
    address: string;
    /**
     * EVM starton supported network.
     */
    network: string;
};

export type UpdateSmartContractResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    smartContract?: shared.SmartContract | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace UpdateSmartContractRequest$ {
    export const inboundSchema: z.ZodType<UpdateSmartContractRequest, z.ZodTypeDef, unknown> = z
        .object({
            UpdateSmartContractDto: shared.UpdateSmartContractDto$.inboundSchema,
            address: z.string(),
            network: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                UpdateSmartContractDto: "updateSmartContractDto",
            });
        });

    export type Outbound = {
        UpdateSmartContractDto: shared.UpdateSmartContractDto$.Outbound;
        address: string;
        network: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateSmartContractRequest> = z
        .object({
            updateSmartContractDto: shared.UpdateSmartContractDto$.outboundSchema,
            address: z.string(),
            network: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                updateSmartContractDto: "UpdateSmartContractDto",
            });
        });
}

/** @internal */
export namespace UpdateSmartContractResponse$ {
    export const inboundSchema: z.ZodType<UpdateSmartContractResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            SmartContract: shared.SmartContract$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                SmartContract: "smartContract",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        SmartContract?: shared.SmartContract$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateSmartContractResponse> = z
        .object({
            contentType: z.string(),
            smartContract: shared.SmartContract$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                smartContract: "SmartContract",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
            });
        });
}
