/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  ExplorerApiDto,
  ExplorerApiDto$inboundSchema,
  ExplorerApiDto$Outbound,
  ExplorerApiDto$outboundSchema,
} from "./explorerapidto.js";
import {
  GasPriceRecommendationDto,
  GasPriceRecommendationDto$inboundSchema,
  GasPriceRecommendationDto$Outbound,
  GasPriceRecommendationDto$outboundSchema,
} from "./gaspricerecommendationdto.js";

export type UpdateNetworkDto = {
  blockchain?: string | undefined;
  chainId?: number | undefined;
  confirmationBlocks?: number | undefined;
  decimal?: number | undefined;
  displayName?: string | undefined;
  eip1159?: boolean | undefined;
  enableExternalWallet?: boolean | undefined;
  enableListener?: boolean | undefined;
  enableRelayer?: boolean | undefined;
  explorerApi?: ExplorerApiDto | undefined;
  explorerUrl?: string | undefined;
  faucetUrl?: string | undefined;
  gasPriceRecommendation?: GasPriceRecommendationDto | undefined;
  loadbalancerUrl?: string | undefined;
  logo?: string | undefined;
  name?: string | undefined;
  symbol?: string | undefined;
  tenantNames?: Array<string> | undefined;
  testnet?: boolean | undefined;
  verifyBlockIntegrity?: boolean | undefined;
  verifyTxIntegrity?: boolean | undefined;
};

/** @internal */
export const UpdateNetworkDto$inboundSchema: z.ZodType<
  UpdateNetworkDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  blockchain: z.string().optional(),
  chainId: z.number().optional(),
  confirmationBlocks: z.number().optional(),
  decimal: z.number().optional(),
  displayName: z.string().optional(),
  eip1159: z.boolean().optional(),
  enableExternalWallet: z.boolean().optional(),
  enableListener: z.boolean().optional(),
  enableRelayer: z.boolean().optional(),
  explorerApi: ExplorerApiDto$inboundSchema.optional(),
  explorerUrl: z.string().optional(),
  faucetUrl: z.string().optional(),
  gasPriceRecommendation: GasPriceRecommendationDto$inboundSchema.optional(),
  loadbalancerUrl: z.string().optional(),
  logo: z.string().optional(),
  name: z.string().optional(),
  symbol: z.string().optional(),
  tenantNames: z.array(z.string()).optional(),
  testnet: z.boolean().optional(),
  verifyBlockIntegrity: z.boolean().optional(),
  verifyTxIntegrity: z.boolean().optional(),
});

/** @internal */
export type UpdateNetworkDto$Outbound = {
  blockchain?: string | undefined;
  chainId?: number | undefined;
  confirmationBlocks?: number | undefined;
  decimal?: number | undefined;
  displayName?: string | undefined;
  eip1159?: boolean | undefined;
  enableExternalWallet?: boolean | undefined;
  enableListener?: boolean | undefined;
  enableRelayer?: boolean | undefined;
  explorerApi?: ExplorerApiDto$Outbound | undefined;
  explorerUrl?: string | undefined;
  faucetUrl?: string | undefined;
  gasPriceRecommendation?: GasPriceRecommendationDto$Outbound | undefined;
  loadbalancerUrl?: string | undefined;
  logo?: string | undefined;
  name?: string | undefined;
  symbol?: string | undefined;
  tenantNames?: Array<string> | undefined;
  testnet?: boolean | undefined;
  verifyBlockIntegrity?: boolean | undefined;
  verifyTxIntegrity?: boolean | undefined;
};

/** @internal */
export const UpdateNetworkDto$outboundSchema: z.ZodType<
  UpdateNetworkDto$Outbound,
  z.ZodTypeDef,
  UpdateNetworkDto
> = z.object({
  blockchain: z.string().optional(),
  chainId: z.number().optional(),
  confirmationBlocks: z.number().optional(),
  decimal: z.number().optional(),
  displayName: z.string().optional(),
  eip1159: z.boolean().optional(),
  enableExternalWallet: z.boolean().optional(),
  enableListener: z.boolean().optional(),
  enableRelayer: z.boolean().optional(),
  explorerApi: ExplorerApiDto$outboundSchema.optional(),
  explorerUrl: z.string().optional(),
  faucetUrl: z.string().optional(),
  gasPriceRecommendation: GasPriceRecommendationDto$outboundSchema.optional(),
  loadbalancerUrl: z.string().optional(),
  logo: z.string().optional(),
  name: z.string().optional(),
  symbol: z.string().optional(),
  tenantNames: z.array(z.string()).optional(),
  testnet: z.boolean().optional(),
  verifyBlockIntegrity: z.boolean().optional(),
  verifyTxIntegrity: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateNetworkDto$ {
  /** @deprecated use `UpdateNetworkDto$inboundSchema` instead. */
  export const inboundSchema = UpdateNetworkDto$inboundSchema;
  /** @deprecated use `UpdateNetworkDto$outboundSchema` instead. */
  export const outboundSchema = UpdateNetworkDto$outboundSchema;
  /** @deprecated use `UpdateNetworkDto$Outbound` instead. */
  export type Outbound = UpdateNetworkDto$Outbound;
}
