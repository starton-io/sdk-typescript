/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateWatcherDtoMetadata = {};

export type UpdateWatcherDto = {
  confirmationsBlocks?: number | undefined;
  description?: string | null | undefined;
  metadata?: UpdateWatcherDtoMetadata | undefined;
  name?: string | null | undefined;
  paused?: boolean | undefined;
  webhookUrl?: string | undefined;
};

/** @internal */
export const UpdateWatcherDtoMetadata$inboundSchema: z.ZodType<
  UpdateWatcherDtoMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateWatcherDtoMetadata$Outbound = {};

/** @internal */
export const UpdateWatcherDtoMetadata$outboundSchema: z.ZodType<
  UpdateWatcherDtoMetadata$Outbound,
  z.ZodTypeDef,
  UpdateWatcherDtoMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWatcherDtoMetadata$ {
  /** @deprecated use `UpdateWatcherDtoMetadata$inboundSchema` instead. */
  export const inboundSchema = UpdateWatcherDtoMetadata$inboundSchema;
  /** @deprecated use `UpdateWatcherDtoMetadata$outboundSchema` instead. */
  export const outboundSchema = UpdateWatcherDtoMetadata$outboundSchema;
  /** @deprecated use `UpdateWatcherDtoMetadata$Outbound` instead. */
  export type Outbound = UpdateWatcherDtoMetadata$Outbound;
}

export function updateWatcherDtoMetadataToJSON(
  updateWatcherDtoMetadata: UpdateWatcherDtoMetadata,
): string {
  return JSON.stringify(
    UpdateWatcherDtoMetadata$outboundSchema.parse(updateWatcherDtoMetadata),
  );
}

export function updateWatcherDtoMetadataFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWatcherDtoMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWatcherDtoMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWatcherDtoMetadata' from JSON`,
  );
}

/** @internal */
export const UpdateWatcherDto$inboundSchema: z.ZodType<
  UpdateWatcherDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  confirmationsBlocks: z.number().optional(),
  description: z.nullable(z.string()).optional(),
  metadata: z.lazy(() => UpdateWatcherDtoMetadata$inboundSchema).optional(),
  name: z.nullable(z.string()).optional(),
  paused: z.boolean().optional(),
  webhookUrl: z.string().optional(),
});

/** @internal */
export type UpdateWatcherDto$Outbound = {
  confirmationsBlocks?: number | undefined;
  description?: string | null | undefined;
  metadata?: UpdateWatcherDtoMetadata$Outbound | undefined;
  name?: string | null | undefined;
  paused?: boolean | undefined;
  webhookUrl?: string | undefined;
};

/** @internal */
export const UpdateWatcherDto$outboundSchema: z.ZodType<
  UpdateWatcherDto$Outbound,
  z.ZodTypeDef,
  UpdateWatcherDto
> = z.object({
  confirmationsBlocks: z.number().optional(),
  description: z.nullable(z.string()).optional(),
  metadata: z.lazy(() => UpdateWatcherDtoMetadata$outboundSchema).optional(),
  name: z.nullable(z.string()).optional(),
  paused: z.boolean().optional(),
  webhookUrl: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWatcherDto$ {
  /** @deprecated use `UpdateWatcherDto$inboundSchema` instead. */
  export const inboundSchema = UpdateWatcherDto$inboundSchema;
  /** @deprecated use `UpdateWatcherDto$outboundSchema` instead. */
  export const outboundSchema = UpdateWatcherDto$outboundSchema;
  /** @deprecated use `UpdateWatcherDto$Outbound` instead. */
  export type Outbound = UpdateWatcherDto$Outbound;
}

export function updateWatcherDtoToJSON(
  updateWatcherDto: UpdateWatcherDto,
): string {
  return JSON.stringify(
    UpdateWatcherDto$outboundSchema.parse(updateWatcherDto),
  );
}

export function updateWatcherDtoFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWatcherDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWatcherDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWatcherDto' from JSON`,
  );
}
