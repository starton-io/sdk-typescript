/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type TransactionLogContext = {};

export enum TransactionLogType {
    Unsigned = "UNSIGNED",
    ErrorTx = "ERROR_TX",
    ErrorPublish = "ERROR_PUBLISH",
    Published = "PUBLISHED",
    ReceivedByStarton = "RECEIVED_BY_STARTON",
    CreatedByStarton = "CREATED_BY_STARTON",
    CouldNotEstimateGasPrice = "COULD_NOT_ESTIMATE_GAS_PRICE",
    CouldNotIncreaseGasPrice = "COULD_NOT_INCREASE_GAS_PRICE",
    GasPriceEstimated = "GAS_PRICE_ESTIMATED",
    InvalidGasPrice = "INVALID_GAS_PRICE",
    ReplacementGasPriceUnderpriced = "REPLACEMENT_GAS_PRICE_UNDERPRICED",
    CouldNotEstimateGasLimit = "COULD_NOT_ESTIMATE_GAS_LIMIT",
    GasLimitEstimated = "GAS_LIMIT_ESTIMATED",
    ExecutionWillFail = "EXECUTION_WILL_FAIL",
    InvalidArgument = "INVALID_ARGUMENT",
    InsufficientFunds = "INSUFFICIENT_FUNDS",
    InsufficientFundsAfterBroadcast = "INSUFFICIENT_FUNDS_AFTER_BROADCAST",
    CouldNotAssignNonce = "COULD_NOT_ASSIGN_NONCE",
    CouldNotUnstuckNonce = "COULD_NOT_UNSTUCK_NONCE",
    NonceAssigned = "NONCE_ASSIGNED",
    NonceExpired = "NONCE_EXPIRED",
    CouldNotSign = "COULD_NOT_SIGN",
    Signed = "SIGNED",
    SentToMempool = "SENT_TO_MEMPOOL",
    CouldNotBroadcast = "COULD_NOT_BROADCAST",
    AlreadyKnown = "ALREADY_KNOWN",
    Mined = "MINED",
    Confirmed = "CONFIRMED",
    Replaced = "REPLACED",
    Failed = "FAILED",
    MonitoringInProgress = "MONITORING_IN_PROGRESS",
    StuckByPreviousTransaction = "STUCK_BY_PREVIOUS_TRANSACTION",
    MaxGasPriceReach = "MAX_GAS_PRICE_REACH",
    GasPriceIncreased = "GAS_PRICE_INCREASED",
    NewTransactionHash = "NEW_TRANSACTION_HASH",
    Unknown = "UNKNOWN",
    MonitoringInterrupted = "MONITORING_INTERRUPTED",
}

export type TransactionLog = {
    context?: TransactionLogContext | undefined;
    createdAt: string;
    message: string;
    type: TransactionLogType;
};

/** @internal */
export namespace TransactionLogContext$ {
    export const inboundSchema: z.ZodType<TransactionLogContext, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionLogContext> =
        z.object({});
}

/** @internal */
export namespace TransactionLogType$ {
    export const inboundSchema = z.nativeEnum(TransactionLogType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TransactionLog$ {
    export const inboundSchema: z.ZodType<TransactionLog, z.ZodTypeDef, unknown> = z
        .object({
            context: z.lazy(() => TransactionLogContext$.inboundSchema).optional(),
            createdAt: z.string(),
            message: z.string(),
            type: TransactionLogType$.inboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.context === undefined ? null : { context: v.context }),
                createdAt: v.createdAt,
                message: v.message,
                type: v.type,
            };
        });

    export type Outbound = {
        context?: TransactionLogContext$.Outbound | undefined;
        createdAt: string;
        message: string;
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TransactionLog> = z
        .object({
            context: z.lazy(() => TransactionLogContext$.outboundSchema).optional(),
            createdAt: z.string(),
            message: z.string(),
            type: TransactionLogType$.outboundSchema,
        })
        .transform((v) => {
            return {
                ...(v.context === undefined ? null : { context: v.context }),
                createdAt: v.createdAt,
                message: v.message,
                type: v.type,
            };
        });
}
