/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import {
    ExplorerApiDto,
    ExplorerApiDto$inboundSchema,
    ExplorerApiDto$Outbound,
    ExplorerApiDto$outboundSchema,
} from "./explorerapidto.js";
import {
    GasPriceRecommendationDto,
    GasPriceRecommendationDto$inboundSchema,
    GasPriceRecommendationDto$Outbound,
    GasPriceRecommendationDto$outboundSchema,
} from "./gaspricerecommendationdto.js";
import * as z from "zod";

export type CreateNetworkDto = {
    blockchain: string;
    chainId: number;
    confirmationBlocks: number;
    decimal?: number | undefined;
    displayName: string;
    eip1159?: boolean | undefined;
    enableExternalWallet?: boolean | undefined;
    enableListener?: boolean | undefined;
    enableRelayer?: boolean | undefined;
    explorerApi?: ExplorerApiDto | undefined;
    explorerUrl?: string | undefined;
    faucetUrl?: string | undefined;
    gasPriceRecommendation?: GasPriceRecommendationDto | undefined;
    loadbalancerUrl?: string | undefined;
    logo: string;
    name: string;
    symbol: string;
    tenantHostnames?: Array<string> | undefined;
    testnet?: boolean | undefined;
    verifyBlockIntegrity?: boolean | undefined;
    verifyTxIntegrity?: boolean | undefined;
};

/** @internal */
export const CreateNetworkDto$inboundSchema: z.ZodType<CreateNetworkDto, z.ZodTypeDef, unknown> =
    z.object({
        blockchain: z.string(),
        chainId: z.number(),
        confirmationBlocks: z.number(),
        decimal: z.number().optional(),
        displayName: z.string(),
        eip1159: z.boolean().optional(),
        enableExternalWallet: z.boolean().optional(),
        enableListener: z.boolean().optional(),
        enableRelayer: z.boolean().optional(),
        explorerApi: ExplorerApiDto$inboundSchema.optional(),
        explorerUrl: z.string().optional(),
        faucetUrl: z.string().optional(),
        gasPriceRecommendation: GasPriceRecommendationDto$inboundSchema.optional(),
        loadbalancerUrl: z.string().optional(),
        logo: z.string(),
        name: z.string(),
        symbol: z.string(),
        tenantHostnames: z.array(z.string()).optional(),
        testnet: z.boolean().optional(),
        verifyBlockIntegrity: z.boolean().optional(),
        verifyTxIntegrity: z.boolean().optional(),
    });

/** @internal */
export type CreateNetworkDto$Outbound = {
    blockchain: string;
    chainId: number;
    confirmationBlocks: number;
    decimal?: number | undefined;
    displayName: string;
    eip1159?: boolean | undefined;
    enableExternalWallet?: boolean | undefined;
    enableListener?: boolean | undefined;
    enableRelayer?: boolean | undefined;
    explorerApi?: ExplorerApiDto$Outbound | undefined;
    explorerUrl?: string | undefined;
    faucetUrl?: string | undefined;
    gasPriceRecommendation?: GasPriceRecommendationDto$Outbound | undefined;
    loadbalancerUrl?: string | undefined;
    logo: string;
    name: string;
    symbol: string;
    tenantHostnames?: Array<string> | undefined;
    testnet?: boolean | undefined;
    verifyBlockIntegrity?: boolean | undefined;
    verifyTxIntegrity?: boolean | undefined;
};

/** @internal */
export const CreateNetworkDto$outboundSchema: z.ZodType<
    CreateNetworkDto$Outbound,
    z.ZodTypeDef,
    CreateNetworkDto
> = z.object({
    blockchain: z.string(),
    chainId: z.number(),
    confirmationBlocks: z.number(),
    decimal: z.number().optional(),
    displayName: z.string(),
    eip1159: z.boolean().optional(),
    enableExternalWallet: z.boolean().optional(),
    enableListener: z.boolean().optional(),
    enableRelayer: z.boolean().optional(),
    explorerApi: ExplorerApiDto$outboundSchema.optional(),
    explorerUrl: z.string().optional(),
    faucetUrl: z.string().optional(),
    gasPriceRecommendation: GasPriceRecommendationDto$outboundSchema.optional(),
    loadbalancerUrl: z.string().optional(),
    logo: z.string(),
    name: z.string(),
    symbol: z.string(),
    tenantHostnames: z.array(z.string()).optional(),
    testnet: z.boolean().optional(),
    verifyBlockIntegrity: z.boolean().optional(),
    verifyTxIntegrity: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateNetworkDto$ {
    /** @deprecated use `CreateNetworkDto$inboundSchema` instead. */
    export const inboundSchema = CreateNetworkDto$inboundSchema;
    /** @deprecated use `CreateNetworkDto$outboundSchema` instead. */
    export const outboundSchema = CreateNetworkDto$outboundSchema;
    /** @deprecated use `CreateNetworkDto$Outbound` instead. */
    export type Outbound = CreateNetworkDto$Outbound;
}
