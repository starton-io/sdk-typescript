/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EncodeSmartContractResponse = {
  data?: string | null | undefined;
};

/** @internal */
export const EncodeSmartContractResponse$inboundSchema: z.ZodType<
  EncodeSmartContractResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.nullable(z.string()).optional(),
});

/** @internal */
export type EncodeSmartContractResponse$Outbound = {
  data?: string | null | undefined;
};

/** @internal */
export const EncodeSmartContractResponse$outboundSchema: z.ZodType<
  EncodeSmartContractResponse$Outbound,
  z.ZodTypeDef,
  EncodeSmartContractResponse
> = z.object({
  data: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EncodeSmartContractResponse$ {
  /** @deprecated use `EncodeSmartContractResponse$inboundSchema` instead. */
  export const inboundSchema = EncodeSmartContractResponse$inboundSchema;
  /** @deprecated use `EncodeSmartContractResponse$outboundSchema` instead. */
  export const outboundSchema = EncodeSmartContractResponse$outboundSchema;
  /** @deprecated use `EncodeSmartContractResponse$Outbound` instead. */
  export type Outbound = EncodeSmartContractResponse$Outbound;
}

export function encodeSmartContractResponseToJSON(
  encodeSmartContractResponse: EncodeSmartContractResponse,
): string {
  return JSON.stringify(
    EncodeSmartContractResponse$outboundSchema.parse(
      encodeSmartContractResponse,
    ),
  );
}

export function encodeSmartContractResponseFromJSON(
  jsonString: string,
): SafeParseResult<EncodeSmartContractResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EncodeSmartContractResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EncodeSmartContractResponse' from JSON`,
  );
}
