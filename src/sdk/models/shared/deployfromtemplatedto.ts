/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CustomGasDto, CustomGasDto$ } from "./customgasdto";
import * as z from "zod";

export type DeployFromTemplateDto3 = {};

export type DeployFromTemplateDtoParams = DeployFromTemplateDto3 | string | number | boolean;

/**
 * Gas Speed, by default on average, could be set at custom.
 */
export enum DeployFromTemplateDtoSpeed {
    Low = "low",
    Average = "average",
    Fast = "fast",
    Fastest = "fastest",
    Custom = "custom",
}

export type DeployFromTemplateDto = {
    /**
     * Custom gas settings for deploy transaction, will be used if speed set to custom
     */
    customGas?: CustomGasDto | undefined;
    /**
     * Contract description on Starton database (off-chain).
     */
    description?: string | undefined;
    /**
     * Optional gas limit
     */
    gasLimit?: string | undefined;
    /**
     * Contract name on Starton database (off-chain).
     */
    name: string;
    /**
     * Network of the smart contract you want to deploy.
     */
    network: string;
    /**
     * Nonce manual setting, if nonce referenced, Starton relayer will not automaticly assign nonce.
     */
    nonce?: number | undefined;
    /**
     * Smart contract constructor parameters.
     */
    params: Array<DeployFromTemplateDto3 | string | number | boolean>;
    /**
     * Signer wallet of the transaction.
     */
    signerWallet: string;
    /**
     * Gas Speed, by default on average, could be set at custom.
     */
    speed?: DeployFromTemplateDtoSpeed | undefined;
    /**
     * Starton Library template to deploy.
     */
    templateId: string;
    /**
     * If you want to put value in your smart contract deployment (Example: payable constructor)
     */
    value?: string | undefined;
};

/** @internal */
export namespace DeployFromTemplateDto3$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<DeployFromTemplateDto3, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeployFromTemplateDto3> =
        z.object({});
}

/** @internal */
export namespace DeployFromTemplateDtoParams$ {
    export type Inbound = DeployFromTemplateDto3$.Inbound | string | number | boolean;

    export type Outbound = DeployFromTemplateDto3$.Outbound | string | number | boolean;
    export const inboundSchema: z.ZodType<DeployFromTemplateDtoParams, z.ZodTypeDef, Inbound> =
        z.union([
            z.lazy(() => DeployFromTemplateDto3$.inboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeployFromTemplateDtoParams> =
        z.union([
            z.lazy(() => DeployFromTemplateDto3$.outboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);
}

/** @internal */
export const DeployFromTemplateDtoSpeed$ = z.nativeEnum(DeployFromTemplateDtoSpeed);

/** @internal */
export namespace DeployFromTemplateDto$ {
    export type Inbound = {
        customGas?: CustomGasDto$.Inbound | undefined;
        description?: string | undefined;
        gasLimit?: string | undefined;
        name: string;
        network: string;
        nonce?: number | undefined;
        params: Array<DeployFromTemplateDto3$.Inbound | string | number | boolean>;
        signerWallet: string;
        speed?: DeployFromTemplateDtoSpeed | undefined;
        templateId: string;
        value?: string | undefined;
    };

    export const inboundSchema: z.ZodType<DeployFromTemplateDto, z.ZodTypeDef, Inbound> = z
        .object({
            customGas: CustomGasDto$.inboundSchema.optional(),
            description: z.string().optional(),
            gasLimit: z.string().optional(),
            name: z.string(),
            network: z.string(),
            nonce: z.number().optional(),
            params: z.array(
                z.union([
                    z.lazy(() => DeployFromTemplateDto3$.inboundSchema),
                    z.string(),
                    z.number(),
                    z.boolean(),
                ])
            ),
            signerWallet: z.string(),
            speed: DeployFromTemplateDtoSpeed$.optional(),
            templateId: z.string(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.customGas === undefined ? null : { customGas: v.customGas }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.gasLimit === undefined ? null : { gasLimit: v.gasLimit }),
                name: v.name,
                network: v.network,
                ...(v.nonce === undefined ? null : { nonce: v.nonce }),
                params: v.params,
                signerWallet: v.signerWallet,
                ...(v.speed === undefined ? null : { speed: v.speed }),
                templateId: v.templateId,
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        customGas?: CustomGasDto$.Outbound | undefined;
        description?: string | undefined;
        gasLimit?: string | undefined;
        name: string;
        network: string;
        nonce?: number | undefined;
        params: Array<DeployFromTemplateDto3$.Outbound | string | number | boolean>;
        signerWallet: string;
        speed?: DeployFromTemplateDtoSpeed | undefined;
        templateId: string;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeployFromTemplateDto> = z
        .object({
            customGas: CustomGasDto$.outboundSchema.optional(),
            description: z.string().optional(),
            gasLimit: z.string().optional(),
            name: z.string(),
            network: z.string(),
            nonce: z.number().optional(),
            params: z.array(
                z.union([
                    z.lazy(() => DeployFromTemplateDto3$.outboundSchema),
                    z.string(),
                    z.number(),
                    z.boolean(),
                ])
            ),
            signerWallet: z.string(),
            speed: DeployFromTemplateDtoSpeed$.optional(),
            templateId: z.string(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.customGas === undefined ? null : { customGas: v.customGas }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.gasLimit === undefined ? null : { gasLimit: v.gasLimit }),
                name: v.name,
                network: v.network,
                ...(v.nonce === undefined ? null : { nonce: v.nonce }),
                params: v.params,
                signerWallet: v.signerWallet,
                ...(v.speed === undefined ? null : { speed: v.speed }),
                templateId: v.templateId,
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}
