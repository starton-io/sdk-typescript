/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CustomGasDto,
  CustomGasDto$inboundSchema,
  CustomGasDto$Outbound,
  CustomGasDto$outboundSchema,
} from "./customgasdto.js";

export type DeployFromTemplateDtoMetadata = {};

export type DeployFromTemplateDto3 = {};

export type DeployFromTemplateDtoParams =
  | DeployFromTemplateDto3
  | string
  | number
  | boolean;

/**
 * Gas Speed, by default on average, could be set at custom.
 */
export enum DeployFromTemplateDtoSpeed {
  Low = "low",
  Average = "average",
  Fast = "fast",
  Fastest = "fastest",
  Custom = "custom",
}

export enum DeployFromTemplateDtoDeployMethod {
  Web3 = "web3",
  Kms = "kms",
}

export enum DeployFromTemplateDtoVersion {
  One = "1",
}

export type DeployFromTemplateDtoUiData = {
  chainId?: number | undefined;
  deployMethod: DeployFromTemplateDtoDeployMethod;
  deployType?: string | undefined;
  imported: boolean;
  version: DeployFromTemplateDtoVersion;
};

export type DeployFromTemplateDto = {
  /**
   * Custom gas settings for deploy transaction, will be used if speed set to custom
   */
  customGas?: CustomGasDto | undefined;
  /**
   * Contract description on Starton database (off-chain).
   */
  description?: string | undefined;
  /**
   * Optional gas limit
   */
  gasLimit?: string | undefined;
  metadata?: DeployFromTemplateDtoMetadata | undefined;
  /**
   * Contract name on Starton database (off-chain).
   */
  name: string;
  /**
   * Network of the smart contract you want to deploy.
   */
  network: string;
  /**
   * Nonce manual setting, if nonce referenced, Starton relayer will not automaticly assign nonce.
   */
  nonce?: number | undefined;
  /**
   * Smart contract constructor parameters.
   */
  params: Array<DeployFromTemplateDto3 | string | number | boolean>;
  /**
   * Signer wallet of the transaction.
   */
  signerWallet: string;
  /**
   * Gas Speed, by default on average, could be set at custom.
   */
  speed?: DeployFromTemplateDtoSpeed | undefined;
  /**
   * Starton Library template to deploy.
   */
  templateId: string;
  uiData?: DeployFromTemplateDtoUiData | null | undefined;
  /**
   * If you want to put value in your smart contract deployment (Example: payable constructor)
   */
  value?: string | undefined;
};

/** @internal */
export const DeployFromTemplateDtoMetadata$inboundSchema: z.ZodType<
  DeployFromTemplateDtoMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type DeployFromTemplateDtoMetadata$Outbound = {};

/** @internal */
export const DeployFromTemplateDtoMetadata$outboundSchema: z.ZodType<
  DeployFromTemplateDtoMetadata$Outbound,
  z.ZodTypeDef,
  DeployFromTemplateDtoMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeployFromTemplateDtoMetadata$ {
  /** @deprecated use `DeployFromTemplateDtoMetadata$inboundSchema` instead. */
  export const inboundSchema = DeployFromTemplateDtoMetadata$inboundSchema;
  /** @deprecated use `DeployFromTemplateDtoMetadata$outboundSchema` instead. */
  export const outboundSchema = DeployFromTemplateDtoMetadata$outboundSchema;
  /** @deprecated use `DeployFromTemplateDtoMetadata$Outbound` instead. */
  export type Outbound = DeployFromTemplateDtoMetadata$Outbound;
}

export function deployFromTemplateDtoMetadataToJSON(
  deployFromTemplateDtoMetadata: DeployFromTemplateDtoMetadata,
): string {
  return JSON.stringify(
    DeployFromTemplateDtoMetadata$outboundSchema.parse(
      deployFromTemplateDtoMetadata,
    ),
  );
}

export function deployFromTemplateDtoMetadataFromJSON(
  jsonString: string,
): SafeParseResult<DeployFromTemplateDtoMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeployFromTemplateDtoMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeployFromTemplateDtoMetadata' from JSON`,
  );
}

/** @internal */
export const DeployFromTemplateDto3$inboundSchema: z.ZodType<
  DeployFromTemplateDto3,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type DeployFromTemplateDto3$Outbound = {};

/** @internal */
export const DeployFromTemplateDto3$outboundSchema: z.ZodType<
  DeployFromTemplateDto3$Outbound,
  z.ZodTypeDef,
  DeployFromTemplateDto3
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeployFromTemplateDto3$ {
  /** @deprecated use `DeployFromTemplateDto3$inboundSchema` instead. */
  export const inboundSchema = DeployFromTemplateDto3$inboundSchema;
  /** @deprecated use `DeployFromTemplateDto3$outboundSchema` instead. */
  export const outboundSchema = DeployFromTemplateDto3$outboundSchema;
  /** @deprecated use `DeployFromTemplateDto3$Outbound` instead. */
  export type Outbound = DeployFromTemplateDto3$Outbound;
}

export function deployFromTemplateDto3ToJSON(
  deployFromTemplateDto3: DeployFromTemplateDto3,
): string {
  return JSON.stringify(
    DeployFromTemplateDto3$outboundSchema.parse(deployFromTemplateDto3),
  );
}

export function deployFromTemplateDto3FromJSON(
  jsonString: string,
): SafeParseResult<DeployFromTemplateDto3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeployFromTemplateDto3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeployFromTemplateDto3' from JSON`,
  );
}

/** @internal */
export const DeployFromTemplateDtoParams$inboundSchema: z.ZodType<
  DeployFromTemplateDtoParams,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeployFromTemplateDto3$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/** @internal */
export type DeployFromTemplateDtoParams$Outbound =
  | DeployFromTemplateDto3$Outbound
  | string
  | number
  | boolean;

/** @internal */
export const DeployFromTemplateDtoParams$outboundSchema: z.ZodType<
  DeployFromTemplateDtoParams$Outbound,
  z.ZodTypeDef,
  DeployFromTemplateDtoParams
> = z.union([
  z.lazy(() => DeployFromTemplateDto3$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeployFromTemplateDtoParams$ {
  /** @deprecated use `DeployFromTemplateDtoParams$inboundSchema` instead. */
  export const inboundSchema = DeployFromTemplateDtoParams$inboundSchema;
  /** @deprecated use `DeployFromTemplateDtoParams$outboundSchema` instead. */
  export const outboundSchema = DeployFromTemplateDtoParams$outboundSchema;
  /** @deprecated use `DeployFromTemplateDtoParams$Outbound` instead. */
  export type Outbound = DeployFromTemplateDtoParams$Outbound;
}

export function deployFromTemplateDtoParamsToJSON(
  deployFromTemplateDtoParams: DeployFromTemplateDtoParams,
): string {
  return JSON.stringify(
    DeployFromTemplateDtoParams$outboundSchema.parse(
      deployFromTemplateDtoParams,
    ),
  );
}

export function deployFromTemplateDtoParamsFromJSON(
  jsonString: string,
): SafeParseResult<DeployFromTemplateDtoParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeployFromTemplateDtoParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeployFromTemplateDtoParams' from JSON`,
  );
}

/** @internal */
export const DeployFromTemplateDtoSpeed$inboundSchema: z.ZodNativeEnum<
  typeof DeployFromTemplateDtoSpeed
> = z.nativeEnum(DeployFromTemplateDtoSpeed);

/** @internal */
export const DeployFromTemplateDtoSpeed$outboundSchema: z.ZodNativeEnum<
  typeof DeployFromTemplateDtoSpeed
> = DeployFromTemplateDtoSpeed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeployFromTemplateDtoSpeed$ {
  /** @deprecated use `DeployFromTemplateDtoSpeed$inboundSchema` instead. */
  export const inboundSchema = DeployFromTemplateDtoSpeed$inboundSchema;
  /** @deprecated use `DeployFromTemplateDtoSpeed$outboundSchema` instead. */
  export const outboundSchema = DeployFromTemplateDtoSpeed$outboundSchema;
}

/** @internal */
export const DeployFromTemplateDtoDeployMethod$inboundSchema: z.ZodNativeEnum<
  typeof DeployFromTemplateDtoDeployMethod
> = z.nativeEnum(DeployFromTemplateDtoDeployMethod);

/** @internal */
export const DeployFromTemplateDtoDeployMethod$outboundSchema: z.ZodNativeEnum<
  typeof DeployFromTemplateDtoDeployMethod
> = DeployFromTemplateDtoDeployMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeployFromTemplateDtoDeployMethod$ {
  /** @deprecated use `DeployFromTemplateDtoDeployMethod$inboundSchema` instead. */
  export const inboundSchema = DeployFromTemplateDtoDeployMethod$inboundSchema;
  /** @deprecated use `DeployFromTemplateDtoDeployMethod$outboundSchema` instead. */
  export const outboundSchema =
    DeployFromTemplateDtoDeployMethod$outboundSchema;
}

/** @internal */
export const DeployFromTemplateDtoVersion$inboundSchema: z.ZodNativeEnum<
  typeof DeployFromTemplateDtoVersion
> = z.nativeEnum(DeployFromTemplateDtoVersion);

/** @internal */
export const DeployFromTemplateDtoVersion$outboundSchema: z.ZodNativeEnum<
  typeof DeployFromTemplateDtoVersion
> = DeployFromTemplateDtoVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeployFromTemplateDtoVersion$ {
  /** @deprecated use `DeployFromTemplateDtoVersion$inboundSchema` instead. */
  export const inboundSchema = DeployFromTemplateDtoVersion$inboundSchema;
  /** @deprecated use `DeployFromTemplateDtoVersion$outboundSchema` instead. */
  export const outboundSchema = DeployFromTemplateDtoVersion$outboundSchema;
}

/** @internal */
export const DeployFromTemplateDtoUiData$inboundSchema: z.ZodType<
  DeployFromTemplateDtoUiData,
  z.ZodTypeDef,
  unknown
> = z.object({
  chainId: z.number().optional(),
  deployMethod: DeployFromTemplateDtoDeployMethod$inboundSchema,
  deployType: z.string().optional(),
  imported: z.boolean(),
  version: DeployFromTemplateDtoVersion$inboundSchema,
});

/** @internal */
export type DeployFromTemplateDtoUiData$Outbound = {
  chainId?: number | undefined;
  deployMethod: string;
  deployType?: string | undefined;
  imported: boolean;
  version: string;
};

/** @internal */
export const DeployFromTemplateDtoUiData$outboundSchema: z.ZodType<
  DeployFromTemplateDtoUiData$Outbound,
  z.ZodTypeDef,
  DeployFromTemplateDtoUiData
> = z.object({
  chainId: z.number().optional(),
  deployMethod: DeployFromTemplateDtoDeployMethod$outboundSchema,
  deployType: z.string().optional(),
  imported: z.boolean(),
  version: DeployFromTemplateDtoVersion$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeployFromTemplateDtoUiData$ {
  /** @deprecated use `DeployFromTemplateDtoUiData$inboundSchema` instead. */
  export const inboundSchema = DeployFromTemplateDtoUiData$inboundSchema;
  /** @deprecated use `DeployFromTemplateDtoUiData$outboundSchema` instead. */
  export const outboundSchema = DeployFromTemplateDtoUiData$outboundSchema;
  /** @deprecated use `DeployFromTemplateDtoUiData$Outbound` instead. */
  export type Outbound = DeployFromTemplateDtoUiData$Outbound;
}

export function deployFromTemplateDtoUiDataToJSON(
  deployFromTemplateDtoUiData: DeployFromTemplateDtoUiData,
): string {
  return JSON.stringify(
    DeployFromTemplateDtoUiData$outboundSchema.parse(
      deployFromTemplateDtoUiData,
    ),
  );
}

export function deployFromTemplateDtoUiDataFromJSON(
  jsonString: string,
): SafeParseResult<DeployFromTemplateDtoUiData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeployFromTemplateDtoUiData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeployFromTemplateDtoUiData' from JSON`,
  );
}

/** @internal */
export const DeployFromTemplateDto$inboundSchema: z.ZodType<
  DeployFromTemplateDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  customGas: CustomGasDto$inboundSchema.optional(),
  description: z.string().optional(),
  gasLimit: z.string().optional(),
  metadata: z.lazy(() => DeployFromTemplateDtoMetadata$inboundSchema)
    .optional(),
  name: z.string(),
  network: z.string(),
  nonce: z.number().optional(),
  params: z.array(
    z.union([
      z.lazy(() => DeployFromTemplateDto3$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
  signerWallet: z.string(),
  speed: DeployFromTemplateDtoSpeed$inboundSchema.optional(),
  templateId: z.string(),
  uiData: z.nullable(z.lazy(() => DeployFromTemplateDtoUiData$inboundSchema))
    .optional(),
  value: z.string().optional(),
});

/** @internal */
export type DeployFromTemplateDto$Outbound = {
  customGas?: CustomGasDto$Outbound | undefined;
  description?: string | undefined;
  gasLimit?: string | undefined;
  metadata?: DeployFromTemplateDtoMetadata$Outbound | undefined;
  name: string;
  network: string;
  nonce?: number | undefined;
  params: Array<DeployFromTemplateDto3$Outbound | string | number | boolean>;
  signerWallet: string;
  speed?: string | undefined;
  templateId: string;
  uiData?: DeployFromTemplateDtoUiData$Outbound | null | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeployFromTemplateDto$outboundSchema: z.ZodType<
  DeployFromTemplateDto$Outbound,
  z.ZodTypeDef,
  DeployFromTemplateDto
> = z.object({
  customGas: CustomGasDto$outboundSchema.optional(),
  description: z.string().optional(),
  gasLimit: z.string().optional(),
  metadata: z.lazy(() => DeployFromTemplateDtoMetadata$outboundSchema)
    .optional(),
  name: z.string(),
  network: z.string(),
  nonce: z.number().optional(),
  params: z.array(
    z.union([
      z.lazy(() => DeployFromTemplateDto3$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
  signerWallet: z.string(),
  speed: DeployFromTemplateDtoSpeed$outboundSchema.optional(),
  templateId: z.string(),
  uiData: z.nullable(z.lazy(() => DeployFromTemplateDtoUiData$outboundSchema))
    .optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeployFromTemplateDto$ {
  /** @deprecated use `DeployFromTemplateDto$inboundSchema` instead. */
  export const inboundSchema = DeployFromTemplateDto$inboundSchema;
  /** @deprecated use `DeployFromTemplateDto$outboundSchema` instead. */
  export const outboundSchema = DeployFromTemplateDto$outboundSchema;
  /** @deprecated use `DeployFromTemplateDto$Outbound` instead. */
  export type Outbound = DeployFromTemplateDto$Outbound;
}

export function deployFromTemplateDtoToJSON(
  deployFromTemplateDto: DeployFromTemplateDto,
): string {
  return JSON.stringify(
    DeployFromTemplateDto$outboundSchema.parse(deployFromTemplateDto),
  );
}

export function deployFromTemplateDtoFromJSON(
  jsonString: string,
): SafeParseResult<DeployFromTemplateDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeployFromTemplateDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeployFromTemplateDto' from JSON`,
  );
}
