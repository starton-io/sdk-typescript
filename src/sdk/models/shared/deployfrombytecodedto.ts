/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AbiObjectDto, AbiObjectDto$ } from "./abiobjectdto.js";
import { CustomGasDto, CustomGasDto$ } from "./customgasdto.js";
import * as z from "zod";

export type DeployFromBytecodeDtoMetadata = {};

export type DeployFromBytecodeDto3 = {};

export type DeployFromBytecodeDtoParams = DeployFromBytecodeDto3 | string | number | boolean;

export enum DeployFromBytecodeDtoSpeed {
    Low = "low",
    Average = "average",
    Fast = "fast",
    Fastest = "fastest",
    Custom = "custom",
}

export enum DeployMethod {
    Web3 = "web3",
    Kms = "kms",
}

export enum Version {
    One = "1",
}

export type UiData = {
    chainId?: number | undefined;
    deployMethod: DeployMethod;
    deployType?: string | undefined;
    imported: boolean;
    version: Version;
};

export type DeployFromBytecodeDto = {
    abi: Array<AbiObjectDto>;
    bytecode: string;
    customGas?: CustomGasDto | undefined;
    description?: string | undefined;
    gasLimit?: string | undefined;
    metadata?: DeployFromBytecodeDtoMetadata | undefined;
    name: string;
    network: string;
    nonce?: number | undefined;
    /**
     * Smart contract constructor parameters.
     */
    params: Array<DeployFromBytecodeDto3 | string | number | boolean>;
    signerWallet: string;
    speed?: DeployFromBytecodeDtoSpeed | undefined;
    uiData?: UiData | null | undefined;
    value?: string | undefined;
};

/** @internal */
export namespace DeployFromBytecodeDtoMetadata$ {
    export const inboundSchema: z.ZodType<DeployFromBytecodeDtoMetadata, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeployFromBytecodeDtoMetadata> =
        z.object({});
}

/** @internal */
export namespace DeployFromBytecodeDto3$ {
    export const inboundSchema: z.ZodType<DeployFromBytecodeDto3, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeployFromBytecodeDto3> =
        z.object({});
}

/** @internal */
export namespace DeployFromBytecodeDtoParams$ {
    export const inboundSchema: z.ZodType<DeployFromBytecodeDtoParams, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => DeployFromBytecodeDto3$.inboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);

    export type Outbound = DeployFromBytecodeDto3$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeployFromBytecodeDtoParams> =
        z.union([
            z.lazy(() => DeployFromBytecodeDto3$.outboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);
}

/** @internal */
export namespace DeployFromBytecodeDtoSpeed$ {
    export const inboundSchema: z.ZodNativeEnum<typeof DeployFromBytecodeDtoSpeed> = z.nativeEnum(
        DeployFromBytecodeDtoSpeed
    );
    export const outboundSchema: z.ZodNativeEnum<typeof DeployFromBytecodeDtoSpeed> = inboundSchema;
}

/** @internal */
export namespace DeployMethod$ {
    export const inboundSchema: z.ZodNativeEnum<typeof DeployMethod> = z.nativeEnum(DeployMethod);
    export const outboundSchema: z.ZodNativeEnum<typeof DeployMethod> = inboundSchema;
}

/** @internal */
export namespace Version$ {
    export const inboundSchema: z.ZodNativeEnum<typeof Version> = z.nativeEnum(Version);
    export const outboundSchema: z.ZodNativeEnum<typeof Version> = inboundSchema;
}

/** @internal */
export namespace UiData$ {
    export const inboundSchema: z.ZodType<UiData, z.ZodTypeDef, unknown> = z.object({
        chainId: z.number().optional(),
        deployMethod: DeployMethod$.inboundSchema,
        deployType: z.string().optional(),
        imported: z.boolean(),
        version: Version$.inboundSchema,
    });

    export type Outbound = {
        chainId?: number | undefined;
        deployMethod: string;
        deployType?: string | undefined;
        imported: boolean;
        version: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UiData> = z.object({
        chainId: z.number().optional(),
        deployMethod: DeployMethod$.outboundSchema,
        deployType: z.string().optional(),
        imported: z.boolean(),
        version: Version$.outboundSchema,
    });
}

/** @internal */
export namespace DeployFromBytecodeDto$ {
    export const inboundSchema: z.ZodType<DeployFromBytecodeDto, z.ZodTypeDef, unknown> = z.object({
        abi: z.array(AbiObjectDto$.inboundSchema),
        bytecode: z.string(),
        customGas: CustomGasDto$.inboundSchema.optional(),
        description: z.string().optional(),
        gasLimit: z.string().optional(),
        metadata: z.lazy(() => DeployFromBytecodeDtoMetadata$.inboundSchema).optional(),
        name: z.string(),
        network: z.string(),
        nonce: z.number().optional(),
        params: z.array(
            z.union([
                z.lazy(() => DeployFromBytecodeDto3$.inboundSchema),
                z.string(),
                z.number(),
                z.boolean(),
            ])
        ),
        signerWallet: z.string(),
        speed: DeployFromBytecodeDtoSpeed$.inboundSchema.optional(),
        uiData: z.nullable(z.lazy(() => UiData$.inboundSchema)).optional(),
        value: z.string().optional(),
    });

    export type Outbound = {
        abi: Array<AbiObjectDto$.Outbound>;
        bytecode: string;
        customGas?: CustomGasDto$.Outbound | undefined;
        description?: string | undefined;
        gasLimit?: string | undefined;
        metadata?: DeployFromBytecodeDtoMetadata$.Outbound | undefined;
        name: string;
        network: string;
        nonce?: number | undefined;
        params: Array<DeployFromBytecodeDto3$.Outbound | string | number | boolean>;
        signerWallet: string;
        speed?: string | undefined;
        uiData?: UiData$.Outbound | null | undefined;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeployFromBytecodeDto> =
        z.object({
            abi: z.array(AbiObjectDto$.outboundSchema),
            bytecode: z.string(),
            customGas: CustomGasDto$.outboundSchema.optional(),
            description: z.string().optional(),
            gasLimit: z.string().optional(),
            metadata: z.lazy(() => DeployFromBytecodeDtoMetadata$.outboundSchema).optional(),
            name: z.string(),
            network: z.string(),
            nonce: z.number().optional(),
            params: z.array(
                z.union([
                    z.lazy(() => DeployFromBytecodeDto3$.outboundSchema),
                    z.string(),
                    z.number(),
                    z.boolean(),
                ])
            ),
            signerWallet: z.string(),
            speed: DeployFromBytecodeDtoSpeed$.outboundSchema.optional(),
            uiData: z.nullable(z.lazy(() => UiData$.outboundSchema)).optional(),
            value: z.string().optional(),
        });
}
