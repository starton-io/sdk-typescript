/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AbiObjectDto,
  AbiObjectDto$inboundSchema,
  AbiObjectDto$Outbound,
  AbiObjectDto$outboundSchema,
} from "./abiobjectdto.js";
import {
  CustomGasDto,
  CustomGasDto$inboundSchema,
  CustomGasDto$Outbound,
  CustomGasDto$outboundSchema,
} from "./customgasdto.js";

export type DeployFromBytecodeDtoMetadata = {};

export type DeployFromBytecodeDto3 = {};

export type DeployFromBytecodeDtoParams =
  | DeployFromBytecodeDto3
  | string
  | number
  | boolean;

export enum DeployFromBytecodeDtoSpeed {
  Low = "low",
  Average = "average",
  Fast = "fast",
  Fastest = "fastest",
  Custom = "custom",
}

export enum DeployMethod {
  Web3 = "web3",
  Kms = "kms",
}

export enum Version {
  One = "1",
}

export type UiData = {
  chainId?: number | undefined;
  deployMethod: DeployMethod;
  deployType?: string | undefined;
  imported: boolean;
  version: Version;
};

export type DeployFromBytecodeDto = {
  abi: Array<AbiObjectDto>;
  bytecode: string;
  customGas?: CustomGasDto | undefined;
  description?: string | undefined;
  gasLimit?: string | undefined;
  metadata?: DeployFromBytecodeDtoMetadata | undefined;
  name: string;
  network: string;
  nonce?: number | undefined;
  /**
   * Smart contract constructor parameters.
   */
  params: Array<DeployFromBytecodeDto3 | string | number | boolean>;
  signerWallet: string;
  speed?: DeployFromBytecodeDtoSpeed | undefined;
  uiData?: UiData | null | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeployFromBytecodeDtoMetadata$inboundSchema: z.ZodType<
  DeployFromBytecodeDtoMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type DeployFromBytecodeDtoMetadata$Outbound = {};

/** @internal */
export const DeployFromBytecodeDtoMetadata$outboundSchema: z.ZodType<
  DeployFromBytecodeDtoMetadata$Outbound,
  z.ZodTypeDef,
  DeployFromBytecodeDtoMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeployFromBytecodeDtoMetadata$ {
  /** @deprecated use `DeployFromBytecodeDtoMetadata$inboundSchema` instead. */
  export const inboundSchema = DeployFromBytecodeDtoMetadata$inboundSchema;
  /** @deprecated use `DeployFromBytecodeDtoMetadata$outboundSchema` instead. */
  export const outboundSchema = DeployFromBytecodeDtoMetadata$outboundSchema;
  /** @deprecated use `DeployFromBytecodeDtoMetadata$Outbound` instead. */
  export type Outbound = DeployFromBytecodeDtoMetadata$Outbound;
}

export function deployFromBytecodeDtoMetadataToJSON(
  deployFromBytecodeDtoMetadata: DeployFromBytecodeDtoMetadata,
): string {
  return JSON.stringify(
    DeployFromBytecodeDtoMetadata$outboundSchema.parse(
      deployFromBytecodeDtoMetadata,
    ),
  );
}

export function deployFromBytecodeDtoMetadataFromJSON(
  jsonString: string,
): SafeParseResult<DeployFromBytecodeDtoMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeployFromBytecodeDtoMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeployFromBytecodeDtoMetadata' from JSON`,
  );
}

/** @internal */
export const DeployFromBytecodeDto3$inboundSchema: z.ZodType<
  DeployFromBytecodeDto3,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type DeployFromBytecodeDto3$Outbound = {};

/** @internal */
export const DeployFromBytecodeDto3$outboundSchema: z.ZodType<
  DeployFromBytecodeDto3$Outbound,
  z.ZodTypeDef,
  DeployFromBytecodeDto3
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeployFromBytecodeDto3$ {
  /** @deprecated use `DeployFromBytecodeDto3$inboundSchema` instead. */
  export const inboundSchema = DeployFromBytecodeDto3$inboundSchema;
  /** @deprecated use `DeployFromBytecodeDto3$outboundSchema` instead. */
  export const outboundSchema = DeployFromBytecodeDto3$outboundSchema;
  /** @deprecated use `DeployFromBytecodeDto3$Outbound` instead. */
  export type Outbound = DeployFromBytecodeDto3$Outbound;
}

export function deployFromBytecodeDto3ToJSON(
  deployFromBytecodeDto3: DeployFromBytecodeDto3,
): string {
  return JSON.stringify(
    DeployFromBytecodeDto3$outboundSchema.parse(deployFromBytecodeDto3),
  );
}

export function deployFromBytecodeDto3FromJSON(
  jsonString: string,
): SafeParseResult<DeployFromBytecodeDto3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeployFromBytecodeDto3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeployFromBytecodeDto3' from JSON`,
  );
}

/** @internal */
export const DeployFromBytecodeDtoParams$inboundSchema: z.ZodType<
  DeployFromBytecodeDtoParams,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DeployFromBytecodeDto3$inboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/** @internal */
export type DeployFromBytecodeDtoParams$Outbound =
  | DeployFromBytecodeDto3$Outbound
  | string
  | number
  | boolean;

/** @internal */
export const DeployFromBytecodeDtoParams$outboundSchema: z.ZodType<
  DeployFromBytecodeDtoParams$Outbound,
  z.ZodTypeDef,
  DeployFromBytecodeDtoParams
> = z.union([
  z.lazy(() => DeployFromBytecodeDto3$outboundSchema),
  z.string(),
  z.number(),
  z.boolean(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeployFromBytecodeDtoParams$ {
  /** @deprecated use `DeployFromBytecodeDtoParams$inboundSchema` instead. */
  export const inboundSchema = DeployFromBytecodeDtoParams$inboundSchema;
  /** @deprecated use `DeployFromBytecodeDtoParams$outboundSchema` instead. */
  export const outboundSchema = DeployFromBytecodeDtoParams$outboundSchema;
  /** @deprecated use `DeployFromBytecodeDtoParams$Outbound` instead. */
  export type Outbound = DeployFromBytecodeDtoParams$Outbound;
}

export function deployFromBytecodeDtoParamsToJSON(
  deployFromBytecodeDtoParams: DeployFromBytecodeDtoParams,
): string {
  return JSON.stringify(
    DeployFromBytecodeDtoParams$outboundSchema.parse(
      deployFromBytecodeDtoParams,
    ),
  );
}

export function deployFromBytecodeDtoParamsFromJSON(
  jsonString: string,
): SafeParseResult<DeployFromBytecodeDtoParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeployFromBytecodeDtoParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeployFromBytecodeDtoParams' from JSON`,
  );
}

/** @internal */
export const DeployFromBytecodeDtoSpeed$inboundSchema: z.ZodNativeEnum<
  typeof DeployFromBytecodeDtoSpeed
> = z.nativeEnum(DeployFromBytecodeDtoSpeed);

/** @internal */
export const DeployFromBytecodeDtoSpeed$outboundSchema: z.ZodNativeEnum<
  typeof DeployFromBytecodeDtoSpeed
> = DeployFromBytecodeDtoSpeed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeployFromBytecodeDtoSpeed$ {
  /** @deprecated use `DeployFromBytecodeDtoSpeed$inboundSchema` instead. */
  export const inboundSchema = DeployFromBytecodeDtoSpeed$inboundSchema;
  /** @deprecated use `DeployFromBytecodeDtoSpeed$outboundSchema` instead. */
  export const outboundSchema = DeployFromBytecodeDtoSpeed$outboundSchema;
}

/** @internal */
export const DeployMethod$inboundSchema: z.ZodNativeEnum<typeof DeployMethod> =
  z.nativeEnum(DeployMethod);

/** @internal */
export const DeployMethod$outboundSchema: z.ZodNativeEnum<typeof DeployMethod> =
  DeployMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeployMethod$ {
  /** @deprecated use `DeployMethod$inboundSchema` instead. */
  export const inboundSchema = DeployMethod$inboundSchema;
  /** @deprecated use `DeployMethod$outboundSchema` instead. */
  export const outboundSchema = DeployMethod$outboundSchema;
}

/** @internal */
export const Version$inboundSchema: z.ZodNativeEnum<typeof Version> = z
  .nativeEnum(Version);

/** @internal */
export const Version$outboundSchema: z.ZodNativeEnum<typeof Version> =
  Version$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Version$ {
  /** @deprecated use `Version$inboundSchema` instead. */
  export const inboundSchema = Version$inboundSchema;
  /** @deprecated use `Version$outboundSchema` instead. */
  export const outboundSchema = Version$outboundSchema;
}

/** @internal */
export const UiData$inboundSchema: z.ZodType<UiData, z.ZodTypeDef, unknown> = z
  .object({
    chainId: z.number().optional(),
    deployMethod: DeployMethod$inboundSchema,
    deployType: z.string().optional(),
    imported: z.boolean(),
    version: Version$inboundSchema,
  });

/** @internal */
export type UiData$Outbound = {
  chainId?: number | undefined;
  deployMethod: string;
  deployType?: string | undefined;
  imported: boolean;
  version: string;
};

/** @internal */
export const UiData$outboundSchema: z.ZodType<
  UiData$Outbound,
  z.ZodTypeDef,
  UiData
> = z.object({
  chainId: z.number().optional(),
  deployMethod: DeployMethod$outboundSchema,
  deployType: z.string().optional(),
  imported: z.boolean(),
  version: Version$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UiData$ {
  /** @deprecated use `UiData$inboundSchema` instead. */
  export const inboundSchema = UiData$inboundSchema;
  /** @deprecated use `UiData$outboundSchema` instead. */
  export const outboundSchema = UiData$outboundSchema;
  /** @deprecated use `UiData$Outbound` instead. */
  export type Outbound = UiData$Outbound;
}

export function uiDataToJSON(uiData: UiData): string {
  return JSON.stringify(UiData$outboundSchema.parse(uiData));
}

export function uiDataFromJSON(
  jsonString: string,
): SafeParseResult<UiData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UiData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UiData' from JSON`,
  );
}

/** @internal */
export const DeployFromBytecodeDto$inboundSchema: z.ZodType<
  DeployFromBytecodeDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  abi: z.array(AbiObjectDto$inboundSchema),
  bytecode: z.string(),
  customGas: CustomGasDto$inboundSchema.optional(),
  description: z.string().optional(),
  gasLimit: z.string().optional(),
  metadata: z.lazy(() => DeployFromBytecodeDtoMetadata$inboundSchema)
    .optional(),
  name: z.string(),
  network: z.string(),
  nonce: z.number().optional(),
  params: z.array(
    z.union([
      z.lazy(() => DeployFromBytecodeDto3$inboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
  signerWallet: z.string(),
  speed: DeployFromBytecodeDtoSpeed$inboundSchema.optional(),
  uiData: z.nullable(z.lazy(() => UiData$inboundSchema)).optional(),
  value: z.string().optional(),
});

/** @internal */
export type DeployFromBytecodeDto$Outbound = {
  abi: Array<AbiObjectDto$Outbound>;
  bytecode: string;
  customGas?: CustomGasDto$Outbound | undefined;
  description?: string | undefined;
  gasLimit?: string | undefined;
  metadata?: DeployFromBytecodeDtoMetadata$Outbound | undefined;
  name: string;
  network: string;
  nonce?: number | undefined;
  params: Array<DeployFromBytecodeDto3$Outbound | string | number | boolean>;
  signerWallet: string;
  speed?: string | undefined;
  uiData?: UiData$Outbound | null | undefined;
  value?: string | undefined;
};

/** @internal */
export const DeployFromBytecodeDto$outboundSchema: z.ZodType<
  DeployFromBytecodeDto$Outbound,
  z.ZodTypeDef,
  DeployFromBytecodeDto
> = z.object({
  abi: z.array(AbiObjectDto$outboundSchema),
  bytecode: z.string(),
  customGas: CustomGasDto$outboundSchema.optional(),
  description: z.string().optional(),
  gasLimit: z.string().optional(),
  metadata: z.lazy(() => DeployFromBytecodeDtoMetadata$outboundSchema)
    .optional(),
  name: z.string(),
  network: z.string(),
  nonce: z.number().optional(),
  params: z.array(
    z.union([
      z.lazy(() => DeployFromBytecodeDto3$outboundSchema),
      z.string(),
      z.number(),
      z.boolean(),
    ]),
  ),
  signerWallet: z.string(),
  speed: DeployFromBytecodeDtoSpeed$outboundSchema.optional(),
  uiData: z.nullable(z.lazy(() => UiData$outboundSchema)).optional(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeployFromBytecodeDto$ {
  /** @deprecated use `DeployFromBytecodeDto$inboundSchema` instead. */
  export const inboundSchema = DeployFromBytecodeDto$inboundSchema;
  /** @deprecated use `DeployFromBytecodeDto$outboundSchema` instead. */
  export const outboundSchema = DeployFromBytecodeDto$outboundSchema;
  /** @deprecated use `DeployFromBytecodeDto$Outbound` instead. */
  export type Outbound = DeployFromBytecodeDto$Outbound;
}

export function deployFromBytecodeDtoToJSON(
  deployFromBytecodeDto: DeployFromBytecodeDto,
): string {
  return JSON.stringify(
    DeployFromBytecodeDto$outboundSchema.parse(deployFromBytecodeDto),
  );
}

export function deployFromBytecodeDtoFromJSON(
  jsonString: string,
): SafeParseResult<DeployFromBytecodeDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeployFromBytecodeDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeployFromBytecodeDto' from JSON`,
  );
}
