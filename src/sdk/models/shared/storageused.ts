/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StorageUsed = {
  currentStorageUsed: number;
  freeSpaceRemaining: number;
  maxAllowed: number;
};

/** @internal */
export const StorageUsed$inboundSchema: z.ZodType<
  StorageUsed,
  z.ZodTypeDef,
  unknown
> = z.object({
  currentStorageUsed: z.number(),
  freeSpaceRemaining: z.number(),
  maxAllowed: z.number(),
});

/** @internal */
export type StorageUsed$Outbound = {
  currentStorageUsed: number;
  freeSpaceRemaining: number;
  maxAllowed: number;
};

/** @internal */
export const StorageUsed$outboundSchema: z.ZodType<
  StorageUsed$Outbound,
  z.ZodTypeDef,
  StorageUsed
> = z.object({
  currentStorageUsed: z.number(),
  freeSpaceRemaining: z.number(),
  maxAllowed: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StorageUsed$ {
  /** @deprecated use `StorageUsed$inboundSchema` instead. */
  export const inboundSchema = StorageUsed$inboundSchema;
  /** @deprecated use `StorageUsed$outboundSchema` instead. */
  export const outboundSchema = StorageUsed$outboundSchema;
  /** @deprecated use `StorageUsed$Outbound` instead. */
  export type Outbound = StorageUsed$Outbound;
}

export function storageUsedToJSON(storageUsed: StorageUsed): string {
  return JSON.stringify(StorageUsed$outboundSchema.parse(storageUsed));
}

export function storageUsedFromJSON(
  jsonString: string,
): SafeParseResult<StorageUsed, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StorageUsed$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StorageUsed' from JSON`,
  );
}
