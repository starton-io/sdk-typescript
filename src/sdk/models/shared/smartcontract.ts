/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Abi = {};

export type CompilationDetails = {};

export type SmartContractMetadata = {};

export enum State {
    Success = "SUCCESS",
    Pending = "PENDING",
    ManualActionRequired = "MANUAL_ACTION_REQUIRED",
    Error = "ERROR",
}

export enum SmartContractStatus {
    Unsigned = "UNSIGNED",
    ErrorTx = "ERROR_TX",
    ErrorPublish = "ERROR_PUBLISH",
    Published = "PUBLISHED",
    ReceivedByStarton = "RECEIVED_BY_STARTON",
    CreatedByStarton = "CREATED_BY_STARTON",
    CouldNotEstimateGasPrice = "COULD_NOT_ESTIMATE_GAS_PRICE",
    CouldNotIncreaseGasPrice = "COULD_NOT_INCREASE_GAS_PRICE",
    GasPriceEstimated = "GAS_PRICE_ESTIMATED",
    InvalidGasPrice = "INVALID_GAS_PRICE",
    ReplacementGasPriceUnderpriced = "REPLACEMENT_GAS_PRICE_UNDERPRICED",
    CouldNotEstimateGasLimit = "COULD_NOT_ESTIMATE_GAS_LIMIT",
    GasLimitEstimated = "GAS_LIMIT_ESTIMATED",
    ExecutionWillFail = "EXECUTION_WILL_FAIL",
    InvalidArgument = "INVALID_ARGUMENT",
    InsufficientFunds = "INSUFFICIENT_FUNDS",
    InsufficientFundsAfterBroadcast = "INSUFFICIENT_FUNDS_AFTER_BROADCAST",
    CouldNotAssignNonce = "COULD_NOT_ASSIGN_NONCE",
    CouldNotUnstuckNonce = "COULD_NOT_UNSTUCK_NONCE",
    NonceAssigned = "NONCE_ASSIGNED",
    NonceExpired = "NONCE_EXPIRED",
    CouldNotSign = "COULD_NOT_SIGN",
    Signed = "SIGNED",
    SentToMempool = "SENT_TO_MEMPOOL",
    CouldNotBroadcast = "COULD_NOT_BROADCAST",
    AlreadyKnown = "ALREADY_KNOWN",
    Mined = "MINED",
    Confirmed = "CONFIRMED",
    Replaced = "REPLACED",
    Failed = "FAILED",
    MonitoringInProgress = "MONITORING_IN_PROGRESS",
    StuckByPreviousTransaction = "STUCK_BY_PREVIOUS_TRANSACTION",
    MaxGasPriceReach = "MAX_GAS_PRICE_REACH",
    GasPriceIncreased = "GAS_PRICE_INCREASED",
    NewTransactionHash = "NEW_TRANSACTION_HASH",
    Unknown = "UNKNOWN",
    MonitoringInterrupted = "MONITORING_INTERRUPTED",
}

export enum SmartContractDeployMethod {
    Web3 = "web3",
    Kms = "kms",
}

export enum SmartContractVersion {
    One = "1",
}

export type SmartContractUiData = {
    chainId?: number | undefined;
    deployMethod: SmartContractDeployMethod;
    deployType?: string | undefined;
    imported: boolean;
    version: SmartContractVersion;
};

export type SmartContract = {
    abi?: Array<Abi> | undefined;
    address: string;
    blockNumber?: number | null | undefined;
    compilationDetails?: CompilationDetails | null | undefined;
    createdAt?: Date | undefined;
    creationHash?: string | null | undefined;
    description?: string | null | undefined;
    id: string;
    metadata?: SmartContractMetadata | null | undefined;
    minedDate?: Date | null | undefined;
    name: string;
    network: string;
    params?: Array<string> | null | undefined;
    projectId: string;
    state: State;
    status: SmartContractStatus;
    templateId?: string | null | undefined;
    uiData?: SmartContractUiData | null | undefined;
    updatedAt?: Date | undefined;
};

/** @internal */
export namespace Abi$ {
    export const inboundSchema: z.ZodType<Abi, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Abi> = z.object({});
}

/** @internal */
export namespace CompilationDetails$ {
    export const inboundSchema: z.ZodType<CompilationDetails, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CompilationDetails> = z.object(
        {}
    );
}

/** @internal */
export namespace SmartContractMetadata$ {
    export const inboundSchema: z.ZodType<SmartContractMetadata, z.ZodTypeDef, unknown> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SmartContractMetadata> =
        z.object({});
}

/** @internal */
export namespace State$ {
    export const inboundSchema: z.ZodNativeEnum<typeof State> = z.nativeEnum(State);
    export const outboundSchema: z.ZodNativeEnum<typeof State> = inboundSchema;
}

/** @internal */
export namespace SmartContractStatus$ {
    export const inboundSchema: z.ZodNativeEnum<typeof SmartContractStatus> =
        z.nativeEnum(SmartContractStatus);
    export const outboundSchema: z.ZodNativeEnum<typeof SmartContractStatus> = inboundSchema;
}

/** @internal */
export namespace SmartContractDeployMethod$ {
    export const inboundSchema: z.ZodNativeEnum<typeof SmartContractDeployMethod> =
        z.nativeEnum(SmartContractDeployMethod);
    export const outboundSchema: z.ZodNativeEnum<typeof SmartContractDeployMethod> = inboundSchema;
}

/** @internal */
export namespace SmartContractVersion$ {
    export const inboundSchema: z.ZodNativeEnum<typeof SmartContractVersion> =
        z.nativeEnum(SmartContractVersion);
    export const outboundSchema: z.ZodNativeEnum<typeof SmartContractVersion> = inboundSchema;
}

/** @internal */
export namespace SmartContractUiData$ {
    export const inboundSchema: z.ZodType<SmartContractUiData, z.ZodTypeDef, unknown> = z.object({
        chainId: z.number().optional(),
        deployMethod: SmartContractDeployMethod$.inboundSchema,
        deployType: z.string().optional(),
        imported: z.boolean(),
        version: SmartContractVersion$.inboundSchema,
    });

    export type Outbound = {
        chainId?: number | undefined;
        deployMethod: string;
        deployType?: string | undefined;
        imported: boolean;
        version: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SmartContractUiData> = z.object({
        chainId: z.number().optional(),
        deployMethod: SmartContractDeployMethod$.outboundSchema,
        deployType: z.string().optional(),
        imported: z.boolean(),
        version: SmartContractVersion$.outboundSchema,
    });
}

/** @internal */
export namespace SmartContract$ {
    export const inboundSchema: z.ZodType<SmartContract, z.ZodTypeDef, unknown> = z.object({
        abi: z.array(z.lazy(() => Abi$.inboundSchema)).optional(),
        address: z.string(),
        blockNumber: z.nullable(z.number()).optional(),
        compilationDetails: z.nullable(z.lazy(() => CompilationDetails$.inboundSchema)).optional(),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .default("2024-05-02T09:34:19.243Z")
            .transform((v) => new Date(v)),
        creationHash: z.nullable(z.string()).optional(),
        description: z.nullable(z.string()).optional(),
        id: z.string(),
        metadata: z.nullable(z.lazy(() => SmartContractMetadata$.inboundSchema)).optional(),
        minedDate: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        name: z.string(),
        network: z.string(),
        params: z.nullable(z.array(z.string())).optional(),
        projectId: z.string(),
        state: State$.inboundSchema,
        status: SmartContractStatus$.inboundSchema,
        templateId: z.nullable(z.string()).optional(),
        uiData: z.nullable(z.lazy(() => SmartContractUiData$.inboundSchema)).optional(),
        updatedAt: z
            .string()
            .datetime({ offset: true })
            .default("2024-05-02T09:34:19.243Z")
            .transform((v) => new Date(v)),
    });

    export type Outbound = {
        abi?: Array<Abi$.Outbound> | undefined;
        address: string;
        blockNumber?: number | null | undefined;
        compilationDetails?: CompilationDetails$.Outbound | null | undefined;
        createdAt: string;
        creationHash?: string | null | undefined;
        description?: string | null | undefined;
        id: string;
        metadata?: SmartContractMetadata$.Outbound | null | undefined;
        minedDate?: string | null | undefined;
        name: string;
        network: string;
        params?: Array<string> | null | undefined;
        projectId: string;
        state: string;
        status: string;
        templateId?: string | null | undefined;
        uiData?: SmartContractUiData$.Outbound | null | undefined;
        updatedAt: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SmartContract> = z.object({
        abi: z.array(z.lazy(() => Abi$.outboundSchema)).optional(),
        address: z.string(),
        blockNumber: z.nullable(z.number()).optional(),
        compilationDetails: z.nullable(z.lazy(() => CompilationDetails$.outboundSchema)).optional(),
        createdAt: z
            .date()
            .default(() => new Date("2024-05-02T09:34:19.243Z"))
            .transform((v) => v.toISOString()),
        creationHash: z.nullable(z.string()).optional(),
        description: z.nullable(z.string()).optional(),
        id: z.string(),
        metadata: z.nullable(z.lazy(() => SmartContractMetadata$.outboundSchema)).optional(),
        minedDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        name: z.string(),
        network: z.string(),
        params: z.nullable(z.array(z.string())).optional(),
        projectId: z.string(),
        state: State$.outboundSchema,
        status: SmartContractStatus$.outboundSchema,
        templateId: z.nullable(z.string()).optional(),
        uiData: z.nullable(z.lazy(() => SmartContractUiData$.outboundSchema)).optional(),
        updatedAt: z
            .date()
            .default(() => new Date("2024-05-02T09:34:19.243Z"))
            .transform((v) => v.toISOString()),
    });
}
