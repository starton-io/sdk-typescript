/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CustomGasDto, CustomGasDto$ } from "./customgasdto.js";
import * as z from "zod";

export type CreateTransactionDtoMetadata = {};

/**
 * The gas speed you want. If custom it requires customGas field
 */
export enum CreateTransactionDtoSpeed {
    Low = "low",
    Average = "average",
    Fast = "fast",
    Fastest = "fastest",
    Custom = "custom",
}

export type CreateTransactionDto = {
    customGas?: CustomGasDto | undefined;
    /**
     * Transaction data.
     */
    data?: string | undefined;
    gasLimit?: string | undefined;
    metadata?: CreateTransactionDtoMetadata | undefined;
    /**
     * Your network you want to perform transaction.
     */
    network: string;
    /**
     * Your transaction nonce. Don't fill this value if you want to use relayer nonce auto assignation.
     */
    nonce?: number | undefined;
    /**
     * Your kms address. It's also the from of your transaction.
     */
    signerWallet: string;
    /**
     * The gas speed you want. If custom it requires customGas field
     */
    speed?: CreateTransactionDtoSpeed | undefined;
    /**
     * The address you want to send to.
     */
    to?: string | undefined;
    /**
     * The value of the transaction in wei.
     */
    value?: string | undefined;
};

/** @internal */
export namespace CreateTransactionDtoMetadata$ {
    export const inboundSchema: z.ZodType<CreateTransactionDtoMetadata, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTransactionDtoMetadata> =
        z.object({});
}

/** @internal */
export namespace CreateTransactionDtoSpeed$ {
    export const inboundSchema: z.ZodNativeEnum<typeof CreateTransactionDtoSpeed> =
        z.nativeEnum(CreateTransactionDtoSpeed);
    export const outboundSchema: z.ZodNativeEnum<typeof CreateTransactionDtoSpeed> = inboundSchema;
}

/** @internal */
export namespace CreateTransactionDto$ {
    export const inboundSchema: z.ZodType<CreateTransactionDto, z.ZodTypeDef, unknown> = z.object({
        customGas: CustomGasDto$.inboundSchema.optional(),
        data: z.string().optional(),
        gasLimit: z.string().optional(),
        metadata: z.lazy(() => CreateTransactionDtoMetadata$.inboundSchema).optional(),
        network: z.string(),
        nonce: z.number().int().optional(),
        signerWallet: z.string(),
        speed: CreateTransactionDtoSpeed$.inboundSchema.optional(),
        to: z.string().optional(),
        value: z.string().optional(),
    });

    export type Outbound = {
        customGas?: CustomGasDto$.Outbound | undefined;
        data?: string | undefined;
        gasLimit?: string | undefined;
        metadata?: CreateTransactionDtoMetadata$.Outbound | undefined;
        network: string;
        nonce?: number | undefined;
        signerWallet: string;
        speed?: string | undefined;
        to?: string | undefined;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateTransactionDto> = z.object(
        {
            customGas: CustomGasDto$.outboundSchema.optional(),
            data: z.string().optional(),
            gasLimit: z.string().optional(),
            metadata: z.lazy(() => CreateTransactionDtoMetadata$.outboundSchema).optional(),
            network: z.string(),
            nonce: z.number().int().optional(),
            signerWallet: z.string(),
            speed: CreateTransactionDtoSpeed$.outboundSchema.optional(),
            to: z.string().optional(),
            value: z.string().optional(),
        }
    );
}
