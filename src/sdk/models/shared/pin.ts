/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DirectoryContent, DirectoryContent$ } from "./directorycontent";
import { z } from "zod";

export type PinMetadata = {};

export enum Status {
    Queued = "queued",
    Pinning = "pinning",
    Pinned = "pinned",
    Failed = "failed",
    Deleted = "deleted",
}

export enum PinType {
    Directory = "directory",
    File = "file",
}

export type Pin = {
    cid?: string | undefined;
    createdAt?: Date | undefined;
    delegates?: Array<string> | undefined;
    directoryContent?: Array<DirectoryContent> | undefined;
    id: string;
    metadata?: PinMetadata | undefined;
    name?: string | undefined;
    origins?: Array<string> | undefined;
    projectId: string;
    size?: number | undefined;
    status: Status;
    type?: PinType | undefined;
    updatedAt?: Date | undefined;
};

/** @internal */
export namespace PinMetadata$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PinMetadata, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PinMetadata> = z.object({});
}

/** @internal */
export const Status$ = z.nativeEnum(Status);

/** @internal */
export const PinType$ = z.nativeEnum(PinType);

/** @internal */
export namespace Pin$ {
    export type Inbound = {
        cid?: string | undefined;
        createdAt?: string | undefined;
        delegates?: Array<string> | undefined;
        directoryContent?: Array<DirectoryContent$.Inbound> | undefined;
        id: string;
        metadata?: PinMetadata$.Inbound | undefined;
        name?: string | undefined;
        origins?: Array<string> | undefined;
        projectId: string;
        size?: number | undefined;
        status: Status;
        type?: PinType | undefined;
        updatedAt?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Pin, z.ZodTypeDef, Inbound> = z
        .object({
            cid: z.string().optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .default("2024-01-24T16:52:28.173Z")
                .transform((v) => new Date(v)),
            delegates: z.array(z.string()).optional(),
            directoryContent: z.array(DirectoryContent$.inboundSchema).optional(),
            id: z.string(),
            metadata: z.lazy(() => PinMetadata$.inboundSchema).optional(),
            name: z.string().optional(),
            origins: z.array(z.string()).optional(),
            projectId: z.string(),
            size: z.number().optional(),
            status: Status$,
            type: PinType$.optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .default("2024-01-24T16:52:28.173Z")
                .transform((v) => new Date(v)),
        })
        .transform((v) => {
            return {
                ...(v.cid === undefined ? null : { cid: v.cid }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.delegates === undefined ? null : { delegates: v.delegates }),
                ...(v.directoryContent === undefined
                    ? null
                    : { directoryContent: v.directoryContent }),
                id: v.id,
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.origins === undefined ? null : { origins: v.origins }),
                projectId: v.projectId,
                ...(v.size === undefined ? null : { size: v.size }),
                status: v.status,
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });

    export type Outbound = {
        cid?: string | undefined;
        createdAt: string;
        delegates?: Array<string> | undefined;
        directoryContent?: Array<DirectoryContent$.Outbound> | undefined;
        id: string;
        metadata?: PinMetadata$.Outbound | undefined;
        name?: string | undefined;
        origins?: Array<string> | undefined;
        projectId: string;
        size?: number | undefined;
        status: Status;
        type?: PinType | undefined;
        updatedAt: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Pin> = z
        .object({
            cid: z.string().optional(),
            createdAt: z
                .date()
                .default(() => new Date("2024-01-24T16:52:28.173Z"))
                .transform((v) => v.toISOString()),
            delegates: z.array(z.string()).optional(),
            directoryContent: z.array(DirectoryContent$.outboundSchema).optional(),
            id: z.string(),
            metadata: z.lazy(() => PinMetadata$.outboundSchema).optional(),
            name: z.string().optional(),
            origins: z.array(z.string()).optional(),
            projectId: z.string(),
            size: z.number().optional(),
            status: Status$,
            type: PinType$.optional(),
            updatedAt: z
                .date()
                .default(() => new Date("2024-01-24T16:52:28.173Z"))
                .transform((v) => v.toISOString()),
        })
        .transform((v) => {
            return {
                ...(v.cid === undefined ? null : { cid: v.cid }),
                createdAt: v.createdAt,
                ...(v.delegates === undefined ? null : { delegates: v.delegates }),
                ...(v.directoryContent === undefined
                    ? null
                    : { directoryContent: v.directoryContent }),
                id: v.id,
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.origins === undefined ? null : { origins: v.origins }),
                projectId: v.projectId,
                ...(v.size === undefined ? null : { size: v.size }),
                status: v.status,
                ...(v.type === undefined ? null : { type: v.type }),
                updatedAt: v.updatedAt,
            };
        });
}
