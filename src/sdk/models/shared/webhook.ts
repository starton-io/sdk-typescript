/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Headers = {};

export type WebhookPayload = {};

export enum WebhookStatus {
    Retrying = "RETRYING",
    Successful = "SUCCESSFUL",
    Failed = "FAILED",
    Canceled = "CANCELED",
}

export type Webhook = {
    createdAt?: Date | undefined;
    headers: Headers | null;
    id: string;
    payload: WebhookPayload | null;
    projectId: string;
    refId: string;
    status: WebhookStatus;
    updatedAt?: Date | undefined;
    url: string;
};

/** @internal */
export namespace Headers$ {
    export const inboundSchema: z.ZodType<Headers, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Headers> = z.object({});
}

/** @internal */
export namespace WebhookPayload$ {
    export const inboundSchema: z.ZodType<WebhookPayload, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WebhookPayload> = z.object({});
}

/** @internal */
export namespace WebhookStatus$ {
    export const inboundSchema: z.ZodNativeEnum<typeof WebhookStatus> = z.nativeEnum(WebhookStatus);
    export const outboundSchema: z.ZodNativeEnum<typeof WebhookStatus> = inboundSchema;
}

/** @internal */
export namespace Webhook$ {
    export const inboundSchema: z.ZodType<Webhook, z.ZodTypeDef, unknown> = z.object({
        createdAt: z
            .string()
            .datetime({ offset: true })
            .default("2024-01-31T13:57:35.791Z")
            .transform((v) => new Date(v)),
        headers: z.nullable(z.lazy(() => Headers$.inboundSchema)),
        id: z.string(),
        payload: z.nullable(z.lazy(() => WebhookPayload$.inboundSchema)),
        projectId: z.string(),
        refId: z.string(),
        status: WebhookStatus$.inboundSchema,
        updatedAt: z
            .string()
            .datetime({ offset: true })
            .default("2024-01-31T13:57:35.791Z")
            .transform((v) => new Date(v)),
        url: z.string(),
    });

    export type Outbound = {
        createdAt: string;
        headers: Headers$.Outbound | null;
        id: string;
        payload: WebhookPayload$.Outbound | null;
        projectId: string;
        refId: string;
        status: string;
        updatedAt: string;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Webhook> = z.object({
        createdAt: z
            .date()
            .default(() => new Date("2024-01-31T13:57:35.791Z"))
            .transform((v) => v.toISOString()),
        headers: z.nullable(z.lazy(() => Headers$.outboundSchema)),
        id: z.string(),
        payload: z.nullable(z.lazy(() => WebhookPayload$.outboundSchema)),
        projectId: z.string(),
        refId: z.string(),
        status: WebhookStatus$.outboundSchema,
        updatedAt: z
            .date()
            .default(() => new Date("2024-01-31T13:57:35.791Z"))
            .transform((v) => v.toISOString()),
        url: z.string(),
    });
}
