/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Headers = {};

export type WebhookPayload = {};

export enum WebhookStatus {
    Retrying = "RETRYING",
    Successful = "SUCCESSFUL",
    Failed = "FAILED",
    Canceled = "CANCELED",
}

export type Webhook = {
    createdAt?: Date | undefined;
    headers: Headers | null;
    id: string;
    payload: WebhookPayload | null;
    projectId: string;
    refId: string;
    status: WebhookStatus;
    updatedAt?: Date | undefined;
    url: string;
};

/** @internal */
export namespace Headers$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Headers, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Headers> = z.object({});
}

/** @internal */
export namespace WebhookPayload$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<WebhookPayload, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WebhookPayload> = z.object({});
}

/** @internal */
export const WebhookStatus$ = z.nativeEnum(WebhookStatus);

/** @internal */
export namespace Webhook$ {
    export type Inbound = {
        createdAt?: string | undefined;
        headers: Headers$.Inbound | null;
        id: string;
        payload: WebhookPayload$.Inbound | null;
        projectId: string;
        refId: string;
        status: WebhookStatus;
        updatedAt?: string | undefined;
        url: string;
    };

    export const inboundSchema: z.ZodType<Webhook, z.ZodTypeDef, Inbound> = z
        .object({
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            headers: z.lazy(() => Headers$.inboundSchema).nullable(),
            id: z.string(),
            payload: z.lazy(() => WebhookPayload$.inboundSchema).nullable(),
            projectId: z.string(),
            refId: z.string(),
            status: WebhookStatus$,
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                headers: v.headers,
                id: v.id,
                payload: v.payload,
                projectId: v.projectId,
                refId: v.refId,
                status: v.status,
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                url: v.url,
            };
        });

    export type Outbound = {
        createdAt?: string | undefined;
        headers: Headers$.Outbound | null;
        id: string;
        payload: WebhookPayload$.Outbound | null;
        projectId: string;
        refId: string;
        status: WebhookStatus;
        updatedAt?: string | undefined;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Webhook> = z
        .object({
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            headers: z.lazy(() => Headers$.outboundSchema).nullable(),
            id: z.string(),
            payload: z.lazy(() => WebhookPayload$.outboundSchema).nullable(),
            projectId: z.string(),
            refId: z.string(),
            status: WebhookStatus$,
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                headers: v.headers,
                id: v.id,
                payload: v.payload,
                projectId: v.projectId,
                refId: v.refId,
                status: v.status,
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                url: v.url,
            };
        });
}
