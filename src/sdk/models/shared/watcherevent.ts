/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Payload = {};

export enum WatcherEventStatus {
    PendingValidation = "PENDING_VALIDATION",
    Completed = "COMPLETED",
    Canceled = "CANCELED",
}

export type WatcherEvent = {
    blockHash: string;
    blockNumber: number;
    createdAt?: Date | undefined;
    id: string;
    network: string;
    payload: Payload;
    projectId: string;
    status: WatcherEventStatus;
    txHash: string;
    updatedAt?: Date | undefined;
    watcherId: string;
};

/** @internal */
export namespace Payload$ {
    export const inboundSchema: z.ZodType<Payload, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Payload> = z.object({});
}

/** @internal */
export namespace WatcherEventStatus$ {
    export const inboundSchema: z.ZodNativeEnum<typeof WatcherEventStatus> =
        z.nativeEnum(WatcherEventStatus);
    export const outboundSchema: z.ZodNativeEnum<typeof WatcherEventStatus> = inboundSchema;
}

/** @internal */
export namespace WatcherEvent$ {
    export const inboundSchema: z.ZodType<WatcherEvent, z.ZodTypeDef, unknown> = z.object({
        blockHash: z.string(),
        blockNumber: z.number(),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .default("2024-01-31T13:57:36.375Z")
            .transform((v) => new Date(v)),
        id: z.string(),
        network: z.string(),
        payload: z.lazy(() => Payload$.inboundSchema),
        projectId: z.string(),
        status: WatcherEventStatus$.inboundSchema,
        txHash: z.string(),
        updatedAt: z
            .string()
            .datetime({ offset: true })
            .default("2024-01-31T13:57:36.375Z")
            .transform((v) => new Date(v)),
        watcherId: z.string(),
    });

    export type Outbound = {
        blockHash: string;
        blockNumber: number;
        createdAt: string;
        id: string;
        network: string;
        payload: Payload$.Outbound;
        projectId: string;
        status: string;
        txHash: string;
        updatedAt: string;
        watcherId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WatcherEvent> = z.object({
        blockHash: z.string(),
        blockNumber: z.number(),
        createdAt: z
            .date()
            .default(() => new Date("2024-01-31T13:57:36.375Z"))
            .transform((v) => v.toISOString()),
        id: z.string(),
        network: z.string(),
        payload: z.lazy(() => Payload$.outboundSchema),
        projectId: z.string(),
        status: WatcherEventStatus$.outboundSchema,
        txHash: z.string(),
        updatedAt: z
            .date()
            .default(() => new Date("2024-01-31T13:57:36.375Z"))
            .transform((v) => v.toISOString()),
        watcherId: z.string(),
    });
}
