/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Payload = {};

export enum WatcherEventStatus {
    PendingValidation = "PENDING_VALIDATION",
    Completed = "COMPLETED",
    Canceled = "CANCELED",
}

export type WatcherEvent = {
    blockHash: string;
    blockNumber: number;
    createdAt?: Date | undefined;
    id: string;
    network: string;
    payload: Payload;
    projectId: string;
    status: WatcherEventStatus;
    txHash: string;
    updatedAt?: Date | undefined;
    watcherId: string;
};

/** @internal */
export namespace Payload$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Payload, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Payload> = z.object({});
}

/** @internal */
export const WatcherEventStatus$ = z.nativeEnum(WatcherEventStatus);

/** @internal */
export namespace WatcherEvent$ {
    export type Inbound = {
        blockHash: string;
        blockNumber: number;
        createdAt?: string | undefined;
        id: string;
        network: string;
        payload: Payload$.Inbound;
        projectId: string;
        status: WatcherEventStatus;
        txHash: string;
        updatedAt?: string | undefined;
        watcherId: string;
    };

    export const inboundSchema: z.ZodType<WatcherEvent, z.ZodTypeDef, Inbound> = z
        .object({
            blockHash: z.string(),
            blockNumber: z.number(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .default("2023-10-26T19:08:43.685Z")
                .transform((v) => new Date(v)),
            id: z.string(),
            network: z.string(),
            payload: z.lazy(() => Payload$.inboundSchema),
            projectId: z.string(),
            status: WatcherEventStatus$,
            txHash: z.string(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .default("2023-10-26T19:08:43.685Z")
                .transform((v) => new Date(v)),
            watcherId: z.string(),
        })
        .transform((v) => {
            return {
                blockHash: v.blockHash,
                blockNumber: v.blockNumber,
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                id: v.id,
                network: v.network,
                payload: v.payload,
                projectId: v.projectId,
                status: v.status,
                txHash: v.txHash,
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                watcherId: v.watcherId,
            };
        });

    export type Outbound = {
        blockHash: string;
        blockNumber: number;
        createdAt: string;
        id: string;
        network: string;
        payload: Payload$.Outbound;
        projectId: string;
        status: WatcherEventStatus;
        txHash: string;
        updatedAt: string;
        watcherId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WatcherEvent> = z
        .object({
            blockHash: z.string(),
            blockNumber: z.number(),
            createdAt: z
                .date()
                .default(() => new Date("2023-10-26T19:08:43.685Z"))
                .transform((v) => v.toISOString()),
            id: z.string(),
            network: z.string(),
            payload: z.lazy(() => Payload$.outboundSchema),
            projectId: z.string(),
            status: WatcherEventStatus$,
            txHash: z.string(),
            updatedAt: z
                .date()
                .default(() => new Date("2023-10-26T19:08:43.685Z"))
                .transform((v) => v.toISOString()),
            watcherId: z.string(),
        })
        .transform((v) => {
            return {
                blockHash: v.blockHash,
                blockNumber: v.blockNumber,
                createdAt: v.createdAt,
                id: v.id,
                network: v.network,
                payload: v.payload,
                projectId: v.projectId,
                status: v.status,
                txHash: v.txHash,
                updatedAt: v.updatedAt,
                watcherId: v.watcherId,
            };
        });
}
