/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Transform, Type } from "class-transformer";

export class Payload extends SpeakeasyBase {}

export enum WatcherEventStatus {
    PendingValidation = "PENDING_VALIDATION",
    Completed = "COMPLETED",
    Canceled = "CANCELED",
}

export class WatcherEvent extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "blockHash" })
    blockHash: string;

    @SpeakeasyMetadata()
    @Expose({ name: "blockNumber" })
    blockNumber: number;

    @SpeakeasyMetadata()
    @Expose({ name: "createdAt" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    @SpeakeasyMetadata()
    @Expose({ name: "network" })
    network: string;

    @SpeakeasyMetadata()
    @Expose({ name: "payload" })
    @Type(() => Payload)
    payload: Payload;

    @SpeakeasyMetadata()
    @Expose({ name: "projectId" })
    projectId: string;

    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status: WatcherEventStatus;

    @SpeakeasyMetadata()
    @Expose({ name: "txHash" })
    txHash: string;

    @SpeakeasyMetadata()
    @Expose({ name: "updatedAt" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    updatedAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "watcherId" })
    watcherId: string;
}
