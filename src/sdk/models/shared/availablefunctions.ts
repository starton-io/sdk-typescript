/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type AvailableFunctions = {
    call: Array<string>;
    events: Array<string>;
    read: Array<string>;
};

/** @internal */
export const AvailableFunctions$inboundSchema: z.ZodType<
    AvailableFunctions,
    z.ZodTypeDef,
    unknown
> = z.object({
    call: z.array(z.string()),
    events: z.array(z.string()),
    read: z.array(z.string()),
});

/** @internal */
export type AvailableFunctions$Outbound = {
    call: Array<string>;
    events: Array<string>;
    read: Array<string>;
};

/** @internal */
export const AvailableFunctions$outboundSchema: z.ZodType<
    AvailableFunctions$Outbound,
    z.ZodTypeDef,
    AvailableFunctions
> = z.object({
    call: z.array(z.string()),
    events: z.array(z.string()),
    read: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableFunctions$ {
    /** @deprecated use `AvailableFunctions$inboundSchema` instead. */
    export const inboundSchema = AvailableFunctions$inboundSchema;
    /** @deprecated use `AvailableFunctions$outboundSchema` instead. */
    export const outboundSchema = AvailableFunctions$outboundSchema;
    /** @deprecated use `AvailableFunctions$Outbound` instead. */
    export type Outbound = AvailableFunctions$Outbound;
}
