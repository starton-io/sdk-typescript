/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type AvailableFunctions = {
    call: Array<string>;
    events: Array<string>;
    read: Array<string>;
};

/** @internal */
export namespace AvailableFunctions$ {
    export const inboundSchema: z.ZodType<AvailableFunctions, z.ZodTypeDef, unknown> = z.object({
        call: z.array(z.string()),
        events: z.array(z.string()),
        read: z.array(z.string()),
    });

    export type Outbound = {
        call: Array<string>;
        events: Array<string>;
        read: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AvailableFunctions> = z.object({
        call: z.array(z.string()),
        events: z.array(z.string()),
        read: z.array(z.string()),
    });
}
