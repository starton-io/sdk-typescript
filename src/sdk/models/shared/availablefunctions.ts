/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type AvailableFunctions = {
    call: Array<string>;
    events: Array<string>;
    read: Array<string>;
};

/** @internal */
export namespace AvailableFunctions$ {
    export type Inbound = {
        call: Array<string>;
        events: Array<string>;
        read: Array<string>;
    };

    export const inboundSchema: z.ZodType<AvailableFunctions, z.ZodTypeDef, Inbound> = z
        .object({
            call: z.array(z.string()),
            events: z.array(z.string()),
            read: z.array(z.string()),
        })
        .transform((v) => {
            return {
                call: v.call,
                events: v.events,
                read: v.read,
            };
        });

    export type Outbound = {
        call: Array<string>;
        events: Array<string>;
        read: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AvailableFunctions> = z
        .object({
            call: z.array(z.string()),
            events: z.array(z.string()),
            read: z.array(z.string()),
        })
        .transform((v) => {
            return {
                call: v.call,
                events: v.events,
                read: v.read,
            };
        });
}
