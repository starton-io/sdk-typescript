/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum DirectoryContentType {
    Directory = "directory",
    File = "file",
}

export type DirectoryContent = {
    cid: string;
    name: string;
    size: number;
    type?: DirectoryContentType | undefined;
};

/** @internal */
export namespace DirectoryContentType$ {
    export const inboundSchema = z.nativeEnum(DirectoryContentType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DirectoryContent$ {
    export const inboundSchema: z.ZodType<DirectoryContent, z.ZodTypeDef, unknown> = z
        .object({
            cid: z.string(),
            name: z.string(),
            size: z.number(),
            type: DirectoryContentType$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                cid: v.cid,
                name: v.name,
                size: v.size,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        cid: string;
        name: string;
        size: number;
        type?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DirectoryContent> = z
        .object({
            cid: z.string(),
            name: z.string(),
            size: z.number(),
            type: DirectoryContentType$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                cid: v.cid,
                name: v.name,
                size: v.size,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
