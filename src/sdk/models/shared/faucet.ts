/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Faucet = {
    /**
     * Claim date.
     */
    createdAt?: Date | undefined;
    /**
     * Faucet claim id.
     */
    id: string;
    /**
     * Claim ip.
     */
    ip: string;
    /**
     * Testnet network claim.
     */
    network: string | null;
    /**
     * Hash transaction of native faucet transfer.
     */
    txHash?: string | null | undefined;
    /**
     * UserId claim.
     */
    userId?: string | null | undefined;
    /**
     * Claim wallet
     */
    wallet: string;
};

/** @internal */
export namespace Faucet$ {
    export type Inbound = {
        createdAt?: string | undefined;
        id: string;
        ip: string;
        network: string | null;
        txHash?: string | null | undefined;
        userId?: string | null | undefined;
        wallet: string;
    };

    export const inboundSchema: z.ZodType<Faucet, z.ZodTypeDef, Inbound> = z
        .object({
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            id: z.string(),
            ip: z.string(),
            network: z.string().nullable(),
            txHash: z.string().nullable().optional(),
            userId: z.string().nullable().optional(),
            wallet: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                id: v.id,
                ip: v.ip,
                network: v.network,
                ...(v.txHash === undefined ? null : { txHash: v.txHash }),
                ...(v.userId === undefined ? null : { userId: v.userId }),
                wallet: v.wallet,
            };
        });

    export type Outbound = {
        createdAt?: string | undefined;
        id: string;
        ip: string;
        network: string | null;
        txHash?: string | null | undefined;
        userId?: string | null | undefined;
        wallet: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Faucet> = z
        .object({
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            id: z.string(),
            ip: z.string(),
            network: z.string().nullable(),
            txHash: z.string().nullable().optional(),
            userId: z.string().nullable().optional(),
            wallet: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                id: v.id,
                ip: v.ip,
                network: v.network,
                ...(v.txHash === undefined ? null : { txHash: v.txHash }),
                ...(v.userId === undefined ? null : { userId: v.userId }),
                wallet: v.wallet,
            };
        });
}
