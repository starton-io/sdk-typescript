/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Erc20BalanceResponse = {
    /**
     * Balance of the given address.
     */
    balance: string;
    /**
     * ERC20 smart contract address.
     */
    contractAddress: string;
    /**
     * The number of contract decimals.
     */
    decimal: number;
    /**
     * Formatted balance output.
     */
    formatted: string;
    /**
     * ERC20 token symbol.
     */
    symbol: string;
};

/** @internal */
export namespace Erc20BalanceResponse$ {
    export const inboundSchema: z.ZodType<Erc20BalanceResponse, z.ZodTypeDef, unknown> = z
        .object({
            balance: z.string(),
            contractAddress: z.string(),
            decimal: z.number(),
            formatted: z.string(),
            symbol: z.string(),
        })
        .transform((v) => {
            return {
                balance: v.balance,
                contractAddress: v.contractAddress,
                decimal: v.decimal,
                formatted: v.formatted,
                symbol: v.symbol,
            };
        });

    export type Outbound = {
        balance: string;
        contractAddress: string;
        decimal: number;
        formatted: string;
        symbol: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Erc20BalanceResponse> = z
        .object({
            balance: z.string(),
            contractAddress: z.string(),
            decimal: z.number(),
            formatted: z.string(),
            symbol: z.string(),
        })
        .transform((v) => {
            return {
                balance: v.balance,
                contractAddress: v.contractAddress,
                decimal: v.decimal,
                formatted: v.formatted,
                symbol: v.symbol,
            };
        });
}
