/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Components = {};

export type AbiInputDto = {
    components?: Components | undefined;
    indexed?: boolean | undefined;
    internalType?: string | undefined;
    name: string;
    type: string;
};

/** @internal */
export namespace Components$ {
    export const inboundSchema: z.ZodType<Components, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Components> = z.object({});
}

/** @internal */
export namespace AbiInputDto$ {
    export const inboundSchema: z.ZodType<AbiInputDto, z.ZodTypeDef, unknown> = z.object({
        components: z.lazy(() => Components$.inboundSchema).optional(),
        indexed: z.boolean().optional(),
        internalType: z.string().optional(),
        name: z.string(),
        type: z.string(),
    });

    export type Outbound = {
        components?: Components$.Outbound | undefined;
        indexed?: boolean | undefined;
        internalType?: string | undefined;
        name: string;
        type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AbiInputDto> = z.object({
        components: z.lazy(() => Components$.outboundSchema).optional(),
        indexed: z.boolean().optional(),
        internalType: z.string().optional(),
        name: z.string(),
        type: z.string(),
    });
}
