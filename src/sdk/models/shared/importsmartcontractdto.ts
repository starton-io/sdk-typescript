/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AbiObjectDto, AbiObjectDto$ } from "./abiobjectdto.js";
import * as z from "zod";

export type ImportSmartContractDtoMetadata = {};

export type ImportSmartContractDto3 = {};

export type ImportSmartContractDtoParams = ImportSmartContractDto3 | string | number | boolean;

export enum ImportSmartContractDtoDeployMethod {
    Web3 = "web3",
    Kms = "kms",
}

export enum ImportSmartContractDtoVersion {
    One = "1",
}

export type ImportSmartContractDtoUiData = {
    chainId?: number | undefined;
    deployMethod: ImportSmartContractDtoDeployMethod;
    deployType?: string | undefined;
    imported: boolean;
    version: ImportSmartContractDtoVersion;
};

export type ImportSmartContractDto = {
    abi: Array<AbiObjectDto>;
    address: string;
    creationHash?: string | undefined;
    description?: string | undefined;
    metadata?: ImportSmartContractDtoMetadata | undefined;
    name: string;
    network: string;
    /**
     * Smart contract constructor parameters.
     */
    params?: Array<ImportSmartContractDto3 | string | number | boolean> | undefined;
    templateId?: string | undefined;
    uiData?: ImportSmartContractDtoUiData | null | undefined;
};

/** @internal */
export namespace ImportSmartContractDtoMetadata$ {
    export const inboundSchema: z.ZodType<ImportSmartContractDtoMetadata, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ImportSmartContractDtoMetadata> =
        z.object({});
}

/** @internal */
export namespace ImportSmartContractDto3$ {
    export const inboundSchema: z.ZodType<ImportSmartContractDto3, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ImportSmartContractDto3> =
        z.object({});
}

/** @internal */
export namespace ImportSmartContractDtoParams$ {
    export const inboundSchema: z.ZodType<ImportSmartContractDtoParams, z.ZodTypeDef, unknown> =
        z.union([
            z.lazy(() => ImportSmartContractDto3$.inboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);

    export type Outbound = ImportSmartContractDto3$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ImportSmartContractDtoParams> =
        z.union([
            z.lazy(() => ImportSmartContractDto3$.outboundSchema),
            z.string(),
            z.number(),
            z.boolean(),
        ]);
}

/** @internal */
export namespace ImportSmartContractDtoDeployMethod$ {
    export const inboundSchema: z.ZodNativeEnum<typeof ImportSmartContractDtoDeployMethod> =
        z.nativeEnum(ImportSmartContractDtoDeployMethod);
    export const outboundSchema: z.ZodNativeEnum<typeof ImportSmartContractDtoDeployMethod> =
        inboundSchema;
}

/** @internal */
export namespace ImportSmartContractDtoVersion$ {
    export const inboundSchema: z.ZodNativeEnum<typeof ImportSmartContractDtoVersion> =
        z.nativeEnum(ImportSmartContractDtoVersion);
    export const outboundSchema: z.ZodNativeEnum<typeof ImportSmartContractDtoVersion> =
        inboundSchema;
}

/** @internal */
export namespace ImportSmartContractDtoUiData$ {
    export const inboundSchema: z.ZodType<ImportSmartContractDtoUiData, z.ZodTypeDef, unknown> =
        z.object({
            chainId: z.number().optional(),
            deployMethod: ImportSmartContractDtoDeployMethod$.inboundSchema,
            deployType: z.string().optional(),
            imported: z.boolean(),
            version: ImportSmartContractDtoVersion$.inboundSchema,
        });

    export type Outbound = {
        chainId?: number | undefined;
        deployMethod: string;
        deployType?: string | undefined;
        imported: boolean;
        version: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ImportSmartContractDtoUiData> =
        z.object({
            chainId: z.number().optional(),
            deployMethod: ImportSmartContractDtoDeployMethod$.outboundSchema,
            deployType: z.string().optional(),
            imported: z.boolean(),
            version: ImportSmartContractDtoVersion$.outboundSchema,
        });
}

/** @internal */
export namespace ImportSmartContractDto$ {
    export const inboundSchema: z.ZodType<ImportSmartContractDto, z.ZodTypeDef, unknown> = z.object(
        {
            abi: z.array(AbiObjectDto$.inboundSchema),
            address: z.string(),
            creationHash: z.string().optional(),
            description: z.string().optional(),
            metadata: z.lazy(() => ImportSmartContractDtoMetadata$.inboundSchema).optional(),
            name: z.string(),
            network: z.string(),
            params: z
                .array(
                    z.union([
                        z.lazy(() => ImportSmartContractDto3$.inboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            templateId: z.string().optional(),
            uiData: z
                .nullable(z.lazy(() => ImportSmartContractDtoUiData$.inboundSchema))
                .optional(),
        }
    );

    export type Outbound = {
        abi: Array<AbiObjectDto$.Outbound>;
        address: string;
        creationHash?: string | undefined;
        description?: string | undefined;
        metadata?: ImportSmartContractDtoMetadata$.Outbound | undefined;
        name: string;
        network: string;
        params?: Array<ImportSmartContractDto3$.Outbound | string | number | boolean> | undefined;
        templateId?: string | undefined;
        uiData?: ImportSmartContractDtoUiData$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ImportSmartContractDto> =
        z.object({
            abi: z.array(AbiObjectDto$.outboundSchema),
            address: z.string(),
            creationHash: z.string().optional(),
            description: z.string().optional(),
            metadata: z.lazy(() => ImportSmartContractDtoMetadata$.outboundSchema).optional(),
            name: z.string(),
            network: z.string(),
            params: z
                .array(
                    z.union([
                        z.lazy(() => ImportSmartContractDto3$.outboundSchema),
                        z.string(),
                        z.number(),
                        z.boolean(),
                    ])
                )
                .optional(),
            templateId: z.string().optional(),
            uiData: z
                .nullable(z.lazy(() => ImportSmartContractDtoUiData$.outboundSchema))
                .optional(),
        });
}
