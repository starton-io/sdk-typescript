/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type CustomEventAbi = {};

export type CustomFilters = {};

export type CreateWatcherDtoMetadata = {};

export enum CreateWatcherDtoType {
    MinedTransaction = "MINED_TRANSACTION",
    AddressActivity = "ADDRESS_ACTIVITY",
    AddressReceivedNativeCurrency = "ADDRESS_RECEIVED_NATIVE_CURRENCY",
    AddressSentNativeCurrency = "ADDRESS_SENT_NATIVE_CURRENCY",
    EventTransfer = "EVENT_TRANSFER",
    Erc721EventTransfer = "ERC721_EVENT_TRANSFER",
    Erc1155EventTransferSingle = "ERC1155_EVENT_TRANSFER_SINGLE",
    Erc1155EventTransferBatch = "ERC1155_EVENT_TRANSFER_BATCH",
    EventMint = "EVENT_MINT",
    EventApproval = "EVENT_APPROVAL",
    EventCustom = "EVENT_CUSTOM",
}

export type CreateWatcherDto = {
    address: string;
    confirmationsBlocks: number;
    customEventAbi?: CustomEventAbi | undefined;
    customFilters?: CustomFilters | undefined;
    description?: string | null | undefined;
    metadata?: CreateWatcherDtoMetadata | undefined;
    name?: string | null | undefined;
    network: string;
    type: CreateWatcherDtoType;
    webhookUrl: string;
};

/** @internal */
export namespace CustomEventAbi$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<CustomEventAbi, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CustomEventAbi> = z.object({});
}

/** @internal */
export namespace CustomFilters$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<CustomFilters, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CustomFilters> = z.object({});
}

/** @internal */
export namespace CreateWatcherDtoMetadata$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<CreateWatcherDtoMetadata, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateWatcherDtoMetadata> =
        z.object({});
}

/** @internal */
export const CreateWatcherDtoType$ = z.nativeEnum(CreateWatcherDtoType);

/** @internal */
export namespace CreateWatcherDto$ {
    export type Inbound = {
        address: string;
        confirmationsBlocks: number;
        customEventAbi?: CustomEventAbi$.Inbound | undefined;
        customFilters?: CustomFilters$.Inbound | undefined;
        description?: string | null | undefined;
        metadata?: CreateWatcherDtoMetadata$.Inbound | undefined;
        name?: string | null | undefined;
        network: string;
        type: CreateWatcherDtoType;
        webhookUrl: string;
    };

    export const inboundSchema: z.ZodType<CreateWatcherDto, z.ZodTypeDef, Inbound> = z
        .object({
            address: z.string(),
            confirmationsBlocks: z.number(),
            customEventAbi: z.lazy(() => CustomEventAbi$.inboundSchema).optional(),
            customFilters: z.lazy(() => CustomFilters$.inboundSchema).optional(),
            description: z.nullable(z.string()).optional(),
            metadata: z.lazy(() => CreateWatcherDtoMetadata$.inboundSchema).optional(),
            name: z.nullable(z.string()).optional(),
            network: z.string(),
            type: CreateWatcherDtoType$,
            webhookUrl: z.string(),
        })
        .transform((v) => {
            return {
                address: v.address,
                confirmationsBlocks: v.confirmationsBlocks,
                ...(v.customEventAbi === undefined ? null : { customEventAbi: v.customEventAbi }),
                ...(v.customFilters === undefined ? null : { customFilters: v.customFilters }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.name === undefined ? null : { name: v.name }),
                network: v.network,
                type: v.type,
                webhookUrl: v.webhookUrl,
            };
        });

    export type Outbound = {
        address: string;
        confirmationsBlocks: number;
        customEventAbi?: CustomEventAbi$.Outbound | undefined;
        customFilters?: CustomFilters$.Outbound | undefined;
        description?: string | null | undefined;
        metadata?: CreateWatcherDtoMetadata$.Outbound | undefined;
        name?: string | null | undefined;
        network: string;
        type: CreateWatcherDtoType;
        webhookUrl: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateWatcherDto> = z
        .object({
            address: z.string(),
            confirmationsBlocks: z.number(),
            customEventAbi: z.lazy(() => CustomEventAbi$.outboundSchema).optional(),
            customFilters: z.lazy(() => CustomFilters$.outboundSchema).optional(),
            description: z.nullable(z.string()).optional(),
            metadata: z.lazy(() => CreateWatcherDtoMetadata$.outboundSchema).optional(),
            name: z.nullable(z.string()).optional(),
            network: z.string(),
            type: CreateWatcherDtoType$,
            webhookUrl: z.string(),
        })
        .transform((v) => {
            return {
                address: v.address,
                confirmationsBlocks: v.confirmationsBlocks,
                ...(v.customEventAbi === undefined ? null : { customEventAbi: v.customEventAbi }),
                ...(v.customFilters === undefined ? null : { customFilters: v.customFilters }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.name === undefined ? null : { name: v.name }),
                network: v.network,
                type: v.type,
                webhookUrl: v.webhookUrl,
            };
        });
}
