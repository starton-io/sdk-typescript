/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export class CustomEventAbi extends SpeakeasyBase {}

export class CustomFilters extends SpeakeasyBase {}

export class CreateWatcherDtoMetadata extends SpeakeasyBase {}

export enum CreateWatcherDtoType {
    MinedTransaction = "MINED_TRANSACTION",
    AddressActivity = "ADDRESS_ACTIVITY",
    AddressReceivedNativeCurrency = "ADDRESS_RECEIVED_NATIVE_CURRENCY",
    AddressSentNativeCurrency = "ADDRESS_SENT_NATIVE_CURRENCY",
    EventTransfer = "EVENT_TRANSFER",
    Erc721EventTransfer = "ERC721_EVENT_TRANSFER",
    Erc1155EventTransferSingle = "ERC1155_EVENT_TRANSFER_SINGLE",
    Erc1155EventTransferBatch = "ERC1155_EVENT_TRANSFER_BATCH",
    EventMint = "EVENT_MINT",
    EventApproval = "EVENT_APPROVAL",
    EventCustom = "EVENT_CUSTOM",
}

export class CreateWatcherDto extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "address" })
    address: string;

    @SpeakeasyMetadata()
    @Expose({ name: "confirmationsBlocks" })
    confirmationsBlocks: number;

    @SpeakeasyMetadata()
    @Expose({ name: "customEventAbi" })
    @Type(() => CustomEventAbi)
    customEventAbi?: CustomEventAbi;

    @SpeakeasyMetadata()
    @Expose({ name: "customFilters" })
    @Type(() => CustomFilters)
    customFilters?: CustomFilters;

    @SpeakeasyMetadata()
    @Expose({ name: "description" })
    description?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "metadata" })
    @Type(() => CreateWatcherDtoMetadata)
    metadata?: CreateWatcherDtoMetadata;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "network" })
    network: string;

    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type: CreateWatcherDtoType;

    @SpeakeasyMetadata()
    @Expose({ name: "webhookUrl" })
    webhookUrl: string;
}
