/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Params = {};

export type ReadSmartContractResponse = {
    address: string;
    functionName: string;
    network: string;
    params: Array<Params>;
    response: string;
};

/** @internal */
export namespace Params$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Params, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Params> = z.object({});
}

/** @internal */
export namespace ReadSmartContractResponse$ {
    export type Inbound = {
        address: string;
        functionName: string;
        network: string;
        params: Array<Params$.Inbound>;
        response: string;
    };

    export const inboundSchema: z.ZodType<ReadSmartContractResponse, z.ZodTypeDef, Inbound> = z
        .object({
            address: z.string(),
            functionName: z.string(),
            network: z.string(),
            params: z.array(z.lazy(() => Params$.inboundSchema)),
            response: z.string(),
        })
        .transform((v) => {
            return {
                address: v.address,
                functionName: v.functionName,
                network: v.network,
                params: v.params,
                response: v.response,
            };
        });

    export type Outbound = {
        address: string;
        functionName: string;
        network: string;
        params: Array<Params$.Outbound>;
        response: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReadSmartContractResponse> = z
        .object({
            address: z.string(),
            functionName: z.string(),
            network: z.string(),
            params: z.array(z.lazy(() => Params$.outboundSchema)),
            response: z.string(),
        })
        .transform((v) => {
            return {
                address: v.address,
                functionName: v.functionName,
                network: v.network,
                params: v.params,
                response: v.response,
            };
        });
}
