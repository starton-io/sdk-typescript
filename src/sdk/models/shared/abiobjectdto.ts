/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AbiInputDto } from "./abiinputdto";
import { AbiOutputDto } from "./abioutputdto";
import { Expose, Type } from "class-transformer";

export enum StateMutability {
    Pure = "pure",
    View = "view",
    Nonpayable = "nonpayable",
    Payable = "payable",
}

export enum TypeT {
    Constructor = "constructor",
    Event = "event",
    Function = "function",
    Receive = "receive",
    Fallback = "fallback",
    Error = "error",
}

export class AbiObjectDto extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "anonymous" })
    anonymous?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "constant" })
    constant?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "inputs" })
    @Type(() => AbiInputDto)
    inputs?: AbiInputDto;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "outputs" })
    @Type(() => AbiOutputDto)
    outputs?: AbiOutputDto;

    @SpeakeasyMetadata()
    @Expose({ name: "payability" })
    payability?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "stateMutability" })
    stateMutability?: StateMutability;

    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type: TypeT;
}
