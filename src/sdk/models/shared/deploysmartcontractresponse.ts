/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SmartContract,
  SmartContract$inboundSchema,
  SmartContract$Outbound,
  SmartContract$outboundSchema,
} from "./smartcontract.js";
import {
  Transaction,
  Transaction$inboundSchema,
  Transaction$Outbound,
  Transaction$outboundSchema,
} from "./transaction.js";

export type DeploySmartContractResponse = {
  smartContract: SmartContract;
  transaction: Transaction;
};

/** @internal */
export const DeploySmartContractResponse$inboundSchema: z.ZodType<
  DeploySmartContractResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  smartContract: SmartContract$inboundSchema,
  transaction: Transaction$inboundSchema,
});

/** @internal */
export type DeploySmartContractResponse$Outbound = {
  smartContract: SmartContract$Outbound;
  transaction: Transaction$Outbound;
};

/** @internal */
export const DeploySmartContractResponse$outboundSchema: z.ZodType<
  DeploySmartContractResponse$Outbound,
  z.ZodTypeDef,
  DeploySmartContractResponse
> = z.object({
  smartContract: SmartContract$outboundSchema,
  transaction: Transaction$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeploySmartContractResponse$ {
  /** @deprecated use `DeploySmartContractResponse$inboundSchema` instead. */
  export const inboundSchema = DeploySmartContractResponse$inboundSchema;
  /** @deprecated use `DeploySmartContractResponse$outboundSchema` instead. */
  export const outboundSchema = DeploySmartContractResponse$outboundSchema;
  /** @deprecated use `DeploySmartContractResponse$Outbound` instead. */
  export type Outbound = DeploySmartContractResponse$Outbound;
}

export function deploySmartContractResponseToJSON(
  deploySmartContractResponse: DeploySmartContractResponse,
): string {
  return JSON.stringify(
    DeploySmartContractResponse$outboundSchema.parse(
      deploySmartContractResponse,
    ),
  );
}

export function deploySmartContractResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeploySmartContractResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeploySmartContractResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeploySmartContractResponse' from JSON`,
  );
}
