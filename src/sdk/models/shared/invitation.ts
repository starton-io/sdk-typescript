/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum InvitationRole {
    Owner = "owner",
}

export type Invitation = {
    createdAt: Date;
    email: string;
    id: string;
    projectId: string;
    role: InvitationRole;
    updatedAt: Date;
};

/** @internal */
export const InvitationRole$ = z.nativeEnum(InvitationRole);

/** @internal */
export namespace Invitation$ {
    export type Inbound = {
        createdAt: string;
        email: string;
        id: string;
        projectId: string;
        role: InvitationRole;
        updatedAt: string;
    };

    export const inboundSchema: z.ZodType<Invitation, z.ZodTypeDef, Inbound> = z
        .object({
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            email: z.string(),
            id: z.string(),
            projectId: z.string(),
            role: InvitationRole$,
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
        })
        .transform((v) => {
            return {
                createdAt: v.createdAt,
                email: v.email,
                id: v.id,
                projectId: v.projectId,
                role: v.role,
                updatedAt: v.updatedAt,
            };
        });

    export type Outbound = {
        createdAt: string;
        email: string;
        id: string;
        projectId: string;
        role: InvitationRole;
        updatedAt: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Invitation> = z
        .object({
            createdAt: z.date().transform((v) => v.toISOString()),
            email: z.string(),
            id: z.string(),
            projectId: z.string(),
            role: InvitationRole$,
            updatedAt: z.date().transform((v) => v.toISOString()),
        })
        .transform((v) => {
            return {
                createdAt: v.createdAt,
                email: v.email,
                id: v.id,
                projectId: v.projectId,
                role: v.role,
                updatedAt: v.updatedAt,
            };
        });
}
