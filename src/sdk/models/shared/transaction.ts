/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { TransactionLog } from "./transactionlog";
import { Expose, Transform, Type } from "class-transformer";

export class TransactionMetadata extends SpeakeasyBase {}

export enum TransactionSpeed {
    Low = "low",
    Average = "average",
    Fast = "fast",
    Fastest = "fastest",
    Custom = "custom",
}

export enum TransactionState {
    Success = "SUCCESS",
    Pending = "PENDING",
    ManualActionRequired = "MANUAL_ACTION_REQUIRED",
    Error = "ERROR",
}

export enum TransactionStatus {
    Unsigned = "UNSIGNED",
    ErrorTx = "ERROR_TX",
    ErrorPublish = "ERROR_PUBLISH",
    Published = "PUBLISHED",
    ReceivedByStarton = "RECEIVED_BY_STARTON",
    CreatedByStarton = "CREATED_BY_STARTON",
    CouldNotEstimateGasPrice = "COULD_NOT_ESTIMATE_GAS_PRICE",
    CouldNotIncreaseGasPrice = "COULD_NOT_INCREASE_GAS_PRICE",
    GasPriceEstimated = "GAS_PRICE_ESTIMATED",
    InvalidGasPrice = "INVALID_GAS_PRICE",
    ReplacementGasPriceUnderpriced = "REPLACEMENT_GAS_PRICE_UNDERPRICED",
    CouldNotEstimateGasLimit = "COULD_NOT_ESTIMATE_GAS_LIMIT",
    GasLimitEstimated = "GAS_LIMIT_ESTIMATED",
    ExecutionWillFail = "EXECUTION_WILL_FAIL",
    InvalidArgument = "INVALID_ARGUMENT",
    InsufficientFunds = "INSUFFICIENT_FUNDS",
    InsufficientFundsAfterBroadcast = "INSUFFICIENT_FUNDS_AFTER_BROADCAST",
    CouldNotAssignNonce = "COULD_NOT_ASSIGN_NONCE",
    CouldNotUnstuckNonce = "COULD_NOT_UNSTUCK_NONCE",
    NonceAssigned = "NONCE_ASSIGNED",
    NonceExpired = "NONCE_EXPIRED",
    CouldNotSign = "COULD_NOT_SIGN",
    Signed = "SIGNED",
    SentToMempool = "SENT_TO_MEMPOOL",
    CouldNotBroadcast = "COULD_NOT_BROADCAST",
    AlreadyKnown = "ALREADY_KNOWN",
    Mined = "MINED",
    Confirmed = "CONFIRMED",
    Replaced = "REPLACED",
    Failed = "FAILED",
    MonitoringInProgress = "MONITORING_IN_PROGRESS",
    StuckByPreviousTransaction = "STUCK_BY_PREVIOUS_TRANSACTION",
    MaxGasPriceReach = "MAX_GAS_PRICE_REACH",
    GasPriceIncreased = "GAS_PRICE_INCREASED",
    NewTransactionHash = "NEW_TRANSACTION_HASH",
    Unknown = "UNKNOWN",
    MonitoringInterrupted = "MONITORING_INTERRUPTED",
}

export class Transaction extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "automaticNonce" })
    automaticNonce: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "blockHash" })
    blockHash?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "blockNumber" })
    blockNumber?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "chainId" })
    chainId: number;

    @SpeakeasyMetadata()
    @Expose({ name: "createdAt" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "data" })
    data?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "from" })
    from: string;

    @SpeakeasyMetadata()
    @Expose({ name: "gasLimit" })
    gasLimit?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "gasPrice" })
    gasPrice?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    @SpeakeasyMetadata()
    @Expose({ name: "isDeployTransaction" })
    isDeployTransaction: boolean;

    @SpeakeasyMetadata({ elemType: TransactionLog })
    @Expose({ name: "logs" })
    @Type(() => TransactionLog)
    logs: TransactionLog[];

    @SpeakeasyMetadata()
    @Expose({ name: "maxFeePerGas" })
    maxFeePerGas?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "maxPriorityFeePerGas" })
    maxPriorityFeePerGas?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "metadata" })
    @Type(() => TransactionMetadata)
    metadata?: TransactionMetadata;

    @SpeakeasyMetadata()
    @Expose({ name: "minedDate" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    minedDate?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "network" })
    network: string;

    @SpeakeasyMetadata()
    @Expose({ name: "nonce" })
    nonce?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "parentTransaction" })
    parentTransaction?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "projectId" })
    projectId: string;

    @SpeakeasyMetadata()
    @Expose({ name: "publishedDate" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    publishedDate?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "signedTransaction" })
    signedTransaction?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "signerWallet" })
    signerWallet: string;

    @SpeakeasyMetadata()
    @Expose({ name: "speed" })
    speed?: TransactionSpeed;

    @SpeakeasyMetadata()
    @Expose({ name: "state" })
    state: TransactionState;

    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status: TransactionStatus;

    @SpeakeasyMetadata()
    @Expose({ name: "to" })
    to?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "transactionHash" })
    transactionHash?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "updatedAt" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    updatedAt?: Date;

    @SpeakeasyMetadata()
    @Expose({ name: "value" })
    value: string;
}
