/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    TransactionLog,
    TransactionLog$inboundSchema,
    TransactionLog$Outbound,
    TransactionLog$outboundSchema,
} from "./transactionlog.js";
import * as z from "zod";

export type TransactionMetadata = {};

export enum TransactionSpeed {
    Low = "low",
    Average = "average",
    Fast = "fast",
    Fastest = "fastest",
    Custom = "custom",
}

export enum TransactionState {
    Success = "SUCCESS",
    Pending = "PENDING",
    ManualActionRequired = "MANUAL_ACTION_REQUIRED",
    Error = "ERROR",
}

export enum TransactionStatus {
    Unsigned = "UNSIGNED",
    ErrorTx = "ERROR_TX",
    ErrorPublish = "ERROR_PUBLISH",
    Published = "PUBLISHED",
    ReceivedByStarton = "RECEIVED_BY_STARTON",
    CreatedByStarton = "CREATED_BY_STARTON",
    CouldNotEstimateGasPrice = "COULD_NOT_ESTIMATE_GAS_PRICE",
    CouldNotIncreaseGasPrice = "COULD_NOT_INCREASE_GAS_PRICE",
    GasPriceEstimated = "GAS_PRICE_ESTIMATED",
    InvalidGasPrice = "INVALID_GAS_PRICE",
    ReplacementGasPriceUnderpriced = "REPLACEMENT_GAS_PRICE_UNDERPRICED",
    CouldNotEstimateGasLimit = "COULD_NOT_ESTIMATE_GAS_LIMIT",
    GasLimitEstimated = "GAS_LIMIT_ESTIMATED",
    ExecutionWillFail = "EXECUTION_WILL_FAIL",
    InvalidArgument = "INVALID_ARGUMENT",
    InsufficientFunds = "INSUFFICIENT_FUNDS",
    InsufficientFundsAfterBroadcast = "INSUFFICIENT_FUNDS_AFTER_BROADCAST",
    CouldNotAssignNonce = "COULD_NOT_ASSIGN_NONCE",
    CouldNotUnstuckNonce = "COULD_NOT_UNSTUCK_NONCE",
    NonceAssigned = "NONCE_ASSIGNED",
    NonceExpired = "NONCE_EXPIRED",
    CouldNotSign = "COULD_NOT_SIGN",
    Signed = "SIGNED",
    SentToMempool = "SENT_TO_MEMPOOL",
    CouldNotBroadcast = "COULD_NOT_BROADCAST",
    AlreadyKnown = "ALREADY_KNOWN",
    Mined = "MINED",
    Confirmed = "CONFIRMED",
    Replaced = "REPLACED",
    Failed = "FAILED",
    MonitoringInProgress = "MONITORING_IN_PROGRESS",
    StuckByPreviousTransaction = "STUCK_BY_PREVIOUS_TRANSACTION",
    MaxGasPriceReach = "MAX_GAS_PRICE_REACH",
    GasPriceIncreased = "GAS_PRICE_INCREASED",
    NewTransactionHash = "NEW_TRANSACTION_HASH",
    Unknown = "UNKNOWN",
    MonitoringInterrupted = "MONITORING_INTERRUPTED",
}

export type Transaction = {
    automaticNonce: boolean;
    blockHash?: string | null | undefined;
    blockNumber?: number | null | undefined;
    chainId: number;
    createdAt?: Date | undefined;
    data?: string | null | undefined;
    from: string;
    gasLimit?: string | null | undefined;
    gasPrice?: string | null | undefined;
    id: string;
    isDeployTransaction: boolean;
    logs: Array<TransactionLog>;
    maxFeePerGas?: string | null | undefined;
    maxPriorityFeePerGas?: string | null | undefined;
    metadata?: TransactionMetadata | null | undefined;
    minedDate?: Date | null | undefined;
    network: string;
    nonce?: number | null | undefined;
    parentTransaction?: string | null | undefined;
    projectId: string;
    publishedDate?: Date | null | undefined;
    signedTransaction?: string | null | undefined;
    signerWallet: string;
    speed?: TransactionSpeed | null | undefined;
    state: TransactionState;
    status: TransactionStatus;
    to?: string | null | undefined;
    transactionHash?: string | null | undefined;
    type?: number | null | undefined;
    updatedAt?: Date | undefined;
    value: string;
};

/** @internal */
export const TransactionMetadata$inboundSchema: z.ZodType<
    TransactionMetadata,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type TransactionMetadata$Outbound = {};

/** @internal */
export const TransactionMetadata$outboundSchema: z.ZodType<
    TransactionMetadata$Outbound,
    z.ZodTypeDef,
    TransactionMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionMetadata$ {
    /** @deprecated use `TransactionMetadata$inboundSchema` instead. */
    export const inboundSchema = TransactionMetadata$inboundSchema;
    /** @deprecated use `TransactionMetadata$outboundSchema` instead. */
    export const outboundSchema = TransactionMetadata$outboundSchema;
    /** @deprecated use `TransactionMetadata$Outbound` instead. */
    export type Outbound = TransactionMetadata$Outbound;
}

/** @internal */
export const TransactionSpeed$inboundSchema: z.ZodNativeEnum<typeof TransactionSpeed> =
    z.nativeEnum(TransactionSpeed);

/** @internal */
export const TransactionSpeed$outboundSchema: z.ZodNativeEnum<typeof TransactionSpeed> =
    TransactionSpeed$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionSpeed$ {
    /** @deprecated use `TransactionSpeed$inboundSchema` instead. */
    export const inboundSchema = TransactionSpeed$inboundSchema;
    /** @deprecated use `TransactionSpeed$outboundSchema` instead. */
    export const outboundSchema = TransactionSpeed$outboundSchema;
}

/** @internal */
export const TransactionState$inboundSchema: z.ZodNativeEnum<typeof TransactionState> =
    z.nativeEnum(TransactionState);

/** @internal */
export const TransactionState$outboundSchema: z.ZodNativeEnum<typeof TransactionState> =
    TransactionState$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionState$ {
    /** @deprecated use `TransactionState$inboundSchema` instead. */
    export const inboundSchema = TransactionState$inboundSchema;
    /** @deprecated use `TransactionState$outboundSchema` instead. */
    export const outboundSchema = TransactionState$outboundSchema;
}

/** @internal */
export const TransactionStatus$inboundSchema: z.ZodNativeEnum<typeof TransactionStatus> =
    z.nativeEnum(TransactionStatus);

/** @internal */
export const TransactionStatus$outboundSchema: z.ZodNativeEnum<typeof TransactionStatus> =
    TransactionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionStatus$ {
    /** @deprecated use `TransactionStatus$inboundSchema` instead. */
    export const inboundSchema = TransactionStatus$inboundSchema;
    /** @deprecated use `TransactionStatus$outboundSchema` instead. */
    export const outboundSchema = TransactionStatus$outboundSchema;
}

/** @internal */
export const Transaction$inboundSchema: z.ZodType<Transaction, z.ZodTypeDef, unknown> = z.object({
    automaticNonce: z.boolean(),
    blockHash: z.nullable(z.string()).optional(),
    blockNumber: z.nullable(z.number()).optional(),
    chainId: z.number(),
    createdAt: z
        .string()
        .datetime({ offset: true })
        .default("2024-05-02T09:34:19.251Z")
        .transform((v) => new Date(v)),
    data: z.nullable(z.string()).optional(),
    from: z.string(),
    gasLimit: z.nullable(z.string()).optional(),
    gasPrice: z.nullable(z.string()).optional(),
    id: z.string(),
    isDeployTransaction: z.boolean(),
    logs: z.array(TransactionLog$inboundSchema),
    maxFeePerGas: z.nullable(z.string()).optional(),
    maxPriorityFeePerGas: z.nullable(z.string()).optional(),
    metadata: z.nullable(z.lazy(() => TransactionMetadata$inboundSchema)).optional(),
    minedDate: z
        .nullable(
            z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
        )
        .optional(),
    network: z.string(),
    nonce: z.nullable(z.number()).optional(),
    parentTransaction: z.nullable(z.string()).optional(),
    projectId: z.string(),
    publishedDate: z
        .nullable(
            z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
        )
        .optional(),
    signedTransaction: z.nullable(z.string()).optional(),
    signerWallet: z.string(),
    speed: z.nullable(TransactionSpeed$inboundSchema).optional(),
    state: TransactionState$inboundSchema,
    status: TransactionStatus$inboundSchema,
    to: z.nullable(z.string()).optional(),
    transactionHash: z.nullable(z.string()).optional(),
    type: z.nullable(z.number()).optional(),
    updatedAt: z
        .string()
        .datetime({ offset: true })
        .default("2024-05-02T09:34:19.251Z")
        .transform((v) => new Date(v)),
    value: z.string(),
});

/** @internal */
export type Transaction$Outbound = {
    automaticNonce: boolean;
    blockHash?: string | null | undefined;
    blockNumber?: number | null | undefined;
    chainId: number;
    createdAt: string;
    data?: string | null | undefined;
    from: string;
    gasLimit?: string | null | undefined;
    gasPrice?: string | null | undefined;
    id: string;
    isDeployTransaction: boolean;
    logs: Array<TransactionLog$Outbound>;
    maxFeePerGas?: string | null | undefined;
    maxPriorityFeePerGas?: string | null | undefined;
    metadata?: TransactionMetadata$Outbound | null | undefined;
    minedDate?: string | null | undefined;
    network: string;
    nonce?: number | null | undefined;
    parentTransaction?: string | null | undefined;
    projectId: string;
    publishedDate?: string | null | undefined;
    signedTransaction?: string | null | undefined;
    signerWallet: string;
    speed?: string | null | undefined;
    state: string;
    status: string;
    to?: string | null | undefined;
    transactionHash?: string | null | undefined;
    type?: number | null | undefined;
    updatedAt: string;
    value: string;
};

/** @internal */
export const Transaction$outboundSchema: z.ZodType<
    Transaction$Outbound,
    z.ZodTypeDef,
    Transaction
> = z.object({
    automaticNonce: z.boolean(),
    blockHash: z.nullable(z.string()).optional(),
    blockNumber: z.nullable(z.number()).optional(),
    chainId: z.number(),
    createdAt: z
        .date()
        .default(() => new Date("2024-05-02T09:34:19.251Z"))
        .transform((v) => v.toISOString()),
    data: z.nullable(z.string()).optional(),
    from: z.string(),
    gasLimit: z.nullable(z.string()).optional(),
    gasPrice: z.nullable(z.string()).optional(),
    id: z.string(),
    isDeployTransaction: z.boolean(),
    logs: z.array(TransactionLog$outboundSchema),
    maxFeePerGas: z.nullable(z.string()).optional(),
    maxPriorityFeePerGas: z.nullable(z.string()).optional(),
    metadata: z.nullable(z.lazy(() => TransactionMetadata$outboundSchema)).optional(),
    minedDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
    network: z.string(),
    nonce: z.nullable(z.number()).optional(),
    parentTransaction: z.nullable(z.string()).optional(),
    projectId: z.string(),
    publishedDate: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
    signedTransaction: z.nullable(z.string()).optional(),
    signerWallet: z.string(),
    speed: z.nullable(TransactionSpeed$outboundSchema).optional(),
    state: TransactionState$outboundSchema,
    status: TransactionStatus$outboundSchema,
    to: z.nullable(z.string()).optional(),
    transactionHash: z.nullable(z.string()).optional(),
    type: z.nullable(z.number()).optional(),
    updatedAt: z
        .date()
        .default(() => new Date("2024-05-02T09:34:19.251Z"))
        .transform((v) => v.toISOString()),
    value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Transaction$ {
    /** @deprecated use `Transaction$inboundSchema` instead. */
    export const inboundSchema = Transaction$inboundSchema;
    /** @deprecated use `Transaction$outboundSchema` instead. */
    export const outboundSchema = Transaction$outboundSchema;
    /** @deprecated use `Transaction$Outbound` instead. */
    export type Outbound = Transaction$Outbound;
}
