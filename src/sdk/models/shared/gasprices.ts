/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  GasPriceInfo,
  GasPriceInfo$inboundSchema,
  GasPriceInfo$Outbound,
  GasPriceInfo$outboundSchema,
} from "./gaspriceinfo.js";

export type GasPrices = {
  /**
   * average gas price for network
   */
  average: GasPriceInfo;
  /**
   * fast gas price for network
   */
  fast: GasPriceInfo;
  /**
   * fastest gas price for network
   */
  fastest: GasPriceInfo;
  /**
   * low gas price for network
   */
  low: GasPriceInfo;
};

/** @internal */
export const GasPrices$inboundSchema: z.ZodType<
  GasPrices,
  z.ZodTypeDef,
  unknown
> = z.object({
  average: GasPriceInfo$inboundSchema,
  fast: GasPriceInfo$inboundSchema,
  fastest: GasPriceInfo$inboundSchema,
  low: GasPriceInfo$inboundSchema,
});

/** @internal */
export type GasPrices$Outbound = {
  average: GasPriceInfo$Outbound;
  fast: GasPriceInfo$Outbound;
  fastest: GasPriceInfo$Outbound;
  low: GasPriceInfo$Outbound;
};

/** @internal */
export const GasPrices$outboundSchema: z.ZodType<
  GasPrices$Outbound,
  z.ZodTypeDef,
  GasPrices
> = z.object({
  average: GasPriceInfo$outboundSchema,
  fast: GasPriceInfo$outboundSchema,
  fastest: GasPriceInfo$outboundSchema,
  low: GasPriceInfo$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GasPrices$ {
  /** @deprecated use `GasPrices$inboundSchema` instead. */
  export const inboundSchema = GasPrices$inboundSchema;
  /** @deprecated use `GasPrices$outboundSchema` instead. */
  export const outboundSchema = GasPrices$outboundSchema;
  /** @deprecated use `GasPrices$Outbound` instead. */
  export type Outbound = GasPrices$Outbound;
}

export function gasPricesToJSON(gasPrices: GasPrices): string {
  return JSON.stringify(GasPrices$outboundSchema.parse(gasPrices));
}

export function gasPricesFromJSON(
  jsonString: string,
): SafeParseResult<GasPrices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GasPrices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GasPrices' from JSON`,
  );
}
