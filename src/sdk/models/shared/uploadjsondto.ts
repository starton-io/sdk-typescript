/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Content = {};

export type UploadJsonDtoMetadata = {};

export type UploadJsonDto = {
  content: Content;
  metadata?: UploadJsonDtoMetadata | undefined;
  name: string;
};

/** @internal */
export const Content$inboundSchema: z.ZodType<Content, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Content$Outbound = {};

/** @internal */
export const Content$outboundSchema: z.ZodType<
  Content$Outbound,
  z.ZodTypeDef,
  Content
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Content$ {
  /** @deprecated use `Content$inboundSchema` instead. */
  export const inboundSchema = Content$inboundSchema;
  /** @deprecated use `Content$outboundSchema` instead. */
  export const outboundSchema = Content$outboundSchema;
  /** @deprecated use `Content$Outbound` instead. */
  export type Outbound = Content$Outbound;
}

export function contentToJSON(content: Content): string {
  return JSON.stringify(Content$outboundSchema.parse(content));
}

export function contentFromJSON(
  jsonString: string,
): SafeParseResult<Content, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Content$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Content' from JSON`,
  );
}

/** @internal */
export const UploadJsonDtoMetadata$inboundSchema: z.ZodType<
  UploadJsonDtoMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UploadJsonDtoMetadata$Outbound = {};

/** @internal */
export const UploadJsonDtoMetadata$outboundSchema: z.ZodType<
  UploadJsonDtoMetadata$Outbound,
  z.ZodTypeDef,
  UploadJsonDtoMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadJsonDtoMetadata$ {
  /** @deprecated use `UploadJsonDtoMetadata$inboundSchema` instead. */
  export const inboundSchema = UploadJsonDtoMetadata$inboundSchema;
  /** @deprecated use `UploadJsonDtoMetadata$outboundSchema` instead. */
  export const outboundSchema = UploadJsonDtoMetadata$outboundSchema;
  /** @deprecated use `UploadJsonDtoMetadata$Outbound` instead. */
  export type Outbound = UploadJsonDtoMetadata$Outbound;
}

export function uploadJsonDtoMetadataToJSON(
  uploadJsonDtoMetadata: UploadJsonDtoMetadata,
): string {
  return JSON.stringify(
    UploadJsonDtoMetadata$outboundSchema.parse(uploadJsonDtoMetadata),
  );
}

export function uploadJsonDtoMetadataFromJSON(
  jsonString: string,
): SafeParseResult<UploadJsonDtoMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadJsonDtoMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadJsonDtoMetadata' from JSON`,
  );
}

/** @internal */
export const UploadJsonDto$inboundSchema: z.ZodType<
  UploadJsonDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.lazy(() => Content$inboundSchema),
  metadata: z.lazy(() => UploadJsonDtoMetadata$inboundSchema).optional(),
  name: z.string(),
});

/** @internal */
export type UploadJsonDto$Outbound = {
  content: Content$Outbound;
  metadata?: UploadJsonDtoMetadata$Outbound | undefined;
  name: string;
};

/** @internal */
export const UploadJsonDto$outboundSchema: z.ZodType<
  UploadJsonDto$Outbound,
  z.ZodTypeDef,
  UploadJsonDto
> = z.object({
  content: z.lazy(() => Content$outboundSchema),
  metadata: z.lazy(() => UploadJsonDtoMetadata$outboundSchema).optional(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadJsonDto$ {
  /** @deprecated use `UploadJsonDto$inboundSchema` instead. */
  export const inboundSchema = UploadJsonDto$inboundSchema;
  /** @deprecated use `UploadJsonDto$outboundSchema` instead. */
  export const outboundSchema = UploadJsonDto$outboundSchema;
  /** @deprecated use `UploadJsonDto$Outbound` instead. */
  export type Outbound = UploadJsonDto$Outbound;
}

export function uploadJsonDtoToJSON(uploadJsonDto: UploadJsonDto): string {
  return JSON.stringify(UploadJsonDto$outboundSchema.parse(uploadJsonDto));
}

export function uploadJsonDtoFromJSON(
  jsonString: string,
): SafeParseResult<UploadJsonDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadJsonDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadJsonDto' from JSON`,
  );
}
