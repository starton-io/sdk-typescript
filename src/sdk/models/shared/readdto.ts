/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type ReadDto = {
    functionName: string;
    /**
     * Smart contract parameters.
     */
    params: Array<any>;
};

/** @internal */
export namespace ReadDto$ {
    export type Inbound = {
        functionName: string;
        params: Array<any>;
    };

    export const inboundSchema: z.ZodType<ReadDto, z.ZodTypeDef, Inbound> = z
        .object({
            functionName: z.string(),
            params: z.array(z.any()),
        })
        .transform((v) => {
            return {
                functionName: v.functionName,
                params: v.params,
            };
        });

    export type Outbound = {
        functionName: string;
        params: Array<any>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReadDto> = z
        .object({
            functionName: z.string(),
            params: z.array(z.any()),
        })
        .transform((v) => {
            return {
                functionName: v.functionName,
                params: v.params,
            };
        });
}
