/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WebhookSigningSecret = {
  createdAt?: Date | undefined;
  projectId: string;
  secret: string;
  updatedAt?: Date | undefined;
};

/** @internal */
export const WebhookSigningSecret$inboundSchema: z.ZodType<
  WebhookSigningSecret,
  z.ZodTypeDef,
  unknown
> = z.object({
  createdAt: z.string().datetime({ offset: true }).default(
    "2024-10-07T18:00:19.999Z",
  ).transform(v => new Date(v)),
  projectId: z.string(),
  secret: z.string(),
  updatedAt: z.string().datetime({ offset: true }).default(
    "2024-10-07T18:00:19.999Z",
  ).transform(v => new Date(v)),
});

/** @internal */
export type WebhookSigningSecret$Outbound = {
  createdAt: string;
  projectId: string;
  secret: string;
  updatedAt: string;
};

/** @internal */
export const WebhookSigningSecret$outboundSchema: z.ZodType<
  WebhookSigningSecret$Outbound,
  z.ZodTypeDef,
  WebhookSigningSecret
> = z.object({
  createdAt: z.date().default(() => new Date("2024-10-07T18:00:19.999Z"))
    .transform(v => v.toISOString()),
  projectId: z.string(),
  secret: z.string(),
  updatedAt: z.date().default(() => new Date("2024-10-07T18:00:19.999Z"))
    .transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookSigningSecret$ {
  /** @deprecated use `WebhookSigningSecret$inboundSchema` instead. */
  export const inboundSchema = WebhookSigningSecret$inboundSchema;
  /** @deprecated use `WebhookSigningSecret$outboundSchema` instead. */
  export const outboundSchema = WebhookSigningSecret$outboundSchema;
  /** @deprecated use `WebhookSigningSecret$Outbound` instead. */
  export type Outbound = WebhookSigningSecret$Outbound;
}

export function webhookSigningSecretToJSON(
  webhookSigningSecret: WebhookSigningSecret,
): string {
  return JSON.stringify(
    WebhookSigningSecret$outboundSchema.parse(webhookSigningSecret),
  );
}

export function webhookSigningSecretFromJSON(
  jsonString: string,
): SafeParseResult<WebhookSigningSecret, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookSigningSecret$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookSigningSecret' from JSON`,
  );
}
