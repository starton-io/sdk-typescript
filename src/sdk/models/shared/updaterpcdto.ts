/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export enum UpdateRpcDtoType {
  Archive = "archive",
  Full = "full",
}

export type UpdateRpcDto = {
  type?: UpdateRpcDtoType | undefined;
  url?: string | undefined;
};

/** @internal */
export const UpdateRpcDtoType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateRpcDtoType
> = z.nativeEnum(UpdateRpcDtoType);

/** @internal */
export const UpdateRpcDtoType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateRpcDtoType
> = UpdateRpcDtoType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRpcDtoType$ {
  /** @deprecated use `UpdateRpcDtoType$inboundSchema` instead. */
  export const inboundSchema = UpdateRpcDtoType$inboundSchema;
  /** @deprecated use `UpdateRpcDtoType$outboundSchema` instead. */
  export const outboundSchema = UpdateRpcDtoType$outboundSchema;
}

/** @internal */
export const UpdateRpcDto$inboundSchema: z.ZodType<
  UpdateRpcDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateRpcDtoType$inboundSchema.optional(),
  url: z.string().optional(),
});

/** @internal */
export type UpdateRpcDto$Outbound = {
  type?: string | undefined;
  url?: string | undefined;
};

/** @internal */
export const UpdateRpcDto$outboundSchema: z.ZodType<
  UpdateRpcDto$Outbound,
  z.ZodTypeDef,
  UpdateRpcDto
> = z.object({
  type: UpdateRpcDtoType$outboundSchema.optional(),
  url: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRpcDto$ {
  /** @deprecated use `UpdateRpcDto$inboundSchema` instead. */
  export const inboundSchema = UpdateRpcDto$inboundSchema;
  /** @deprecated use `UpdateRpcDto$outboundSchema` instead. */
  export const outboundSchema = UpdateRpcDto$outboundSchema;
  /** @deprecated use `UpdateRpcDto$Outbound` instead. */
  export type Outbound = UpdateRpcDto$Outbound;
}

export function updateRpcDtoToJSON(updateRpcDto: UpdateRpcDto): string {
  return JSON.stringify(UpdateRpcDto$outboundSchema.parse(updateRpcDto));
}

export function updateRpcDtoFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRpcDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRpcDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRpcDto' from JSON`,
  );
}
