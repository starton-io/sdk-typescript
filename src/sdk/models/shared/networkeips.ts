/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NetworkEips = {
  eip1159: boolean;
  eip155: boolean;
};

/** @internal */
export const NetworkEips$inboundSchema: z.ZodType<
  NetworkEips,
  z.ZodTypeDef,
  unknown
> = z.object({
  eip1159: z.boolean(),
  eip155: z.boolean(),
});

/** @internal */
export type NetworkEips$Outbound = {
  eip1159: boolean;
  eip155: boolean;
};

/** @internal */
export const NetworkEips$outboundSchema: z.ZodType<
  NetworkEips$Outbound,
  z.ZodTypeDef,
  NetworkEips
> = z.object({
  eip1159: z.boolean(),
  eip155: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkEips$ {
  /** @deprecated use `NetworkEips$inboundSchema` instead. */
  export const inboundSchema = NetworkEips$inboundSchema;
  /** @deprecated use `NetworkEips$outboundSchema` instead. */
  export const outboundSchema = NetworkEips$outboundSchema;
  /** @deprecated use `NetworkEips$Outbound` instead. */
  export type Outbound = NetworkEips$Outbound;
}

export function networkEipsToJSON(networkEips: NetworkEips): string {
  return JSON.stringify(NetworkEips$outboundSchema.parse(networkEips));
}

export function networkEipsFromJSON(
  jsonString: string,
): SafeParseResult<NetworkEips, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NetworkEips$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NetworkEips' from JSON`,
  );
}
