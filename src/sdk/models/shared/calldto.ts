/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CustomGasDto, CustomGasDto$ } from "./customgasdto";
import * as z from "zod";

export type Three = {};

export type Params = Three | string | number | boolean;

export enum Speed {
    Low = "low",
    Average = "average",
    Fast = "fast",
    Fastest = "fastest",
    Custom = "custom",
}

export type CallDto = {
    customGas?: CustomGasDto | undefined;
    functionName: string;
    gasLimit?: string | undefined;
    nonce?: number | undefined;
    /**
     * Smart contract parameters.
     */
    params: Array<Three | string | number | boolean>;
    signerWallet: string;
    speed?: Speed | undefined;
    value?: string | undefined;
};

/** @internal */
export namespace Three$ {
    export const inboundSchema: z.ZodType<Three, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Three> = z.object({});
}

/** @internal */
export namespace Params$ {
    export const inboundSchema: z.ZodType<Params, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Three$.inboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);

    export type Outbound = Three$.Outbound | string | number | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Params> = z.union([
        z.lazy(() => Three$.outboundSchema),
        z.string(),
        z.number(),
        z.boolean(),
    ]);
}

/** @internal */
export namespace Speed$ {
    export const inboundSchema = z.nativeEnum(Speed);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace CallDto$ {
    export const inboundSchema: z.ZodType<CallDto, z.ZodTypeDef, unknown> = z.object({
        customGas: CustomGasDto$.inboundSchema.optional(),
        functionName: z.string(),
        gasLimit: z.string().optional(),
        nonce: z.number().optional(),
        params: z.array(
            z.union([z.lazy(() => Three$.inboundSchema), z.string(), z.number(), z.boolean()])
        ),
        signerWallet: z.string(),
        speed: Speed$.inboundSchema.optional(),
        value: z.string().optional(),
    });

    export type Outbound = {
        customGas?: CustomGasDto$.Outbound | undefined;
        functionName: string;
        gasLimit?: string | undefined;
        nonce?: number | undefined;
        params: Array<Three$.Outbound | string | number | boolean>;
        signerWallet: string;
        speed?: string | undefined;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CallDto> = z.object({
        customGas: CustomGasDto$.outboundSchema.optional(),
        functionName: z.string(),
        gasLimit: z.string().optional(),
        nonce: z.number().optional(),
        params: z.array(
            z.union([z.lazy(() => Three$.outboundSchema), z.string(), z.number(), z.boolean()])
        ),
        signerWallet: z.string(),
        speed: Speed$.outboundSchema.optional(),
        value: z.string().optional(),
    });
}
