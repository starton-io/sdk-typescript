/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type SmartContractTemplateAbi = {};

export enum Category {
    Nft = "NFT",
    Fungible = "FUNGIBLE",
    Other = "OTHER",
    Deprecated = "DEPRECATED",
    Sale = "SALE",
    Tool = "TOOL",
}

export type SmartContractTemplateCompilationDetails = {};

export type Form = {};

export type SmartContractTemplate = {
    abi: Array<SmartContractTemplateAbi>;
    blockchains: Array<string>;
    category: Category;
    compilationDetails?: SmartContractTemplateCompilationDetails | null | undefined;
    createdAt?: Date | undefined;
    description: string;
    form?: Form | null | undefined;
    githubUrl: string;
    humanReadableAbi: Array<string>;
    id: string;
    isActivated?: boolean | undefined;
    isAudited?: boolean | undefined;
    name: string;
    order?: number | undefined;
    shortDescription: string;
    tags: Array<string>;
    updatedAt?: Date | undefined;
};

/** @internal */
export namespace SmartContractTemplateAbi$ {
    export const inboundSchema: z.ZodType<SmartContractTemplateAbi, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SmartContractTemplateAbi> =
        z.object({});
}

/** @internal */
export namespace Category$ {
    export const inboundSchema = z.nativeEnum(Category);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace SmartContractTemplateCompilationDetails$ {
    export const inboundSchema: z.ZodType<
        SmartContractTemplateCompilationDetails,
        z.ZodTypeDef,
        unknown
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        SmartContractTemplateCompilationDetails
    > = z.object({});
}

/** @internal */
export namespace Form$ {
    export const inboundSchema: z.ZodType<Form, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Form> = z.object({});
}

/** @internal */
export namespace SmartContractTemplate$ {
    export const inboundSchema: z.ZodType<SmartContractTemplate, z.ZodTypeDef, unknown> = z.object({
        abi: z.array(z.lazy(() => SmartContractTemplateAbi$.inboundSchema)),
        blockchains: z.array(z.string()),
        category: Category$.inboundSchema,
        compilationDetails: z
            .nullable(z.lazy(() => SmartContractTemplateCompilationDetails$.inboundSchema))
            .optional(),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .default("2024-01-31T13:57:36.374Z")
            .transform((v) => new Date(v)),
        description: z.string(),
        form: z.nullable(z.lazy(() => Form$.inboundSchema)).optional(),
        githubUrl: z.string(),
        humanReadableAbi: z.array(z.string()),
        id: z.string(),
        isActivated: z.boolean().default(true),
        isAudited: z.boolean().default(false),
        name: z.string(),
        order: z.number().default(0),
        shortDescription: z.string(),
        tags: z.array(z.string()),
        updatedAt: z
            .string()
            .datetime({ offset: true })
            .default("2024-01-31T13:57:36.374Z")
            .transform((v) => new Date(v)),
    });

    export type Outbound = {
        abi: Array<SmartContractTemplateAbi$.Outbound>;
        blockchains: Array<string>;
        category: string;
        compilationDetails?: SmartContractTemplateCompilationDetails$.Outbound | null | undefined;
        createdAt: string;
        description: string;
        form?: Form$.Outbound | null | undefined;
        githubUrl: string;
        humanReadableAbi: Array<string>;
        id: string;
        isActivated: boolean;
        isAudited: boolean;
        name: string;
        order: number;
        shortDescription: string;
        tags: Array<string>;
        updatedAt: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SmartContractTemplate> =
        z.object({
            abi: z.array(z.lazy(() => SmartContractTemplateAbi$.outboundSchema)),
            blockchains: z.array(z.string()),
            category: Category$.outboundSchema,
            compilationDetails: z
                .nullable(z.lazy(() => SmartContractTemplateCompilationDetails$.outboundSchema))
                .optional(),
            createdAt: z
                .date()
                .default(() => new Date("2024-01-31T13:57:36.374Z"))
                .transform((v) => v.toISOString()),
            description: z.string(),
            form: z.nullable(z.lazy(() => Form$.outboundSchema)).optional(),
            githubUrl: z.string(),
            humanReadableAbi: z.array(z.string()),
            id: z.string(),
            isActivated: z.boolean().default(true),
            isAudited: z.boolean().default(false),
            name: z.string(),
            order: z.number().default(0),
            shortDescription: z.string(),
            tags: z.array(z.string()),
            updatedAt: z
                .date()
                .default(() => new Date("2024-01-31T13:57:36.374Z"))
                .transform((v) => v.toISOString()),
        });
}
