/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type SmartContractTemplateAbi = {};

export enum Category {
    Nft = "NFT",
    Fungible = "FUNGIBLE",
    Other = "OTHER",
    Deprecated = "DEPRECATED",
    Sale = "SALE",
    Tool = "TOOL",
}

export type SmartContractTemplateCompilationDetails = {};

export type Form = {};

export type SmartContractTemplate = {
    abi: Array<SmartContractTemplateAbi>;
    blockchains: Array<string>;
    category: Category;
    compilationDetails?: SmartContractTemplateCompilationDetails | null | undefined;
    createdAt?: Date | undefined;
    description: string;
    form?: Form | null | undefined;
    githubUrl: string;
    humanReadableAbi: Array<string>;
    id: string;
    isActivated?: boolean | undefined;
    isAudited?: boolean | undefined;
    name: string;
    order?: number | undefined;
    shortDescription: string;
    tags: Array<string>;
    updatedAt?: Date | undefined;
};

/** @internal */
export namespace SmartContractTemplateAbi$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<SmartContractTemplateAbi, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SmartContractTemplateAbi> =
        z.object({});
}

/** @internal */
export const Category$ = z.nativeEnum(Category);

/** @internal */
export namespace SmartContractTemplateCompilationDetails$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        SmartContractTemplateCompilationDetails,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        SmartContractTemplateCompilationDetails
    > = z.object({});
}

/** @internal */
export namespace Form$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Form, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Form> = z.object({});
}

/** @internal */
export namespace SmartContractTemplate$ {
    export type Inbound = {
        abi: Array<SmartContractTemplateAbi$.Inbound>;
        blockchains: Array<string>;
        category: Category;
        compilationDetails?: SmartContractTemplateCompilationDetails$.Inbound | null | undefined;
        createdAt?: string | undefined;
        description: string;
        form?: Form$.Inbound | null | undefined;
        githubUrl: string;
        humanReadableAbi: Array<string>;
        id: string;
        isActivated?: boolean | undefined;
        isAudited?: boolean | undefined;
        name: string;
        order?: number | undefined;
        shortDescription: string;
        tags: Array<string>;
        updatedAt?: string | undefined;
    };

    export const inboundSchema: z.ZodType<SmartContractTemplate, z.ZodTypeDef, Inbound> = z
        .object({
            abi: z.array(z.lazy(() => SmartContractTemplateAbi$.inboundSchema)),
            blockchains: z.array(z.string()),
            category: Category$,
            compilationDetails: z
                .lazy(() => SmartContractTemplateCompilationDetails$.inboundSchema)
                .nullable()
                .optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            description: z.string(),
            form: z
                .lazy(() => Form$.inboundSchema)
                .nullable()
                .optional(),
            githubUrl: z.string(),
            humanReadableAbi: z.array(z.string()),
            id: z.string(),
            isActivated: z.boolean().optional(),
            isAudited: z.boolean().optional(),
            name: z.string(),
            order: z.number().optional(),
            shortDescription: z.string(),
            tags: z.array(z.string()),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                abi: v.abi,
                blockchains: v.blockchains,
                category: v.category,
                ...(v.compilationDetails === undefined
                    ? null
                    : { compilationDetails: v.compilationDetails }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                description: v.description,
                ...(v.form === undefined ? null : { form: v.form }),
                githubUrl: v.githubUrl,
                humanReadableAbi: v.humanReadableAbi,
                id: v.id,
                ...(v.isActivated === undefined ? null : { isActivated: v.isActivated }),
                ...(v.isAudited === undefined ? null : { isAudited: v.isAudited }),
                name: v.name,
                ...(v.order === undefined ? null : { order: v.order }),
                shortDescription: v.shortDescription,
                tags: v.tags,
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });

    export type Outbound = {
        abi: Array<SmartContractTemplateAbi$.Outbound>;
        blockchains: Array<string>;
        category: Category;
        compilationDetails?: SmartContractTemplateCompilationDetails$.Outbound | null | undefined;
        createdAt?: string | undefined;
        description: string;
        form?: Form$.Outbound | null | undefined;
        githubUrl: string;
        humanReadableAbi: Array<string>;
        id: string;
        isActivated?: boolean | undefined;
        isAudited?: boolean | undefined;
        name: string;
        order?: number | undefined;
        shortDescription: string;
        tags: Array<string>;
        updatedAt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SmartContractTemplate> = z
        .object({
            abi: z.array(z.lazy(() => SmartContractTemplateAbi$.outboundSchema)),
            blockchains: z.array(z.string()),
            category: Category$,
            compilationDetails: z
                .lazy(() => SmartContractTemplateCompilationDetails$.outboundSchema)
                .nullable()
                .optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            description: z.string(),
            form: z
                .lazy(() => Form$.outboundSchema)
                .nullable()
                .optional(),
            githubUrl: z.string(),
            humanReadableAbi: z.array(z.string()),
            id: z.string(),
            isActivated: z.boolean().optional(),
            isAudited: z.boolean().optional(),
            name: z.string(),
            order: z.number().optional(),
            shortDescription: z.string(),
            tags: z.array(z.string()),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                abi: v.abi,
                blockchains: v.blockchains,
                category: v.category,
                ...(v.compilationDetails === undefined
                    ? null
                    : { compilationDetails: v.compilationDetails }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                description: v.description,
                ...(v.form === undefined ? null : { form: v.form }),
                githubUrl: v.githubUrl,
                humanReadableAbi: v.humanReadableAbi,
                id: v.id,
                ...(v.isActivated === undefined ? null : { isActivated: v.isActivated }),
                ...(v.isAudited === undefined ? null : { isAudited: v.isAudited }),
                name: v.name,
                ...(v.order === undefined ? null : { order: v.order }),
                shortDescription: v.shortDescription,
                tags: v.tags,
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });
}
