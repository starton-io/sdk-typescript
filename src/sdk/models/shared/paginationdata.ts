/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PaginationData = {
  currentPage: number;
  itemCount: number;
  itemsPerPage: number;
  totalItems?: number | undefined;
  totalPages?: number | undefined;
};

/** @internal */
export const PaginationData$inboundSchema: z.ZodType<
  PaginationData,
  z.ZodTypeDef,
  unknown
> = z.object({
  currentPage: z.number(),
  itemCount: z.number(),
  itemsPerPage: z.number(),
  totalItems: z.number().optional(),
  totalPages: z.number().optional(),
});

/** @internal */
export type PaginationData$Outbound = {
  currentPage: number;
  itemCount: number;
  itemsPerPage: number;
  totalItems?: number | undefined;
  totalPages?: number | undefined;
};

/** @internal */
export const PaginationData$outboundSchema: z.ZodType<
  PaginationData$Outbound,
  z.ZodTypeDef,
  PaginationData
> = z.object({
  currentPage: z.number(),
  itemCount: z.number(),
  itemsPerPage: z.number(),
  totalItems: z.number().optional(),
  totalPages: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaginationData$ {
  /** @deprecated use `PaginationData$inboundSchema` instead. */
  export const inboundSchema = PaginationData$inboundSchema;
  /** @deprecated use `PaginationData$outboundSchema` instead. */
  export const outboundSchema = PaginationData$outboundSchema;
  /** @deprecated use `PaginationData$Outbound` instead. */
  export type Outbound = PaginationData$Outbound;
}

export function paginationDataToJSON(paginationData: PaginationData): string {
  return JSON.stringify(PaginationData$outboundSchema.parse(paginationData));
}

export function paginationDataFromJSON(
  jsonString: string,
): SafeParseResult<PaginationData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaginationData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaginationData' from JSON`,
  );
}
