/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateWalletDtoMetadata = {};

export type CreateWalletDto = {
  description?: string | undefined;
  kmsId: string;
  metadata?: CreateWalletDtoMetadata | undefined;
  name?: string | undefined;
};

/** @internal */
export const CreateWalletDtoMetadata$inboundSchema: z.ZodType<
  CreateWalletDtoMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateWalletDtoMetadata$Outbound = {};

/** @internal */
export const CreateWalletDtoMetadata$outboundSchema: z.ZodType<
  CreateWalletDtoMetadata$Outbound,
  z.ZodTypeDef,
  CreateWalletDtoMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWalletDtoMetadata$ {
  /** @deprecated use `CreateWalletDtoMetadata$inboundSchema` instead. */
  export const inboundSchema = CreateWalletDtoMetadata$inboundSchema;
  /** @deprecated use `CreateWalletDtoMetadata$outboundSchema` instead. */
  export const outboundSchema = CreateWalletDtoMetadata$outboundSchema;
  /** @deprecated use `CreateWalletDtoMetadata$Outbound` instead. */
  export type Outbound = CreateWalletDtoMetadata$Outbound;
}

export function createWalletDtoMetadataToJSON(
  createWalletDtoMetadata: CreateWalletDtoMetadata,
): string {
  return JSON.stringify(
    CreateWalletDtoMetadata$outboundSchema.parse(createWalletDtoMetadata),
  );
}

export function createWalletDtoMetadataFromJSON(
  jsonString: string,
): SafeParseResult<CreateWalletDtoMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWalletDtoMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWalletDtoMetadata' from JSON`,
  );
}

/** @internal */
export const CreateWalletDto$inboundSchema: z.ZodType<
  CreateWalletDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  kmsId: z.string(),
  metadata: z.lazy(() => CreateWalletDtoMetadata$inboundSchema).optional(),
  name: z.string().optional(),
});

/** @internal */
export type CreateWalletDto$Outbound = {
  description?: string | undefined;
  kmsId: string;
  metadata?: CreateWalletDtoMetadata$Outbound | undefined;
  name?: string | undefined;
};

/** @internal */
export const CreateWalletDto$outboundSchema: z.ZodType<
  CreateWalletDto$Outbound,
  z.ZodTypeDef,
  CreateWalletDto
> = z.object({
  description: z.string().optional(),
  kmsId: z.string(),
  metadata: z.lazy(() => CreateWalletDtoMetadata$outboundSchema).optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWalletDto$ {
  /** @deprecated use `CreateWalletDto$inboundSchema` instead. */
  export const inboundSchema = CreateWalletDto$inboundSchema;
  /** @deprecated use `CreateWalletDto$outboundSchema` instead. */
  export const outboundSchema = CreateWalletDto$outboundSchema;
  /** @deprecated use `CreateWalletDto$Outbound` instead. */
  export type Outbound = CreateWalletDto$Outbound;
}

export function createWalletDtoToJSON(
  createWalletDto: CreateWalletDto,
): string {
  return JSON.stringify(CreateWalletDto$outboundSchema.parse(createWalletDto));
}

export function createWalletDtoFromJSON(
  jsonString: string,
): SafeParseResult<CreateWalletDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWalletDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWalletDto' from JSON`,
  );
}
