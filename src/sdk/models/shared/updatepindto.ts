/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdatePinDtoMetadata = {};

export type UpdatePinDto = {
  metadata?: UpdatePinDtoMetadata | undefined;
  name?: string | undefined;
};

/** @internal */
export const UpdatePinDtoMetadata$inboundSchema: z.ZodType<
  UpdatePinDtoMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdatePinDtoMetadata$Outbound = {};

/** @internal */
export const UpdatePinDtoMetadata$outboundSchema: z.ZodType<
  UpdatePinDtoMetadata$Outbound,
  z.ZodTypeDef,
  UpdatePinDtoMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePinDtoMetadata$ {
  /** @deprecated use `UpdatePinDtoMetadata$inboundSchema` instead. */
  export const inboundSchema = UpdatePinDtoMetadata$inboundSchema;
  /** @deprecated use `UpdatePinDtoMetadata$outboundSchema` instead. */
  export const outboundSchema = UpdatePinDtoMetadata$outboundSchema;
  /** @deprecated use `UpdatePinDtoMetadata$Outbound` instead. */
  export type Outbound = UpdatePinDtoMetadata$Outbound;
}

export function updatePinDtoMetadataToJSON(
  updatePinDtoMetadata: UpdatePinDtoMetadata,
): string {
  return JSON.stringify(
    UpdatePinDtoMetadata$outboundSchema.parse(updatePinDtoMetadata),
  );
}

export function updatePinDtoMetadataFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePinDtoMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePinDtoMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePinDtoMetadata' from JSON`,
  );
}

/** @internal */
export const UpdatePinDto$inboundSchema: z.ZodType<
  UpdatePinDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  metadata: z.lazy(() => UpdatePinDtoMetadata$inboundSchema).optional(),
  name: z.string().optional(),
});

/** @internal */
export type UpdatePinDto$Outbound = {
  metadata?: UpdatePinDtoMetadata$Outbound | undefined;
  name?: string | undefined;
};

/** @internal */
export const UpdatePinDto$outboundSchema: z.ZodType<
  UpdatePinDto$Outbound,
  z.ZodTypeDef,
  UpdatePinDto
> = z.object({
  metadata: z.lazy(() => UpdatePinDtoMetadata$outboundSchema).optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePinDto$ {
  /** @deprecated use `UpdatePinDto$inboundSchema` instead. */
  export const inboundSchema = UpdatePinDto$inboundSchema;
  /** @deprecated use `UpdatePinDto$outboundSchema` instead. */
  export const outboundSchema = UpdatePinDto$outboundSchema;
  /** @deprecated use `UpdatePinDto$Outbound` instead. */
  export type Outbound = UpdatePinDto$Outbound;
}

export function updatePinDtoToJSON(updatePinDto: UpdatePinDto): string {
  return JSON.stringify(UpdatePinDto$outboundSchema.parse(updatePinDto));
}

export function updatePinDtoFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePinDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePinDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePinDto' from JSON`,
  );
}
