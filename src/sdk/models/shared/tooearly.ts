/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Context = {};

export type TooEarly = {
  context?: Context | null | undefined;
  errorCode?: string | undefined;
  message?: string | undefined;
  path: string;
  statusCode?: number | undefined;
  timestamp: string;
};

/** @internal */
export const Context$inboundSchema: z.ZodType<Context, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Context$Outbound = {};

/** @internal */
export const Context$outboundSchema: z.ZodType<
  Context$Outbound,
  z.ZodTypeDef,
  Context
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Context$ {
  /** @deprecated use `Context$inboundSchema` instead. */
  export const inboundSchema = Context$inboundSchema;
  /** @deprecated use `Context$outboundSchema` instead. */
  export const outboundSchema = Context$outboundSchema;
  /** @deprecated use `Context$Outbound` instead. */
  export type Outbound = Context$Outbound;
}

export function contextToJSON(context: Context): string {
  return JSON.stringify(Context$outboundSchema.parse(context));
}

export function contextFromJSON(
  jsonString: string,
): SafeParseResult<Context, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Context$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Context' from JSON`,
  );
}

/** @internal */
export const TooEarly$inboundSchema: z.ZodType<
  TooEarly,
  z.ZodTypeDef,
  unknown
> = z.object({
  context: z.nullable(z.lazy(() => Context$inboundSchema)).optional(),
  errorCode: z.string().default("TOO_EARLY"),
  message: z.string().default(
    "Please try later, you already tried too recently",
  ),
  path: z.string(),
  statusCode: z.number().default(425),
  timestamp: z.string(),
});

/** @internal */
export type TooEarly$Outbound = {
  context?: Context$Outbound | null | undefined;
  errorCode: string;
  message: string;
  path: string;
  statusCode: number;
  timestamp: string;
};

/** @internal */
export const TooEarly$outboundSchema: z.ZodType<
  TooEarly$Outbound,
  z.ZodTypeDef,
  TooEarly
> = z.object({
  context: z.nullable(z.lazy(() => Context$outboundSchema)).optional(),
  errorCode: z.string().default("TOO_EARLY"),
  message: z.string().default(
    "Please try later, you already tried too recently",
  ),
  path: z.string(),
  statusCode: z.number().default(425),
  timestamp: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TooEarly$ {
  /** @deprecated use `TooEarly$inboundSchema` instead. */
  export const inboundSchema = TooEarly$inboundSchema;
  /** @deprecated use `TooEarly$outboundSchema` instead. */
  export const outboundSchema = TooEarly$outboundSchema;
  /** @deprecated use `TooEarly$Outbound` instead. */
  export type Outbound = TooEarly$Outbound;
}

export function tooEarlyToJSON(tooEarly: TooEarly): string {
  return JSON.stringify(TooEarly$outboundSchema.parse(tooEarly));
}

export function tooEarlyFromJSON(
  jsonString: string,
): SafeParseResult<TooEarly, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TooEarly$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TooEarly' from JSON`,
  );
}
