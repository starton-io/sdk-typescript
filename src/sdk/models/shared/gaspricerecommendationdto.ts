/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GasPriceRecommendationDto = {
  defaultRelayerUnstuck: string;
  lowest: string;
  max: string;
};

/** @internal */
export const GasPriceRecommendationDto$inboundSchema: z.ZodType<
  GasPriceRecommendationDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  defaultRelayerUnstuck: z.string(),
  lowest: z.string(),
  max: z.string(),
});

/** @internal */
export type GasPriceRecommendationDto$Outbound = {
  defaultRelayerUnstuck: string;
  lowest: string;
  max: string;
};

/** @internal */
export const GasPriceRecommendationDto$outboundSchema: z.ZodType<
  GasPriceRecommendationDto$Outbound,
  z.ZodTypeDef,
  GasPriceRecommendationDto
> = z.object({
  defaultRelayerUnstuck: z.string(),
  lowest: z.string(),
  max: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GasPriceRecommendationDto$ {
  /** @deprecated use `GasPriceRecommendationDto$inboundSchema` instead. */
  export const inboundSchema = GasPriceRecommendationDto$inboundSchema;
  /** @deprecated use `GasPriceRecommendationDto$outboundSchema` instead. */
  export const outboundSchema = GasPriceRecommendationDto$outboundSchema;
  /** @deprecated use `GasPriceRecommendationDto$Outbound` instead. */
  export type Outbound = GasPriceRecommendationDto$Outbound;
}

export function gasPriceRecommendationDtoToJSON(
  gasPriceRecommendationDto: GasPriceRecommendationDto,
): string {
  return JSON.stringify(
    GasPriceRecommendationDto$outboundSchema.parse(gasPriceRecommendationDto),
  );
}

export function gasPriceRecommendationDtoFromJSON(
  jsonString: string,
): SafeParseResult<GasPriceRecommendationDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GasPriceRecommendationDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GasPriceRecommendationDto' from JSON`,
  );
}
