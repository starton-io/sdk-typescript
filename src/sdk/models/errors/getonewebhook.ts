/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  BadRequestException,
  BadRequestException$inboundSchema,
  BadRequestException$Outbound,
  BadRequestException$outboundSchema,
} from "./badrequestexception.js";
import {
  CouldNotFindResource,
  CouldNotFindResource$inboundSchema,
  CouldNotFindResource$Outbound,
  CouldNotFindResource$outboundSchema,
} from "./couldnotfindresource.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetOneWebhookWebhookResponseBody = CouldNotFindResource;

export type GetOneWebhookResponseBody = BadRequestException;

/** @internal */
export const GetOneWebhookWebhookResponseBody$inboundSchema: z.ZodType<
  GetOneWebhookWebhookResponseBody,
  z.ZodTypeDef,
  unknown
> = CouldNotFindResource$inboundSchema;

/** @internal */
export type GetOneWebhookWebhookResponseBody$Outbound =
  CouldNotFindResource$Outbound;

/** @internal */
export const GetOneWebhookWebhookResponseBody$outboundSchema: z.ZodType<
  GetOneWebhookWebhookResponseBody$Outbound,
  z.ZodTypeDef,
  GetOneWebhookWebhookResponseBody
> = CouldNotFindResource$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOneWebhookWebhookResponseBody$ {
  /** @deprecated use `GetOneWebhookWebhookResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetOneWebhookWebhookResponseBody$inboundSchema;
  /** @deprecated use `GetOneWebhookWebhookResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetOneWebhookWebhookResponseBody$outboundSchema;
  /** @deprecated use `GetOneWebhookWebhookResponseBody$Outbound` instead. */
  export type Outbound = GetOneWebhookWebhookResponseBody$Outbound;
}

export function getOneWebhookWebhookResponseBodyToJSON(
  getOneWebhookWebhookResponseBody: GetOneWebhookWebhookResponseBody,
): string {
  return JSON.stringify(
    GetOneWebhookWebhookResponseBody$outboundSchema.parse(
      getOneWebhookWebhookResponseBody,
    ),
  );
}

export function getOneWebhookWebhookResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetOneWebhookWebhookResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOneWebhookWebhookResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOneWebhookWebhookResponseBody' from JSON`,
  );
}

/** @internal */
export const GetOneWebhookResponseBody$inboundSchema: z.ZodType<
  GetOneWebhookResponseBody,
  z.ZodTypeDef,
  unknown
> = BadRequestException$inboundSchema;

/** @internal */
export type GetOneWebhookResponseBody$Outbound = BadRequestException$Outbound;

/** @internal */
export const GetOneWebhookResponseBody$outboundSchema: z.ZodType<
  GetOneWebhookResponseBody$Outbound,
  z.ZodTypeDef,
  GetOneWebhookResponseBody
> = BadRequestException$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOneWebhookResponseBody$ {
  /** @deprecated use `GetOneWebhookResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetOneWebhookResponseBody$inboundSchema;
  /** @deprecated use `GetOneWebhookResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetOneWebhookResponseBody$outboundSchema;
  /** @deprecated use `GetOneWebhookResponseBody$Outbound` instead. */
  export type Outbound = GetOneWebhookResponseBody$Outbound;
}

export function getOneWebhookResponseBodyToJSON(
  getOneWebhookResponseBody: GetOneWebhookResponseBody,
): string {
  return JSON.stringify(
    GetOneWebhookResponseBody$outboundSchema.parse(getOneWebhookResponseBody),
  );
}

export function getOneWebhookResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetOneWebhookResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOneWebhookResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOneWebhookResponseBody' from JSON`,
  );
}
