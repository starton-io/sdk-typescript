/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../../lib/primitives.js";

export type SchemasNOPROVIDERFORNETWORKContext = {};

export type NoProviderForNetworkData = {
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse1?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse2?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse3?: Response | undefined;
  context?: SchemasNOPROVIDERFORNETWORKContext | null | undefined;
  errorCode?: string;
  message?: string;
  path: string;
  statusCode?: number;
  timestamp: string;
};

export class NoProviderForNetwork extends Error {
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse1?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse2?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse3?: Response | undefined;
  context?: SchemasNOPROVIDERFORNETWORKContext | null | undefined;
  errorCode?: string;
  path: string;
  statusCode?: number;
  timestamp: string;

  /** The original data that was passed to this error instance. */
  data$: NoProviderForNetworkData;

  constructor(err: NoProviderForNetworkData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.rawResponse != null) this.rawResponse = err.rawResponse;
    if (err.rawResponse1 != null) this.rawResponse1 = err.rawResponse1;
    if (err.rawResponse2 != null) this.rawResponse2 = err.rawResponse2;
    if (err.rawResponse3 != null) this.rawResponse3 = err.rawResponse3;
    if (err.context != null) this.context = err.context;
    if (err.errorCode != null) this.errorCode = err.errorCode;
    this.path = err.path;
    if (err.statusCode != null) this.statusCode = err.statusCode;
    this.timestamp = err.timestamp;

    this.name = "NoProviderForNetwork";
  }
}

/** @internal */
export const SchemasNOPROVIDERFORNETWORKContext$inboundSchema: z.ZodType<
  SchemasNOPROVIDERFORNETWORKContext,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SchemasNOPROVIDERFORNETWORKContext$Outbound = {};

/** @internal */
export const SchemasNOPROVIDERFORNETWORKContext$outboundSchema: z.ZodType<
  SchemasNOPROVIDERFORNETWORKContext$Outbound,
  z.ZodTypeDef,
  SchemasNOPROVIDERFORNETWORKContext
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasNOPROVIDERFORNETWORKContext$ {
  /** @deprecated use `SchemasNOPROVIDERFORNETWORKContext$inboundSchema` instead. */
  export const inboundSchema = SchemasNOPROVIDERFORNETWORKContext$inboundSchema;
  /** @deprecated use `SchemasNOPROVIDERFORNETWORKContext$outboundSchema` instead. */
  export const outboundSchema =
    SchemasNOPROVIDERFORNETWORKContext$outboundSchema;
  /** @deprecated use `SchemasNOPROVIDERFORNETWORKContext$Outbound` instead. */
  export type Outbound = SchemasNOPROVIDERFORNETWORKContext$Outbound;
}

/** @internal */
export const NoProviderForNetwork$inboundSchema: z.ZodType<
  NoProviderForNetwork,
  z.ZodTypeDef,
  unknown
> = z.object({
  RawResponse: z.instanceof(Response).optional(),
  RawResponse1: z.instanceof(Response).optional(),
  RawResponse2: z.instanceof(Response).optional(),
  RawResponse3: z.instanceof(Response).optional(),
  context: z.nullable(
    z.lazy(() => SchemasNOPROVIDERFORNETWORKContext$inboundSchema),
  ).optional(),
  errorCode: z.string().default("NO_PROVIDER_FOR_NETWORK"),
  message: z.string().default("No provider for network."),
  path: z.string(),
  statusCode: z.number().default(500),
  timestamp: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "RawResponse": "rawResponse",
      "RawResponse1": "rawResponse1",
      "RawResponse2": "rawResponse2",
      "RawResponse3": "rawResponse3",
    });

    return new NoProviderForNetwork(remapped);
  });

/** @internal */
export type NoProviderForNetwork$Outbound = {
  RawResponse?: never | undefined;
  RawResponse1?: never | undefined;
  RawResponse2?: never | undefined;
  RawResponse3?: never | undefined;
  context?: SchemasNOPROVIDERFORNETWORKContext$Outbound | null | undefined;
  errorCode?: string;
  message?: string;
  path: string;
  statusCode?: number;
  timestamp: string;
};

/** @internal */
export const NoProviderForNetwork$outboundSchema: z.ZodType<
  NoProviderForNetwork$Outbound,
  z.ZodTypeDef,
  NoProviderForNetwork
> = z.instanceof(NoProviderForNetwork)
  .transform(v => v.data$)
  .pipe(
    z.object({
      rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse1: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse2: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse3: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      context: z.nullable(
        z.lazy(() => SchemasNOPROVIDERFORNETWORKContext$outboundSchema),
      ).optional(),
      errorCode: z.string().default("NO_PROVIDER_FOR_NETWORK"),
      message: z.string().default("No provider for network."),
      path: z.string(),
      statusCode: z.number().default(500),
      timestamp: z.string(),
    }).transform((v) => {
      return remap$(v, {
        rawResponse: "RawResponse",
        rawResponse1: "RawResponse1",
        rawResponse2: "RawResponse2",
        rawResponse3: "RawResponse3",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NoProviderForNetwork$ {
  /** @deprecated use `NoProviderForNetwork$inboundSchema` instead. */
  export const inboundSchema = NoProviderForNetwork$inboundSchema;
  /** @deprecated use `NoProviderForNetwork$outboundSchema` instead. */
  export const outboundSchema = NoProviderForNetwork$outboundSchema;
  /** @deprecated use `NoProviderForNetwork$Outbound` instead. */
  export type Outbound = NoProviderForNetwork$Outbound;
}
