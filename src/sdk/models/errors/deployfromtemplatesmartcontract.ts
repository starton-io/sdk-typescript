/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AlreadyKnown, AlreadyKnown$ } from "./alreadyknown.js";
import { BadRequestException, BadRequestException$ } from "./badrequestexception.js";
import { CallException, CallException$ } from "./callexception.js";
import { CouldNotAssignNonce, CouldNotAssignNonce$ } from "./couldnotassignnonce.js";
import { CouldNotBroadcast, CouldNotBroadcast$ } from "./couldnotbroadcast.js";
import { CouldNotEstimateGasPrice, CouldNotEstimateGasPrice$ } from "./couldnotestimategasprice.js";
import { CouldNotFindResource, CouldNotFindResource$ } from "./couldnotfindresource.js";
import { CouldNotSign, CouldNotSign$ } from "./couldnotsign.js";
import { EnsNotSupported, EnsNotSupported$ } from "./ensnotsupported.js";
import { ExecutionWillFail, ExecutionWillFail$ } from "./executionwillfail.js";
import { InsufficientFunds, InsufficientFunds$ } from "./insufficientfunds.js";
import { InvalidAbi, InvalidAbi$ } from "./invalidabi.js";
import { InvalidArgument, InvalidArgument$ } from "./invalidargument.js";
import { InvalidBytecode, InvalidBytecode$ } from "./invalidbytecode.js";
import { InvalidGasPrice, InvalidGasPrice$ } from "./invalidgasprice.js";
import {
    MicroserviceNotResponding,
    MicroserviceNotResponding$,
} from "./microservicenotresponding.js";
import { MissingArgument, MissingArgument$ } from "./missingargument.js";
import { NonceExpired, NonceExpired$ } from "./nonceexpired.js";
import { NoProviderForNetwork, NoProviderForNetwork$ } from "./noproviderfornetwork.js";
import { NumericFault, NumericFault$ } from "./numericfault.js";
import {
    SmartContractNotActivated,
    SmartContractNotActivated$,
} from "./smartcontractnotactivated.js";
import { UnexpectedArgument, UnexpectedArgument$ } from "./unexpectedargument.js";
import { Unknown, Unknown$ } from "./unknown.js";
import { UnpredictableGasLimit, UnpredictableGasLimit$ } from "./unpredictablegaslimit.js";
import * as z from "zod";

export type DeployFromTemplateSmartContractSmartContractManagementResponseResponseBody =
    | MicroserviceNotResponding
    | Unknown
    | CouldNotEstimateGasPrice
    | CouldNotBroadcast
    | CouldNotAssignNonce
    | CouldNotSign
    | NoProviderForNetwork;

export type DeployFromTemplateSmartContractSmartContractManagementResponseBody =
    CouldNotFindResource;

export type DeployFromTemplateSmartContractResponseBody =
    | SmartContractNotActivated
    | InvalidBytecode
    | InvalidAbi
    | MissingArgument
    | UnexpectedArgument
    | InvalidArgument
    | CallException
    | NumericFault
    | EnsNotSupported
    | ExecutionWillFail
    | InvalidGasPrice
    | InsufficientFunds
    | AlreadyKnown
    | NonceExpired
    | UnpredictableGasLimit
    | BadRequestException;

/** @internal */
export namespace DeployFromTemplateSmartContractSmartContractManagementResponseResponseBody$ {
    export const inboundSchema: z.ZodType<
        DeployFromTemplateSmartContractSmartContractManagementResponseResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.union([
        MicroserviceNotResponding$.inboundSchema,
        Unknown$.inboundSchema,
        CouldNotEstimateGasPrice$.inboundSchema,
        CouldNotBroadcast$.inboundSchema,
        CouldNotAssignNonce$.inboundSchema,
        CouldNotSign$.inboundSchema,
        NoProviderForNetwork$.inboundSchema,
    ]);

    export type Outbound =
        | MicroserviceNotResponding$.Outbound
        | Unknown$.Outbound
        | CouldNotEstimateGasPrice$.Outbound
        | CouldNotBroadcast$.Outbound
        | CouldNotAssignNonce$.Outbound
        | CouldNotSign$.Outbound
        | NoProviderForNetwork$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeployFromTemplateSmartContractSmartContractManagementResponseResponseBody
    > = z.union([
        MicroserviceNotResponding$.outboundSchema,
        Unknown$.outboundSchema,
        CouldNotEstimateGasPrice$.outboundSchema,
        CouldNotBroadcast$.outboundSchema,
        CouldNotAssignNonce$.outboundSchema,
        CouldNotSign$.outboundSchema,
        NoProviderForNetwork$.outboundSchema,
    ]);
}

/** @internal */
export namespace DeployFromTemplateSmartContractSmartContractManagementResponseBody$ {
    export const inboundSchema: z.ZodType<
        DeployFromTemplateSmartContractSmartContractManagementResponseBody,
        z.ZodTypeDef,
        unknown
    > = CouldNotFindResource$.inboundSchema;

    export type Outbound = CouldNotFindResource$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeployFromTemplateSmartContractSmartContractManagementResponseBody
    > = CouldNotFindResource$.outboundSchema;
}

/** @internal */
export namespace DeployFromTemplateSmartContractResponseBody$ {
    export const inboundSchema: z.ZodType<
        DeployFromTemplateSmartContractResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.union([
        SmartContractNotActivated$.inboundSchema,
        InvalidBytecode$.inboundSchema,
        InvalidAbi$.inboundSchema,
        MissingArgument$.inboundSchema,
        UnexpectedArgument$.inboundSchema,
        InvalidArgument$.inboundSchema,
        CallException$.inboundSchema,
        NumericFault$.inboundSchema,
        EnsNotSupported$.inboundSchema,
        ExecutionWillFail$.inboundSchema,
        InvalidGasPrice$.inboundSchema,
        InsufficientFunds$.inboundSchema,
        AlreadyKnown$.inboundSchema,
        NonceExpired$.inboundSchema,
        UnpredictableGasLimit$.inboundSchema,
        BadRequestException$.inboundSchema,
    ]);

    export type Outbound =
        | SmartContractNotActivated$.Outbound
        | InvalidBytecode$.Outbound
        | InvalidAbi$.Outbound
        | MissingArgument$.Outbound
        | UnexpectedArgument$.Outbound
        | InvalidArgument$.Outbound
        | CallException$.Outbound
        | NumericFault$.Outbound
        | EnsNotSupported$.Outbound
        | ExecutionWillFail$.Outbound
        | InvalidGasPrice$.Outbound
        | InsufficientFunds$.Outbound
        | AlreadyKnown$.Outbound
        | NonceExpired$.Outbound
        | UnpredictableGasLimit$.Outbound
        | BadRequestException$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        DeployFromTemplateSmartContractResponseBody
    > = z.union([
        SmartContractNotActivated$.outboundSchema,
        InvalidBytecode$.outboundSchema,
        InvalidAbi$.outboundSchema,
        MissingArgument$.outboundSchema,
        UnexpectedArgument$.outboundSchema,
        InvalidArgument$.outboundSchema,
        CallException$.outboundSchema,
        NumericFault$.outboundSchema,
        EnsNotSupported$.outboundSchema,
        ExecutionWillFail$.outboundSchema,
        InvalidGasPrice$.outboundSchema,
        InsufficientFunds$.outboundSchema,
        AlreadyKnown$.outboundSchema,
        NonceExpired$.outboundSchema,
        UnpredictableGasLimit$.outboundSchema,
        BadRequestException$.outboundSchema,
    ]);
}
