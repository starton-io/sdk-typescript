/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { BadRequestException, BadRequestException$ } from "./badrequestexception";
import { InvalidAbi, InvalidAbi$ } from "./invalidabi";
import { InvalidContractAddress, InvalidContractAddress$ } from "./invalidcontractaddress";
import * as z from "zod";

export type ImportExistingSmartContractResponseBody =
    | InvalidContractAddress
    | InvalidAbi
    | BadRequestException;

/** @internal */
export namespace ImportExistingSmartContractResponseBody$ {
    export type Inbound =
        | InvalidContractAddress$.Inbound
        | InvalidAbi$.Inbound
        | BadRequestException$.Inbound;

    export type Outbound =
        | InvalidContractAddress$.Outbound
        | InvalidAbi$.Outbound
        | BadRequestException$.Outbound;
    export const inboundSchema: z.ZodType<
        ImportExistingSmartContractResponseBody,
        z.ZodTypeDef,
        Inbound
    > = z.union([
        InvalidContractAddress$.inboundSchema,
        InvalidAbi$.inboundSchema,
        BadRequestException$.inboundSchema,
    ]);
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ImportExistingSmartContractResponseBody
    > = z.union([
        InvalidContractAddress$.outboundSchema,
        InvalidAbi$.outboundSchema,
        BadRequestException$.outboundSchema,
    ]);
}
