/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AlreadyKnown, AlreadyKnown$ } from "./alreadyknown.js";
import { BadRequestException, BadRequestException$ } from "./badrequestexception.js";
import { CallException, CallException$ } from "./callexception.js";
import { ContractNotYetDeployed, ContractNotYetDeployed$ } from "./contractnotyetdeployed.js";
import { CouldNotAssignNonce, CouldNotAssignNonce$ } from "./couldnotassignnonce.js";
import { CouldNotBroadcast, CouldNotBroadcast$ } from "./couldnotbroadcast.js";
import { CouldNotEstimateGasPrice, CouldNotEstimateGasPrice$ } from "./couldnotestimategasprice.js";
import { CouldNotFindResource, CouldNotFindResource$ } from "./couldnotfindresource.js";
import { CouldNotSign, CouldNotSign$ } from "./couldnotsign.js";
import { EnsNotSupported, EnsNotSupported$ } from "./ensnotsupported.js";
import { ExecutionWillFail, ExecutionWillFail$ } from "./executionwillfail.js";
import { InsufficientFunds, InsufficientFunds$ } from "./insufficientfunds.js";
import { InvalidAbi, InvalidAbi$ } from "./invalidabi.js";
import { InvalidArgument, InvalidArgument$ } from "./invalidargument.js";
import { InvalidBytecode, InvalidBytecode$ } from "./invalidbytecode.js";
import { InvalidFunction, InvalidFunction$ } from "./invalidfunction.js";
import { InvalidGasPrice, InvalidGasPrice$ } from "./invalidgasprice.js";
import { MissingArgument, MissingArgument$ } from "./missingargument.js";
import { NonceExpired, NonceExpired$ } from "./nonceexpired.js";
import { NoProviderForNetwork, NoProviderForNetwork$ } from "./noproviderfornetwork.js";
import { NumericFault, NumericFault$ } from "./numericfault.js";
import {
    ReplacementGasPriceUnderpriced,
    ReplacementGasPriceUnderpriced$,
} from "./replacementgaspriceunderpriced.js";
import { UnexpectedArgument, UnexpectedArgument$ } from "./unexpectedargument.js";
import { Unknown, Unknown$ } from "./unknown.js";
import { UnpredictableGasLimit, UnpredictableGasLimit$ } from "./unpredictablegaslimit.js";
import * as z from "zod";

export type CallSmartContractSmartContractManagementResponse500ResponseBody =
    | Unknown
    | CouldNotBroadcast
    | NoProviderForNetwork
    | CouldNotEstimateGasPrice
    | CouldNotAssignNonce
    | CouldNotSign;

export type CallSmartContractSmartContractManagementResponseResponseBody =
    ReplacementGasPriceUnderpriced;

export type CallSmartContractSmartContractManagementResponseBody = CouldNotFindResource;

export type CallSmartContractResponseBody =
    | InvalidBytecode
    | InvalidAbi
    | InvalidFunction
    | MissingArgument
    | UnexpectedArgument
    | InvalidArgument
    | CallException
    | NumericFault
    | EnsNotSupported
    | UnpredictableGasLimit
    | ExecutionWillFail
    | InvalidGasPrice
    | InsufficientFunds
    | AlreadyKnown
    | NonceExpired
    | ContractNotYetDeployed
    | BadRequestException;

/** @internal */
export namespace CallSmartContractSmartContractManagementResponse500ResponseBody$ {
    export const inboundSchema: z.ZodType<
        CallSmartContractSmartContractManagementResponse500ResponseBody,
        z.ZodTypeDef,
        unknown
    > = z.union([
        Unknown$.inboundSchema,
        CouldNotBroadcast$.inboundSchema,
        NoProviderForNetwork$.inboundSchema,
        CouldNotEstimateGasPrice$.inboundSchema,
        CouldNotAssignNonce$.inboundSchema,
        CouldNotSign$.inboundSchema,
    ]);

    export type Outbound =
        | Unknown$.Outbound
        | CouldNotBroadcast$.Outbound
        | NoProviderForNetwork$.Outbound
        | CouldNotEstimateGasPrice$.Outbound
        | CouldNotAssignNonce$.Outbound
        | CouldNotSign$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CallSmartContractSmartContractManagementResponse500ResponseBody
    > = z.union([
        Unknown$.outboundSchema,
        CouldNotBroadcast$.outboundSchema,
        NoProviderForNetwork$.outboundSchema,
        CouldNotEstimateGasPrice$.outboundSchema,
        CouldNotAssignNonce$.outboundSchema,
        CouldNotSign$.outboundSchema,
    ]);
}

/** @internal */
export namespace CallSmartContractSmartContractManagementResponseResponseBody$ {
    export const inboundSchema: z.ZodType<
        CallSmartContractSmartContractManagementResponseResponseBody,
        z.ZodTypeDef,
        unknown
    > = ReplacementGasPriceUnderpriced$.inboundSchema;

    export type Outbound = ReplacementGasPriceUnderpriced$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CallSmartContractSmartContractManagementResponseResponseBody
    > = ReplacementGasPriceUnderpriced$.outboundSchema;
}

/** @internal */
export namespace CallSmartContractSmartContractManagementResponseBody$ {
    export const inboundSchema: z.ZodType<
        CallSmartContractSmartContractManagementResponseBody,
        z.ZodTypeDef,
        unknown
    > = CouldNotFindResource$.inboundSchema;

    export type Outbound = CouldNotFindResource$.Outbound;
    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CallSmartContractSmartContractManagementResponseBody
    > = CouldNotFindResource$.outboundSchema;
}

/** @internal */
export namespace CallSmartContractResponseBody$ {
    export const inboundSchema: z.ZodType<CallSmartContractResponseBody, z.ZodTypeDef, unknown> =
        z.union([
            InvalidBytecode$.inboundSchema,
            InvalidAbi$.inboundSchema,
            InvalidFunction$.inboundSchema,
            MissingArgument$.inboundSchema,
            UnexpectedArgument$.inboundSchema,
            InvalidArgument$.inboundSchema,
            CallException$.inboundSchema,
            NumericFault$.inboundSchema,
            EnsNotSupported$.inboundSchema,
            UnpredictableGasLimit$.inboundSchema,
            ExecutionWillFail$.inboundSchema,
            InvalidGasPrice$.inboundSchema,
            InsufficientFunds$.inboundSchema,
            AlreadyKnown$.inboundSchema,
            NonceExpired$.inboundSchema,
            ContractNotYetDeployed$.inboundSchema,
            BadRequestException$.inboundSchema,
        ]);

    export type Outbound =
        | InvalidBytecode$.Outbound
        | InvalidAbi$.Outbound
        | InvalidFunction$.Outbound
        | MissingArgument$.Outbound
        | UnexpectedArgument$.Outbound
        | InvalidArgument$.Outbound
        | CallException$.Outbound
        | NumericFault$.Outbound
        | EnsNotSupported$.Outbound
        | UnpredictableGasLimit$.Outbound
        | ExecutionWillFail$.Outbound
        | InvalidGasPrice$.Outbound
        | InsufficientFunds$.Outbound
        | AlreadyKnown$.Outbound
        | NonceExpired$.Outbound
        | ContractNotYetDeployed$.Outbound
        | BadRequestException$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CallSmartContractResponseBody> =
        z.union([
            InvalidBytecode$.outboundSchema,
            InvalidAbi$.outboundSchema,
            InvalidFunction$.outboundSchema,
            MissingArgument$.outboundSchema,
            UnexpectedArgument$.outboundSchema,
            InvalidArgument$.outboundSchema,
            CallException$.outboundSchema,
            NumericFault$.outboundSchema,
            EnsNotSupported$.outboundSchema,
            UnpredictableGasLimit$.outboundSchema,
            ExecutionWillFail$.outboundSchema,
            InvalidGasPrice$.outboundSchema,
            InsufficientFunds$.outboundSchema,
            AlreadyKnown$.outboundSchema,
            NonceExpired$.outboundSchema,
            ContractNotYetDeployed$.outboundSchema,
            BadRequestException$.outboundSchema,
        ]);
}
