/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type SchemasCOULDNOTCANCELWEBHOOKContext = {};

export type CouldNotCancelWebhookData = {
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
    context?: SchemasCOULDNOTCANCELWEBHOOKContext | undefined;
    errorCode: string;
    message: string;
    path: string;
    statusCode: number;
    timestamp: string;
};

export class CouldNotCancelWebhook extends Error {
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
    context?: SchemasCOULDNOTCANCELWEBHOOKContext | undefined;
    errorCode: string;
    path: string;
    statusCode: number;
    timestamp: string;

    /** The original data that was passed to this error instance. */
    data$: CouldNotCancelWebhookData;

    constructor(err: CouldNotCancelWebhookData) {
        super("");
        this.data$ = err;

        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }
        if (err.context != null) {
            this.context = err.context;
        }
        this.errorCode = err.errorCode;
        this.path = err.path;
        this.statusCode = err.statusCode;
        this.timestamp = err.timestamp;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "CouldNotCancelWebhook";
    }
}

/** @internal */
export namespace SchemasCOULDNOTCANCELWEBHOOKContext$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        SchemasCOULDNOTCANCELWEBHOOKContext,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        SchemasCOULDNOTCANCELWEBHOOKContext
    > = z.object({});
}

/** @internal */
export namespace CouldNotCancelWebhook$ {
    export type Inbound = {
        RawResponse?: Response | undefined;
        context?: SchemasCOULDNOTCANCELWEBHOOKContext$.Inbound | undefined;
        errorCode?: string | undefined;
        message?: string | undefined;
        path: string;
        statusCode?: number | undefined;
        timestamp: string;
    };

    export const inboundSchema: z.ZodType<CouldNotCancelWebhook, z.ZodTypeDef, Inbound> = z
        .object({
            RawResponse: z.instanceof(Response).optional(),
            context: z.lazy(() => SchemasCOULDNOTCANCELWEBHOOKContext$.inboundSchema).optional(),
            errorCode: z.string().default("COULD_NOT_CANCEL_WEBHOOK"),
            message: z.string().default("Could not cancel webhook."),
            path: z.string(),
            statusCode: z.number().default(412),
            timestamp: z.string(),
        })
        .transform((v) => {
            return new CouldNotCancelWebhook({
                ...(v.RawResponse === undefined ? null : { rawResponse: v.RawResponse }),
                ...(v.context === undefined ? null : { context: v.context }),
                errorCode: v.errorCode,
                message: v.message,
                path: v.path,
                statusCode: v.statusCode,
                timestamp: v.timestamp,
            });
        });

    export type Outbound = {
        RawResponse?: never | undefined;
        context?: SchemasCOULDNOTCANCELWEBHOOKContext$.Outbound | undefined;
        errorCode: string;
        message: string;
        path: string;
        statusCode: number;
        timestamp: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CouldNotCancelWebhook> = z
        .instanceof(CouldNotCancelWebhook)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    rawResponse: z
                        .instanceof(Response)
                        .transform(() => {
                            throw new Error("Response cannot be serialized");
                        })
                        .optional(),
                    context: z
                        .lazy(() => SchemasCOULDNOTCANCELWEBHOOKContext$.outboundSchema)
                        .optional(),
                    errorCode: z.string().default("COULD_NOT_CANCEL_WEBHOOK"),
                    message: z.string().default("Could not cancel webhook."),
                    path: z.string(),
                    statusCode: z.number().default(412),
                    timestamp: z.string(),
                })
                .transform((v) => {
                    return {
                        ...(v.rawResponse === undefined ? null : { RawResponse: v.rawResponse }),
                        ...(v.context === undefined ? null : { context: v.context }),
                        errorCode: v.errorCode,
                        message: v.message,
                        path: v.path,
                        statusCode: v.statusCode,
                        timestamp: v.timestamp,
                    };
                })
        );
}
