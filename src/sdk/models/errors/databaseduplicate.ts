/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type SchemasDATABASEDUPLICATEContext = {};

export type DatabaseDuplicateData = {
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
    context?: SchemasDATABASEDUPLICATEContext | null | undefined;
    errorCode?: string;
    message?: string;
    path: string;
    statusCode?: number;
    timestamp: string;
};

export class DatabaseDuplicate extends Error {
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
    context?: SchemasDATABASEDUPLICATEContext | null | undefined;
    errorCode?: string;
    path: string;
    statusCode?: number;
    timestamp: string;

    /** The original data that was passed to this error instance. */
    data$: DatabaseDuplicateData;

    constructor(err: DatabaseDuplicateData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }
        if (err.context != null) {
            this.context = err.context;
        }
        if (err.errorCode != null) {
            this.errorCode = err.errorCode;
        }
        this.path = err.path;
        if (err.statusCode != null) {
            this.statusCode = err.statusCode;
        }
        this.timestamp = err.timestamp;

        this.name = "DatabaseDuplicate";
    }
}

/** @internal */
export const SchemasDATABASEDUPLICATEContext$inboundSchema: z.ZodType<
    SchemasDATABASEDUPLICATEContext,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type SchemasDATABASEDUPLICATEContext$Outbound = {};

/** @internal */
export const SchemasDATABASEDUPLICATEContext$outboundSchema: z.ZodType<
    SchemasDATABASEDUPLICATEContext$Outbound,
    z.ZodTypeDef,
    SchemasDATABASEDUPLICATEContext
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasDATABASEDUPLICATEContext$ {
    /** @deprecated use `SchemasDATABASEDUPLICATEContext$inboundSchema` instead. */
    export const inboundSchema = SchemasDATABASEDUPLICATEContext$inboundSchema;
    /** @deprecated use `SchemasDATABASEDUPLICATEContext$outboundSchema` instead. */
    export const outboundSchema = SchemasDATABASEDUPLICATEContext$outboundSchema;
    /** @deprecated use `SchemasDATABASEDUPLICATEContext$Outbound` instead. */
    export type Outbound = SchemasDATABASEDUPLICATEContext$Outbound;
}

/** @internal */
export const DatabaseDuplicate$inboundSchema: z.ZodType<DatabaseDuplicate, z.ZodTypeDef, unknown> =
    z
        .object({
            RawResponse: z.instanceof(Response).optional(),
            context: z
                .nullable(z.lazy(() => SchemasDATABASEDUPLICATEContext$inboundSchema))
                .optional(),
            errorCode: z.string().default("DATABASE_DUPLICATE"),
            message: z
                .string()
                .default("Duplicate conflict when saving this entity to the datbase."),
            path: z.string(),
            statusCode: z.number().default(409),
            timestamp: z.string(),
        })
        .transform((v) => {
            const remapped = remap$(v, {
                RawResponse: "rawResponse",
            });

            return new DatabaseDuplicate(remapped);
        });

/** @internal */
export type DatabaseDuplicate$Outbound = {
    RawResponse?: never | undefined;
    context?: SchemasDATABASEDUPLICATEContext$Outbound | null | undefined;
    errorCode?: string;
    message?: string;
    path: string;
    statusCode?: number;
    timestamp: string;
};

/** @internal */
export const DatabaseDuplicate$outboundSchema: z.ZodType<
    DatabaseDuplicate$Outbound,
    z.ZodTypeDef,
    DatabaseDuplicate
> = z
    .instanceof(DatabaseDuplicate)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                rawResponse: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
                context: z
                    .nullable(z.lazy(() => SchemasDATABASEDUPLICATEContext$outboundSchema))
                    .optional(),
                errorCode: z.string().default("DATABASE_DUPLICATE"),
                message: z
                    .string()
                    .default("Duplicate conflict when saving this entity to the datbase."),
                path: z.string(),
                statusCode: z.number().default(409),
                timestamp: z.string(),
            })
            .transform((v) => {
                return remap$(v, {
                    rawResponse: "RawResponse",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DatabaseDuplicate$ {
    /** @deprecated use `DatabaseDuplicate$inboundSchema` instead. */
    export const inboundSchema = DatabaseDuplicate$inboundSchema;
    /** @deprecated use `DatabaseDuplicate$outboundSchema` instead. */
    export const outboundSchema = DatabaseDuplicate$outboundSchema;
    /** @deprecated use `DatabaseDuplicate$Outbound` instead. */
    export type Outbound = DatabaseDuplicate$Outbound;
}
