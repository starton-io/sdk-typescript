/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  BadRequestException,
  BadRequestException$inboundSchema,
  BadRequestException$Outbound,
  BadRequestException$outboundSchema,
} from "./badrequestexception.js";
import {
  CouldNotFindResource,
  CouldNotFindResource$inboundSchema,
  CouldNotFindResource$Outbound,
  CouldNotFindResource$outboundSchema,
} from "./couldnotfindresource.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DeleteWatcherMonitorResponseBody = CouldNotFindResource;

export type DeleteWatcherResponseBody = BadRequestException;

/** @internal */
export const DeleteWatcherMonitorResponseBody$inboundSchema: z.ZodType<
  DeleteWatcherMonitorResponseBody,
  z.ZodTypeDef,
  unknown
> = CouldNotFindResource$inboundSchema;

/** @internal */
export type DeleteWatcherMonitorResponseBody$Outbound =
  CouldNotFindResource$Outbound;

/** @internal */
export const DeleteWatcherMonitorResponseBody$outboundSchema: z.ZodType<
  DeleteWatcherMonitorResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteWatcherMonitorResponseBody
> = CouldNotFindResource$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteWatcherMonitorResponseBody$ {
  /** @deprecated use `DeleteWatcherMonitorResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteWatcherMonitorResponseBody$inboundSchema;
  /** @deprecated use `DeleteWatcherMonitorResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteWatcherMonitorResponseBody$outboundSchema;
  /** @deprecated use `DeleteWatcherMonitorResponseBody$Outbound` instead. */
  export type Outbound = DeleteWatcherMonitorResponseBody$Outbound;
}

export function deleteWatcherMonitorResponseBodyToJSON(
  deleteWatcherMonitorResponseBody: DeleteWatcherMonitorResponseBody,
): string {
  return JSON.stringify(
    DeleteWatcherMonitorResponseBody$outboundSchema.parse(
      deleteWatcherMonitorResponseBody,
    ),
  );
}

export function deleteWatcherMonitorResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteWatcherMonitorResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteWatcherMonitorResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteWatcherMonitorResponseBody' from JSON`,
  );
}

/** @internal */
export const DeleteWatcherResponseBody$inboundSchema: z.ZodType<
  DeleteWatcherResponseBody,
  z.ZodTypeDef,
  unknown
> = BadRequestException$inboundSchema;

/** @internal */
export type DeleteWatcherResponseBody$Outbound = BadRequestException$Outbound;

/** @internal */
export const DeleteWatcherResponseBody$outboundSchema: z.ZodType<
  DeleteWatcherResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteWatcherResponseBody
> = BadRequestException$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteWatcherResponseBody$ {
  /** @deprecated use `DeleteWatcherResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeleteWatcherResponseBody$inboundSchema;
  /** @deprecated use `DeleteWatcherResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeleteWatcherResponseBody$outboundSchema;
  /** @deprecated use `DeleteWatcherResponseBody$Outbound` instead. */
  export type Outbound = DeleteWatcherResponseBody$Outbound;
}

export function deleteWatcherResponseBodyToJSON(
  deleteWatcherResponseBody: DeleteWatcherResponseBody,
): string {
  return JSON.stringify(
    DeleteWatcherResponseBody$outboundSchema.parse(deleteWatcherResponseBody),
  );
}

export function deleteWatcherResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteWatcherResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteWatcherResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteWatcherResponseBody' from JSON`,
  );
}
