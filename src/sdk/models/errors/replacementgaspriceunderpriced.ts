/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type SchemasREPLACEMENTGASPRICEUNDERPRICEDContext = {};

export type ReplacementGasPriceUnderpricedData = {
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse1?: Response | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse2?: Response | undefined;
    context?: SchemasREPLACEMENTGASPRICEUNDERPRICEDContext | undefined;
    errorCode: string;
    message: string;
    path: string;
    statusCode: number;
    timestamp: string;
};

export class ReplacementGasPriceUnderpriced extends Error {
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse1?: Response | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse2?: Response | undefined;
    context?: SchemasREPLACEMENTGASPRICEUNDERPRICEDContext | undefined;
    errorCode: string;
    path: string;
    statusCode: number;
    timestamp: string;

    /** The original data that was passed to this error instance. */
    data$: ReplacementGasPriceUnderpricedData;

    constructor(err: ReplacementGasPriceUnderpricedData) {
        super("");
        this.data$ = err;

        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }
        if (err.rawResponse1 != null) {
            this.rawResponse1 = err.rawResponse1;
        }
        if (err.rawResponse2 != null) {
            this.rawResponse2 = err.rawResponse2;
        }
        if (err.context != null) {
            this.context = err.context;
        }
        this.errorCode = err.errorCode;
        this.path = err.path;
        this.statusCode = err.statusCode;
        this.timestamp = err.timestamp;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "ReplacementGasPriceUnderpriced";
    }
}

/** @internal */
export namespace SchemasREPLACEMENTGASPRICEUNDERPRICEDContext$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        SchemasREPLACEMENTGASPRICEUNDERPRICEDContext,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        SchemasREPLACEMENTGASPRICEUNDERPRICEDContext
    > = z.object({});
}

/** @internal */
export namespace ReplacementGasPriceUnderpriced$ {
    export type Inbound = {
        RawResponse?: Response | undefined;
        RawResponse1?: Response | undefined;
        RawResponse2?: Response | undefined;
        context?: SchemasREPLACEMENTGASPRICEUNDERPRICEDContext$.Inbound | undefined;
        errorCode?: string | undefined;
        message?: string | undefined;
        path: string;
        statusCode?: number | undefined;
        timestamp: string;
    };

    export const inboundSchema: z.ZodType<ReplacementGasPriceUnderpriced, z.ZodTypeDef, Inbound> = z
        .object({
            RawResponse: z.instanceof(Response).optional(),
            RawResponse1: z.instanceof(Response).optional(),
            RawResponse2: z.instanceof(Response).optional(),
            context: z
                .lazy(() => SchemasREPLACEMENTGASPRICEUNDERPRICEDContext$.inboundSchema)
                .optional(),
            errorCode: z.string().default("REPLACEMENT_GAS_PRICE_UNDERPRICED"),
            message: z
                .string()
                .default(
                    "Your transaction is underpriced. You try to replace an existing transaction with not enough gas fee."
                ),
            path: z.string(),
            statusCode: z.number().default(422),
            timestamp: z.string(),
        })
        .transform((v) => {
            return new ReplacementGasPriceUnderpriced({
                ...(v.RawResponse === undefined ? null : { rawResponse: v.RawResponse }),
                ...(v.RawResponse1 === undefined ? null : { rawResponse1: v.RawResponse1 }),
                ...(v.RawResponse2 === undefined ? null : { rawResponse2: v.RawResponse2 }),
                ...(v.context === undefined ? null : { context: v.context }),
                errorCode: v.errorCode,
                message: v.message,
                path: v.path,
                statusCode: v.statusCode,
                timestamp: v.timestamp,
            });
        });

    export type Outbound = {
        RawResponse?: never | undefined;
        RawResponse1?: never | undefined;
        RawResponse2?: never | undefined;
        context?: SchemasREPLACEMENTGASPRICEUNDERPRICEDContext$.Outbound | undefined;
        errorCode: string;
        message: string;
        path: string;
        statusCode: number;
        timestamp: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ReplacementGasPriceUnderpriced> =
        z
            .instanceof(ReplacementGasPriceUnderpriced)
            .transform((v) => v.data$)
            .pipe(
                z
                    .object({
                        rawResponse: z
                            .instanceof(Response)
                            .transform(() => {
                                throw new Error("Response cannot be serialized");
                            })
                            .optional(),
                        rawResponse1: z
                            .instanceof(Response)
                            .transform(() => {
                                throw new Error("Response cannot be serialized");
                            })
                            .optional(),
                        rawResponse2: z
                            .instanceof(Response)
                            .transform(() => {
                                throw new Error("Response cannot be serialized");
                            })
                            .optional(),
                        context: z
                            .lazy(
                                () => SchemasREPLACEMENTGASPRICEUNDERPRICEDContext$.outboundSchema
                            )
                            .optional(),
                        errorCode: z.string().default("REPLACEMENT_GAS_PRICE_UNDERPRICED"),
                        message: z
                            .string()
                            .default(
                                "Your transaction is underpriced. You try to replace an existing transaction with not enough gas fee."
                            ),
                        path: z.string(),
                        statusCode: z.number().default(422),
                        timestamp: z.string(),
                    })
                    .transform((v) => {
                        return {
                            ...(v.rawResponse === undefined
                                ? null
                                : { RawResponse: v.rawResponse }),
                            ...(v.rawResponse1 === undefined
                                ? null
                                : { RawResponse1: v.rawResponse1 }),
                            ...(v.rawResponse2 === undefined
                                ? null
                                : { RawResponse2: v.rawResponse2 }),
                            ...(v.context === undefined ? null : { context: v.context }),
                            errorCode: v.errorCode,
                            message: v.message,
                            path: v.path,
                            statusCode: v.statusCode,
                            timestamp: v.timestamp,
                        };
                    })
            );
}
