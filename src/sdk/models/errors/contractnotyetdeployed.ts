/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type SchemasCONTRACTNOTYETDEPLOYEDContext = {};

export type ContractNotYetDeployedData = {
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
    context?: SchemasCONTRACTNOTYETDEPLOYEDContext | null | undefined;
    errorCode?: string;
    message?: string;
    path: string;
    statusCode?: number;
    timestamp: string;
};

export class ContractNotYetDeployed extends Error {
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
    context?: SchemasCONTRACTNOTYETDEPLOYEDContext | null | undefined;
    errorCode?: string;
    path: string;
    statusCode?: number;
    timestamp: string;

    /** The original data that was passed to this error instance. */
    data$: ContractNotYetDeployedData;

    constructor(err: ContractNotYetDeployedData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }
        if (err.context != null) {
            this.context = err.context;
        }
        if (err.errorCode != null) {
            this.errorCode = err.errorCode;
        }
        this.path = err.path;
        if (err.statusCode != null) {
            this.statusCode = err.statusCode;
        }
        this.timestamp = err.timestamp;

        this.name = "ContractNotYetDeployed";
    }
}

/** @internal */
export const SchemasCONTRACTNOTYETDEPLOYEDContext$inboundSchema: z.ZodType<
    SchemasCONTRACTNOTYETDEPLOYEDContext,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type SchemasCONTRACTNOTYETDEPLOYEDContext$Outbound = {};

/** @internal */
export const SchemasCONTRACTNOTYETDEPLOYEDContext$outboundSchema: z.ZodType<
    SchemasCONTRACTNOTYETDEPLOYEDContext$Outbound,
    z.ZodTypeDef,
    SchemasCONTRACTNOTYETDEPLOYEDContext
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemasCONTRACTNOTYETDEPLOYEDContext$ {
    /** @deprecated use `SchemasCONTRACTNOTYETDEPLOYEDContext$inboundSchema` instead. */
    export const inboundSchema = SchemasCONTRACTNOTYETDEPLOYEDContext$inboundSchema;
    /** @deprecated use `SchemasCONTRACTNOTYETDEPLOYEDContext$outboundSchema` instead. */
    export const outboundSchema = SchemasCONTRACTNOTYETDEPLOYEDContext$outboundSchema;
    /** @deprecated use `SchemasCONTRACTNOTYETDEPLOYEDContext$Outbound` instead. */
    export type Outbound = SchemasCONTRACTNOTYETDEPLOYEDContext$Outbound;
}

/** @internal */
export const ContractNotYetDeployed$inboundSchema: z.ZodType<
    ContractNotYetDeployed,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        RawResponse: z.instanceof(Response).optional(),
        context: z
            .nullable(z.lazy(() => SchemasCONTRACTNOTYETDEPLOYEDContext$inboundSchema))
            .optional(),
        errorCode: z.string().default("CONTRACT_NOT_YET_DEPLOYED"),
        message: z.string().default("Smart contract is not deployed on the blockchain yet."),
        path: z.string(),
        statusCode: z.number().default(400),
        timestamp: z.string(),
    })
    .transform((v) => {
        const remapped = remap$(v, {
            RawResponse: "rawResponse",
        });

        return new ContractNotYetDeployed(remapped);
    });

/** @internal */
export type ContractNotYetDeployed$Outbound = {
    RawResponse?: never | undefined;
    context?: SchemasCONTRACTNOTYETDEPLOYEDContext$Outbound | null | undefined;
    errorCode?: string;
    message?: string;
    path: string;
    statusCode?: number;
    timestamp: string;
};

/** @internal */
export const ContractNotYetDeployed$outboundSchema: z.ZodType<
    ContractNotYetDeployed$Outbound,
    z.ZodTypeDef,
    ContractNotYetDeployed
> = z
    .instanceof(ContractNotYetDeployed)
    .transform((v) => v.data$)
    .pipe(
        z
            .object({
                rawResponse: z
                    .instanceof(Response)
                    .transform(() => {
                        throw new Error("Response cannot be serialized");
                    })
                    .optional(),
                context: z
                    .nullable(z.lazy(() => SchemasCONTRACTNOTYETDEPLOYEDContext$outboundSchema))
                    .optional(),
                errorCode: z.string().default("CONTRACT_NOT_YET_DEPLOYED"),
                message: z
                    .string()
                    .default("Smart contract is not deployed on the blockchain yet."),
                path: z.string(),
                statusCode: z.number().default(400),
                timestamp: z.string(),
            })
            .transform((v) => {
                return remap$(v, {
                    rawResponse: "RawResponse",
                });
            })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractNotYetDeployed$ {
    /** @deprecated use `ContractNotYetDeployed$inboundSchema` instead. */
    export const inboundSchema = ContractNotYetDeployed$inboundSchema;
    /** @deprecated use `ContractNotYetDeployed$outboundSchema` instead. */
    export const outboundSchema = ContractNotYetDeployed$outboundSchema;
    /** @deprecated use `ContractNotYetDeployed$Outbound` instead. */
    export type Outbound = ContractNotYetDeployed$Outbound;
}
