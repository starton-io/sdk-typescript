/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  BadRequestException,
  BadRequestException$inboundSchema,
  BadRequestException$Outbound,
  BadRequestException$outboundSchema,
} from "./badrequestexception.js";
import {
  CouldNotFindResource,
  CouldNotFindResource$inboundSchema,
  CouldNotFindResource$Outbound,
  CouldNotFindResource$outboundSchema,
} from "./couldnotfindresource.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetOneWatcherMonitorResponseBody = CouldNotFindResource;

export type GetOneWatcherResponseBody = BadRequestException;

/** @internal */
export const GetOneWatcherMonitorResponseBody$inboundSchema: z.ZodType<
  GetOneWatcherMonitorResponseBody,
  z.ZodTypeDef,
  unknown
> = CouldNotFindResource$inboundSchema;

/** @internal */
export type GetOneWatcherMonitorResponseBody$Outbound =
  CouldNotFindResource$Outbound;

/** @internal */
export const GetOneWatcherMonitorResponseBody$outboundSchema: z.ZodType<
  GetOneWatcherMonitorResponseBody$Outbound,
  z.ZodTypeDef,
  GetOneWatcherMonitorResponseBody
> = CouldNotFindResource$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOneWatcherMonitorResponseBody$ {
  /** @deprecated use `GetOneWatcherMonitorResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetOneWatcherMonitorResponseBody$inboundSchema;
  /** @deprecated use `GetOneWatcherMonitorResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetOneWatcherMonitorResponseBody$outboundSchema;
  /** @deprecated use `GetOneWatcherMonitorResponseBody$Outbound` instead. */
  export type Outbound = GetOneWatcherMonitorResponseBody$Outbound;
}

export function getOneWatcherMonitorResponseBodyToJSON(
  getOneWatcherMonitorResponseBody: GetOneWatcherMonitorResponseBody,
): string {
  return JSON.stringify(
    GetOneWatcherMonitorResponseBody$outboundSchema.parse(
      getOneWatcherMonitorResponseBody,
    ),
  );
}

export function getOneWatcherMonitorResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetOneWatcherMonitorResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOneWatcherMonitorResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOneWatcherMonitorResponseBody' from JSON`,
  );
}

/** @internal */
export const GetOneWatcherResponseBody$inboundSchema: z.ZodType<
  GetOneWatcherResponseBody,
  z.ZodTypeDef,
  unknown
> = BadRequestException$inboundSchema;

/** @internal */
export type GetOneWatcherResponseBody$Outbound = BadRequestException$Outbound;

/** @internal */
export const GetOneWatcherResponseBody$outboundSchema: z.ZodType<
  GetOneWatcherResponseBody$Outbound,
  z.ZodTypeDef,
  GetOneWatcherResponseBody
> = BadRequestException$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOneWatcherResponseBody$ {
  /** @deprecated use `GetOneWatcherResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetOneWatcherResponseBody$inboundSchema;
  /** @deprecated use `GetOneWatcherResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetOneWatcherResponseBody$outboundSchema;
  /** @deprecated use `GetOneWatcherResponseBody$Outbound` instead. */
  export type Outbound = GetOneWatcherResponseBody$Outbound;
}

export function getOneWatcherResponseBodyToJSON(
  getOneWatcherResponseBody: GetOneWatcherResponseBody,
): string {
  return JSON.stringify(
    GetOneWatcherResponseBody$outboundSchema.parse(getOneWatcherResponseBody),
  );
}

export function getOneWatcherResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetOneWatcherResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOneWatcherResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOneWatcherResponseBody' from JSON`,
  );
}
