/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  BadRequestException,
  BadRequestException$inboundSchema,
  BadRequestException$Outbound,
  BadRequestException$outboundSchema,
} from "./badrequestexception.js";
import {
  CouldNotFindResource,
  CouldNotFindResource$inboundSchema,
  CouldNotFindResource$Outbound,
  CouldNotFindResource$outboundSchema,
} from "./couldnotfindresource.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type UpdateWatcherMonitorResponseBody = CouldNotFindResource;

export type UpdateWatcherResponseBody = BadRequestException;

/** @internal */
export const UpdateWatcherMonitorResponseBody$inboundSchema: z.ZodType<
  UpdateWatcherMonitorResponseBody,
  z.ZodTypeDef,
  unknown
> = CouldNotFindResource$inboundSchema;

/** @internal */
export type UpdateWatcherMonitorResponseBody$Outbound =
  CouldNotFindResource$Outbound;

/** @internal */
export const UpdateWatcherMonitorResponseBody$outboundSchema: z.ZodType<
  UpdateWatcherMonitorResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateWatcherMonitorResponseBody
> = CouldNotFindResource$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWatcherMonitorResponseBody$ {
  /** @deprecated use `UpdateWatcherMonitorResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateWatcherMonitorResponseBody$inboundSchema;
  /** @deprecated use `UpdateWatcherMonitorResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdateWatcherMonitorResponseBody$outboundSchema;
  /** @deprecated use `UpdateWatcherMonitorResponseBody$Outbound` instead. */
  export type Outbound = UpdateWatcherMonitorResponseBody$Outbound;
}

export function updateWatcherMonitorResponseBodyToJSON(
  updateWatcherMonitorResponseBody: UpdateWatcherMonitorResponseBody,
): string {
  return JSON.stringify(
    UpdateWatcherMonitorResponseBody$outboundSchema.parse(
      updateWatcherMonitorResponseBody,
    ),
  );
}

export function updateWatcherMonitorResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWatcherMonitorResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWatcherMonitorResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWatcherMonitorResponseBody' from JSON`,
  );
}

/** @internal */
export const UpdateWatcherResponseBody$inboundSchema: z.ZodType<
  UpdateWatcherResponseBody,
  z.ZodTypeDef,
  unknown
> = BadRequestException$inboundSchema;

/** @internal */
export type UpdateWatcherResponseBody$Outbound = BadRequestException$Outbound;

/** @internal */
export const UpdateWatcherResponseBody$outboundSchema: z.ZodType<
  UpdateWatcherResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateWatcherResponseBody
> = BadRequestException$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWatcherResponseBody$ {
  /** @deprecated use `UpdateWatcherResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateWatcherResponseBody$inboundSchema;
  /** @deprecated use `UpdateWatcherResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdateWatcherResponseBody$outboundSchema;
  /** @deprecated use `UpdateWatcherResponseBody$Outbound` instead. */
  export type Outbound = UpdateWatcherResponseBody$Outbound;
}

export function updateWatcherResponseBodyToJSON(
  updateWatcherResponseBody: UpdateWatcherResponseBody,
): string {
  return JSON.stringify(
    UpdateWatcherResponseBody$outboundSchema.parse(updateWatcherResponseBody),
  );
}

export function updateWatcherResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWatcherResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWatcherResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWatcherResponseBody' from JSON`,
  );
}
