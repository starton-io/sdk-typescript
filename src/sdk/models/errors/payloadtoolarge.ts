/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../../lib/primitives.js";
import * as z from "zod";

export type SchemasPAYLOADTOOLARGEContext = {};

export type PayloadTooLargeData = {
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse1?: Response | undefined;
    context?: SchemasPAYLOADTOOLARGEContext | null | undefined;
    errorCode: string;
    message: string;
    path: string;
    statusCode: number;
    timestamp: string;
};

export class PayloadTooLarge extends Error {
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse?: Response | undefined;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse1?: Response | undefined;
    context?: SchemasPAYLOADTOOLARGEContext | null | undefined;
    errorCode: string;
    path: string;
    statusCode: number;
    timestamp: string;

    /** The original data that was passed to this error instance. */
    data$: PayloadTooLargeData;

    constructor(err: PayloadTooLargeData) {
        super("");
        this.data$ = err;

        if (err.rawResponse != null) {
            this.rawResponse = err.rawResponse;
        }
        if (err.rawResponse1 != null) {
            this.rawResponse1 = err.rawResponse1;
        }
        if (err.context != null) {
            this.context = err.context;
        }
        this.errorCode = err.errorCode;
        this.path = err.path;
        this.statusCode = err.statusCode;
        this.timestamp = err.timestamp;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "PayloadTooLarge";
    }
}

/** @internal */
export namespace SchemasPAYLOADTOOLARGEContext$ {
    export const inboundSchema: z.ZodType<SchemasPAYLOADTOOLARGEContext, z.ZodTypeDef, unknown> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SchemasPAYLOADTOOLARGEContext> =
        z.object({});
}

/** @internal */
export namespace PayloadTooLarge$ {
    export const inboundSchema: z.ZodType<PayloadTooLarge, z.ZodTypeDef, unknown> = z
        .object({
            RawResponse: z.instanceof(Response).optional(),
            RawResponse1: z.instanceof(Response).optional(),
            context: z
                .nullable(z.lazy(() => SchemasPAYLOADTOOLARGEContext$.inboundSchema))
                .optional(),
            errorCode: z.string().default("PAYLOAD_TOO_LARGE"),
            message: z.string().default("Payload too large."),
            path: z.string(),
            statusCode: z.number().default(413),
            timestamp: z.string(),
        })
        .transform((v) => {
            const remapped = remap$(v, {
                RawResponse: "rawResponse",
                RawResponse1: "rawResponse1",
            });

            return new PayloadTooLarge(remapped);
        });

    export type Outbound = {
        RawResponse?: never | undefined;
        RawResponse1?: never | undefined;
        context?: SchemasPAYLOADTOOLARGEContext$.Outbound | null | undefined;
        errorCode: string;
        message: string;
        path: string;
        statusCode: number;
        timestamp: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PayloadTooLarge> = z
        .instanceof(PayloadTooLarge)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    rawResponse: z
                        .instanceof(Response)
                        .transform(() => {
                            throw new Error("Response cannot be serialized");
                        })
                        .optional(),
                    rawResponse1: z
                        .instanceof(Response)
                        .transform(() => {
                            throw new Error("Response cannot be serialized");
                        })
                        .optional(),
                    context: z
                        .nullable(z.lazy(() => SchemasPAYLOADTOOLARGEContext$.outboundSchema))
                        .optional(),
                    errorCode: z.string().default("PAYLOAD_TOO_LARGE"),
                    message: z.string().default("Payload too large."),
                    path: z.string(),
                    statusCode: z.number().default(413),
                    timestamp: z.string(),
                })
                .transform((v) => {
                    return remap$(v, {
                        rawResponse: "RawResponse",
                        rawResponse1: "RawResponse1",
                    });
                })
        );
}
