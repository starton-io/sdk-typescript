/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  BadRequestException,
  BadRequestException$inboundSchema,
  BadRequestException$Outbound,
  BadRequestException$outboundSchema,
} from "./badrequestexception.js";
import {
  MaximumStorageReached,
  MaximumStorageReached$inboundSchema,
  MaximumStorageReached$Outbound,
  MaximumStorageReached$outboundSchema,
} from "./maximumstoragereached.js";
import {
  PayloadTooLarge,
  PayloadTooLarge$inboundSchema,
  PayloadTooLarge$Outbound,
  PayloadTooLarge$outboundSchema,
} from "./payloadtoolarge.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type UploadFromFilePinIpfsResponseBody =
  | MaximumStorageReached
  | PayloadTooLarge;

export type UploadFromFilePinResponseBody = BadRequestException;

/** @internal */
export const UploadFromFilePinIpfsResponseBody$inboundSchema: z.ZodType<
  UploadFromFilePinIpfsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  MaximumStorageReached$inboundSchema,
  PayloadTooLarge$inboundSchema,
]);

/** @internal */
export type UploadFromFilePinIpfsResponseBody$Outbound =
  | MaximumStorageReached$Outbound
  | PayloadTooLarge$Outbound;

/** @internal */
export const UploadFromFilePinIpfsResponseBody$outboundSchema: z.ZodType<
  UploadFromFilePinIpfsResponseBody$Outbound,
  z.ZodTypeDef,
  UploadFromFilePinIpfsResponseBody
> = z.union([
  MaximumStorageReached$outboundSchema,
  PayloadTooLarge$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadFromFilePinIpfsResponseBody$ {
  /** @deprecated use `UploadFromFilePinIpfsResponseBody$inboundSchema` instead. */
  export const inboundSchema = UploadFromFilePinIpfsResponseBody$inboundSchema;
  /** @deprecated use `UploadFromFilePinIpfsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UploadFromFilePinIpfsResponseBody$outboundSchema;
  /** @deprecated use `UploadFromFilePinIpfsResponseBody$Outbound` instead. */
  export type Outbound = UploadFromFilePinIpfsResponseBody$Outbound;
}

export function uploadFromFilePinIpfsResponseBodyToJSON(
  uploadFromFilePinIpfsResponseBody: UploadFromFilePinIpfsResponseBody,
): string {
  return JSON.stringify(
    UploadFromFilePinIpfsResponseBody$outboundSchema.parse(
      uploadFromFilePinIpfsResponseBody,
    ),
  );
}

export function uploadFromFilePinIpfsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UploadFromFilePinIpfsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadFromFilePinIpfsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadFromFilePinIpfsResponseBody' from JSON`,
  );
}

/** @internal */
export const UploadFromFilePinResponseBody$inboundSchema: z.ZodType<
  UploadFromFilePinResponseBody,
  z.ZodTypeDef,
  unknown
> = BadRequestException$inboundSchema;

/** @internal */
export type UploadFromFilePinResponseBody$Outbound =
  BadRequestException$Outbound;

/** @internal */
export const UploadFromFilePinResponseBody$outboundSchema: z.ZodType<
  UploadFromFilePinResponseBody$Outbound,
  z.ZodTypeDef,
  UploadFromFilePinResponseBody
> = BadRequestException$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadFromFilePinResponseBody$ {
  /** @deprecated use `UploadFromFilePinResponseBody$inboundSchema` instead. */
  export const inboundSchema = UploadFromFilePinResponseBody$inboundSchema;
  /** @deprecated use `UploadFromFilePinResponseBody$outboundSchema` instead. */
  export const outboundSchema = UploadFromFilePinResponseBody$outboundSchema;
  /** @deprecated use `UploadFromFilePinResponseBody$Outbound` instead. */
  export type Outbound = UploadFromFilePinResponseBody$Outbound;
}

export function uploadFromFilePinResponseBodyToJSON(
  uploadFromFilePinResponseBody: UploadFromFilePinResponseBody,
): string {
  return JSON.stringify(
    UploadFromFilePinResponseBody$outboundSchema.parse(
      uploadFromFilePinResponseBody,
    ),
  );
}

export function uploadFromFilePinResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UploadFromFilePinResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadFromFilePinResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadFromFilePinResponseBody' from JSON`,
  );
}
