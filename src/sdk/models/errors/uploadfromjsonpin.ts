/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  BadRequestException,
  BadRequestException$inboundSchema,
  BadRequestException$Outbound,
  BadRequestException$outboundSchema,
} from "./badrequestexception.js";
import {
  MaximumStorageReached,
  MaximumStorageReached$inboundSchema,
  MaximumStorageReached$Outbound,
  MaximumStorageReached$outboundSchema,
} from "./maximumstoragereached.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type UploadFromJsonPinIpfsResponseBody = MaximumStorageReached;

export type UploadFromJsonPinResponseBody = BadRequestException;

/** @internal */
export const UploadFromJsonPinIpfsResponseBody$inboundSchema: z.ZodType<
  UploadFromJsonPinIpfsResponseBody,
  z.ZodTypeDef,
  unknown
> = MaximumStorageReached$inboundSchema;

/** @internal */
export type UploadFromJsonPinIpfsResponseBody$Outbound =
  MaximumStorageReached$Outbound;

/** @internal */
export const UploadFromJsonPinIpfsResponseBody$outboundSchema: z.ZodType<
  UploadFromJsonPinIpfsResponseBody$Outbound,
  z.ZodTypeDef,
  UploadFromJsonPinIpfsResponseBody
> = MaximumStorageReached$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadFromJsonPinIpfsResponseBody$ {
  /** @deprecated use `UploadFromJsonPinIpfsResponseBody$inboundSchema` instead. */
  export const inboundSchema = UploadFromJsonPinIpfsResponseBody$inboundSchema;
  /** @deprecated use `UploadFromJsonPinIpfsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UploadFromJsonPinIpfsResponseBody$outboundSchema;
  /** @deprecated use `UploadFromJsonPinIpfsResponseBody$Outbound` instead. */
  export type Outbound = UploadFromJsonPinIpfsResponseBody$Outbound;
}

export function uploadFromJsonPinIpfsResponseBodyToJSON(
  uploadFromJsonPinIpfsResponseBody: UploadFromJsonPinIpfsResponseBody,
): string {
  return JSON.stringify(
    UploadFromJsonPinIpfsResponseBody$outboundSchema.parse(
      uploadFromJsonPinIpfsResponseBody,
    ),
  );
}

export function uploadFromJsonPinIpfsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UploadFromJsonPinIpfsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadFromJsonPinIpfsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadFromJsonPinIpfsResponseBody' from JSON`,
  );
}

/** @internal */
export const UploadFromJsonPinResponseBody$inboundSchema: z.ZodType<
  UploadFromJsonPinResponseBody,
  z.ZodTypeDef,
  unknown
> = BadRequestException$inboundSchema;

/** @internal */
export type UploadFromJsonPinResponseBody$Outbound =
  BadRequestException$Outbound;

/** @internal */
export const UploadFromJsonPinResponseBody$outboundSchema: z.ZodType<
  UploadFromJsonPinResponseBody$Outbound,
  z.ZodTypeDef,
  UploadFromJsonPinResponseBody
> = BadRequestException$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadFromJsonPinResponseBody$ {
  /** @deprecated use `UploadFromJsonPinResponseBody$inboundSchema` instead. */
  export const inboundSchema = UploadFromJsonPinResponseBody$inboundSchema;
  /** @deprecated use `UploadFromJsonPinResponseBody$outboundSchema` instead. */
  export const outboundSchema = UploadFromJsonPinResponseBody$outboundSchema;
  /** @deprecated use `UploadFromJsonPinResponseBody$Outbound` instead. */
  export type Outbound = UploadFromJsonPinResponseBody$Outbound;
}

export function uploadFromJsonPinResponseBodyToJSON(
  uploadFromJsonPinResponseBody: UploadFromJsonPinResponseBody,
): string {
  return JSON.stringify(
    UploadFromJsonPinResponseBody$outboundSchema.parse(
      uploadFromJsonPinResponseBody,
    ),
  );
}

export function uploadFromJsonPinResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UploadFromJsonPinResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadFromJsonPinResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadFromJsonPinResponseBody' from JSON`,
  );
}
