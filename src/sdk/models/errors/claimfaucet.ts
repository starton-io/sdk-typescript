/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  BadRequestException,
  BadRequestException$inboundSchema,
  BadRequestException$Outbound,
  BadRequestException$outboundSchema,
} from "./badrequestexception.js";
import {
  CouldNotPerformRequest,
  CouldNotPerformRequest$inboundSchema,
  CouldNotPerformRequest$Outbound,
  CouldNotPerformRequest$outboundSchema,
} from "./couldnotperformrequest.js";
import {
  MicroserviceNotResponding,
  MicroserviceNotResponding$inboundSchema,
  MicroserviceNotResponding$Outbound,
  MicroserviceNotResponding$outboundSchema,
} from "./microservicenotresponding.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type ClaimFaucetWalletResponseBody =
  | MicroserviceNotResponding
  | CouldNotPerformRequest;

export type ClaimFaucetResponseBody = BadRequestException;

/** @internal */
export const ClaimFaucetWalletResponseBody$inboundSchema: z.ZodType<
  ClaimFaucetWalletResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  MicroserviceNotResponding$inboundSchema,
  CouldNotPerformRequest$inboundSchema,
]);

/** @internal */
export type ClaimFaucetWalletResponseBody$Outbound =
  | MicroserviceNotResponding$Outbound
  | CouldNotPerformRequest$Outbound;

/** @internal */
export const ClaimFaucetWalletResponseBody$outboundSchema: z.ZodType<
  ClaimFaucetWalletResponseBody$Outbound,
  z.ZodTypeDef,
  ClaimFaucetWalletResponseBody
> = z.union([
  MicroserviceNotResponding$outboundSchema,
  CouldNotPerformRequest$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClaimFaucetWalletResponseBody$ {
  /** @deprecated use `ClaimFaucetWalletResponseBody$inboundSchema` instead. */
  export const inboundSchema = ClaimFaucetWalletResponseBody$inboundSchema;
  /** @deprecated use `ClaimFaucetWalletResponseBody$outboundSchema` instead. */
  export const outboundSchema = ClaimFaucetWalletResponseBody$outboundSchema;
  /** @deprecated use `ClaimFaucetWalletResponseBody$Outbound` instead. */
  export type Outbound = ClaimFaucetWalletResponseBody$Outbound;
}

export function claimFaucetWalletResponseBodyToJSON(
  claimFaucetWalletResponseBody: ClaimFaucetWalletResponseBody,
): string {
  return JSON.stringify(
    ClaimFaucetWalletResponseBody$outboundSchema.parse(
      claimFaucetWalletResponseBody,
    ),
  );
}

export function claimFaucetWalletResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ClaimFaucetWalletResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClaimFaucetWalletResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClaimFaucetWalletResponseBody' from JSON`,
  );
}

/** @internal */
export const ClaimFaucetResponseBody$inboundSchema: z.ZodType<
  ClaimFaucetResponseBody,
  z.ZodTypeDef,
  unknown
> = BadRequestException$inboundSchema;

/** @internal */
export type ClaimFaucetResponseBody$Outbound = BadRequestException$Outbound;

/** @internal */
export const ClaimFaucetResponseBody$outboundSchema: z.ZodType<
  ClaimFaucetResponseBody$Outbound,
  z.ZodTypeDef,
  ClaimFaucetResponseBody
> = BadRequestException$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClaimFaucetResponseBody$ {
  /** @deprecated use `ClaimFaucetResponseBody$inboundSchema` instead. */
  export const inboundSchema = ClaimFaucetResponseBody$inboundSchema;
  /** @deprecated use `ClaimFaucetResponseBody$outboundSchema` instead. */
  export const outboundSchema = ClaimFaucetResponseBody$outboundSchema;
  /** @deprecated use `ClaimFaucetResponseBody$Outbound` instead. */
  export type Outbound = ClaimFaucetResponseBody$Outbound;
}

export function claimFaucetResponseBodyToJSON(
  claimFaucetResponseBody: ClaimFaucetResponseBody,
): string {
  return JSON.stringify(
    ClaimFaucetResponseBody$outboundSchema.parse(claimFaucetResponseBody),
  );
}

export function claimFaucetResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ClaimFaucetResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClaimFaucetResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClaimFaucetResponseBody' from JSON`,
  );
}
