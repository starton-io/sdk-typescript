/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  BadRequestException,
  BadRequestException$inboundSchema,
  BadRequestException$Outbound,
  BadRequestException$outboundSchema,
} from "./badrequestexception.js";
import {
  NotAuthenticated,
  NotAuthenticated$inboundSchema,
  NotAuthenticated$Outbound,
  NotAuthenticated$outboundSchema,
} from "./notauthenticated.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type CreateWebhookSigningSecretWebhookResponseBody = NotAuthenticated;

export type CreateWebhookSigningSecretResponseBody = BadRequestException;

/** @internal */
export const CreateWebhookSigningSecretWebhookResponseBody$inboundSchema:
  z.ZodType<
    CreateWebhookSigningSecretWebhookResponseBody,
    z.ZodTypeDef,
    unknown
  > = NotAuthenticated$inboundSchema;

/** @internal */
export type CreateWebhookSigningSecretWebhookResponseBody$Outbound =
  NotAuthenticated$Outbound;

/** @internal */
export const CreateWebhookSigningSecretWebhookResponseBody$outboundSchema:
  z.ZodType<
    CreateWebhookSigningSecretWebhookResponseBody$Outbound,
    z.ZodTypeDef,
    CreateWebhookSigningSecretWebhookResponseBody
  > = NotAuthenticated$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhookSigningSecretWebhookResponseBody$ {
  /** @deprecated use `CreateWebhookSigningSecretWebhookResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateWebhookSigningSecretWebhookResponseBody$inboundSchema;
  /** @deprecated use `CreateWebhookSigningSecretWebhookResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateWebhookSigningSecretWebhookResponseBody$outboundSchema;
  /** @deprecated use `CreateWebhookSigningSecretWebhookResponseBody$Outbound` instead. */
  export type Outbound = CreateWebhookSigningSecretWebhookResponseBody$Outbound;
}

export function createWebhookSigningSecretWebhookResponseBodyToJSON(
  createWebhookSigningSecretWebhookResponseBody:
    CreateWebhookSigningSecretWebhookResponseBody,
): string {
  return JSON.stringify(
    CreateWebhookSigningSecretWebhookResponseBody$outboundSchema.parse(
      createWebhookSigningSecretWebhookResponseBody,
    ),
  );
}

export function createWebhookSigningSecretWebhookResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateWebhookSigningSecretWebhookResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateWebhookSigningSecretWebhookResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateWebhookSigningSecretWebhookResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateWebhookSigningSecretResponseBody$inboundSchema: z.ZodType<
  CreateWebhookSigningSecretResponseBody,
  z.ZodTypeDef,
  unknown
> = BadRequestException$inboundSchema;

/** @internal */
export type CreateWebhookSigningSecretResponseBody$Outbound =
  BadRequestException$Outbound;

/** @internal */
export const CreateWebhookSigningSecretResponseBody$outboundSchema: z.ZodType<
  CreateWebhookSigningSecretResponseBody$Outbound,
  z.ZodTypeDef,
  CreateWebhookSigningSecretResponseBody
> = BadRequestException$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhookSigningSecretResponseBody$ {
  /** @deprecated use `CreateWebhookSigningSecretResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateWebhookSigningSecretResponseBody$inboundSchema;
  /** @deprecated use `CreateWebhookSigningSecretResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateWebhookSigningSecretResponseBody$outboundSchema;
  /** @deprecated use `CreateWebhookSigningSecretResponseBody$Outbound` instead. */
  export type Outbound = CreateWebhookSigningSecretResponseBody$Outbound;
}

export function createWebhookSigningSecretResponseBodyToJSON(
  createWebhookSigningSecretResponseBody:
    CreateWebhookSigningSecretResponseBody,
): string {
  return JSON.stringify(
    CreateWebhookSigningSecretResponseBody$outboundSchema.parse(
      createWebhookSigningSecretResponseBody,
    ),
  );
}

export function createWebhookSigningSecretResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateWebhookSigningSecretResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateWebhookSigningSecretResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWebhookSigningSecretResponseBody' from JSON`,
  );
}
