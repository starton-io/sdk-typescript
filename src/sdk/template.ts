/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { dlv } from "../lib/dlv.js";
import {
    encodeFormQuery as encodeFormQuery$,
    encodeSimple as encodeSimple$,
} from "../lib/encodings.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as errors from "./models/errors/index.js";
import { SDKError } from "./models/errors/sdkerror.js";
import { SDKValidationError } from "./models/errors/sdkvalidationerror.js";
import * as operations from "./models/operations/index.js";
import { unwrap as unwrap$ } from "./types/fp.js";
import { createPageIterator, PageIterator, Paginator } from "./types/operations.js";

export class Template extends ClientSDK {
    /**
     * Fetch the list of Smart Contract Templates
     *
     * @remarks
     * Retrieves a paginated list of smart contract templates, you can use filters and pagination options to tailor the results to your specific needs.
     */
    async getAll(
        request: operations.GetAllSmartContractTemplateRequest,
        options?: RequestOptions
    ): Promise<PageIterator<operations.GetAllSmartContractTemplateResponse>> {
        const input$ = typeof request === "undefined" ? {} : request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.GetAllSmartContractTemplateRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const path$ = pathToFunc("/v3/smart-contract-template")();

        const query$ = encodeFormQuery$({
            blockchain: payload$.blockchain,
            category: payload$.category,
            includeCompilationDetails: payload$.includeCompilationDetails,
            includeForm: payload$.includeForm,
            isActivated: payload$.isActivated,
            isAudited: payload$.isAudited,
            limit: payload$.limit,
            name: payload$.name,
            page: payload$.page,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "getAllSmartContractTemplate",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$, raw$] = await m$.match<
            operations.GetAllSmartContractTemplateResponse,
            errors.GetAllSmartContractTemplateResponseBody | SDKError | SDKValidationError
        >(
            m$.json(200, operations.GetAllSmartContractTemplateResponse$inboundSchema, {
                key: "SmartContractTemplatePaginated",
            }),
            m$.jsonErr(400, errors.GetAllSmartContractTemplateResponseBody$inboundSchema),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        const nextFunc = (
            responseData: unknown
        ): Paginator<operations.GetAllSmartContractTemplateResponse> => {
            const page = input$.page || 0;
            const nextPage = page + 1;
            const numPages = dlv(responseData, "meta.totalPages");
            if (numPages == null || numPages <= page) {
                return () => null;
            }

            if (!responseData) {
                return () => null;
            }
            const results = dlv(responseData, "items");
            if (!Array.isArray(results) || !results.length) {
                return () => null;
            }
            const limit = input$.limit || 0;
            if (results.length < limit) {
                return () => null;
            }

            return () =>
                this.getAll(
                    {
                        ...input$,
                        page: nextPage,
                    },
                    options
                );
        };

        const page$ = { ...unwrap$(result$), next: nextFunc(raw$) };
        return { ...page$, ...createPageIterator(page$, !result$.ok) };
    }

    /**
     * Retrieve a Specific Smart Contract Template
     *
     * @remarks
     * Fetches the details of a particular smart contract template using its unique identifier.
     */
    async getOne(
        request: operations.GetOneSmartContractTemplateRequest,
        options?: RequestOptions
    ): Promise<operations.GetOneSmartContractTemplateResponse> {
        const input$ = request;

        const parsed$ = schemas$.safeParse(
            input$,
            (value$) => operations.GetOneSmartContractTemplateRequest$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const payload$ = unwrap$(parsed$);
        const body$ = null;

        const pathParams$ = {
            id: encodeSimple$("id", payload$.id, { explode: false, charEncoding: "percent" }),
        };

        const path$ = pathToFunc("/v3/smart-contract-template/{id}")(pathParams$);

        const query$ = encodeFormQuery$({
            includeForm: payload$.includeForm,
        });

        const headers$ = new Headers({
            Accept: "application/json",
        });

        const apiKey$ = await extractSecurity(this.options$.apiKey);
        const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
        const context = {
            operationID: "getOneSmartContractTemplate",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKey,
        };
        const securitySettings$ = resolveGlobalSecurity(security$);

        const requestRes$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "GET",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );
        const request$ = unwrap$(requestRes$);

        const doResult = await this.do$(request$, {
            context,
            errorCodes: ["400", "404", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });
        const response = unwrap$(doResult);

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
            Headers: {},
        };

        const [result$] = await m$.match<
            operations.GetOneSmartContractTemplateResponse,
            | errors.GetOneSmartContractTemplateResponseBody
            | errors.GetOneSmartContractTemplateSmartContractTemplateResponseBody
            | SDKError
            | SDKValidationError
        >(
            m$.json(200, operations.GetOneSmartContractTemplateResponse$inboundSchema, {
                key: "SmartContractTemplate",
            }),
            m$.jsonErr(400, errors.GetOneSmartContractTemplateResponseBody$inboundSchema),
            m$.jsonErr(
                404,
                errors.GetOneSmartContractTemplateSmartContractTemplateResponseBody$inboundSchema
            ),
            m$.fail(["4XX", "5XX"])
        )(response, { extraFields: responseFields$ });

        return unwrap$(result$);
    }
}
